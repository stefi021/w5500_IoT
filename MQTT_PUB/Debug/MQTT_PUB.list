
MQTT_PUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007658  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08007838  08007838  00008838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b7c  08007b7c  00009120  2**0
                  CONTENTS
  4 .ARM          00000008  08007b7c  08007b7c  00008b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b84  08007b84  00009120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b84  08007b84  00008b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b88  08007b88  00008b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  08007b8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000120  08007cac  00009120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08007cac  0000962c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001471f  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e5  00000000  00000000  0001d86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00020f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d98  00000000  00000000  000220b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279bc  00000000  00000000  00022e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001543f  00000000  00000000  0004a80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f21b3  00000000  00000000  0005fc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151dfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec8  00000000  00000000  00151e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00156d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000120 	.word	0x20000120
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007820 	.word	0x08007820

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000124 	.word	0x20000124
 800021c:	08007820 	.word	0x08007820

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005c6:	f003 fe5e 	bl	8004286 <HAL_Init>

	/* USER CODE BEGIN Init */
	setbuf(stdout, NULL);
 80005ca:	4b3f      	ldr	r3, [pc, #252]	@ (80006c8 <main+0x108>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 f9e4 	bl	80069a0 <setbuf>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d8:	f000 f89a 	bl	8000710 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005dc:	f000 f974 	bl	80008c8 <MX_GPIO_Init>
	MX_SPI1_Init();
 80005e0:	f000 f8e0 	bl	80007a4 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80005e4:	f000 f924 	bl	8000830 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("A Simple MQTT Client Publish Application using W5500!\r\n");
 80005e8:	4838      	ldr	r0, [pc, #224]	@ (80006cc <main+0x10c>)
 80005ea:	f006 f9d1 	bl	8006990 <puts>
	W5500Init();
 80005ee:	f003 f821 	bl	8003634 <W5500Init>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO2);
 80005f2:	4937      	ldr	r1, [pc, #220]	@ (80006d0 <main+0x110>)
 80005f4:	2000      	movs	r0, #0
 80005f6:	f003 fa37 	bl	8003a68 <ctlnetwork>

	wiz_PhyConf phyconf;

	phyconf.by = PHY_CONFBY_SW;
 80005fa:	2301      	movs	r3, #1
 80005fc:	713b      	strb	r3, [r7, #4]
	phyconf.duplex = PHY_DUPLEX_FULL;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
	phyconf.speed = PHY_SPEED_10;
 8000602:	2300      	movs	r3, #0
 8000604:	71bb      	strb	r3, [r7, #6]
	phyconf.mode = PHY_MODE_AUTONEGO;
 8000606:	2301      	movs	r3, #1
 8000608:	717b      	strb	r3, [r7, #5]

	ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4619      	mov	r1, r3
 800060e:	200a      	movs	r0, #10
 8000610:	f003 f94a 	bl	80038a8 <ctlwizchip>

	PHYStatusCheck();
 8000614:	f000 f9ca 	bl	80009ac <PHYStatusCheck>
	PrintPHYConf();
 8000618:	f000 f9ee 	bl	80009f8 <PrintPHYConf>

	connect_data.willFlag = 0;
 800061c:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <main+0x114>)
 800061e:	2200      	movs	r2, #0
 8000620:	76da      	strb	r2, [r3, #27]
	connect_data.MQTTVersion = 3;
 8000622:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <main+0x114>)
 8000624:	2203      	movs	r2, #3
 8000626:	721a      	strb	r2, [r3, #8]
	connect_data.clientID.cstring = "iotencew55";
 8000628:	4b2a      	ldr	r3, [pc, #168]	@ (80006d4 <main+0x114>)
 800062a:	4a2b      	ldr	r2, [pc, #172]	@ (80006d8 <main+0x118>)
 800062c:	60da      	str	r2, [r3, #12]

	//connect_data.username.cstring = opts.username;
	//connect_data.password.cstring = opts.password;

	connect_data.keepAliveInterval = 60;
 800062e:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <main+0x114>)
 8000630:	223c      	movs	r2, #60	@ 0x3c
 8000632:	831a      	strh	r2, [r3, #24]
	connect_data.cleansession = 1;
 8000634:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <main+0x114>)
 8000636:	2201      	movs	r2, #1
 8000638:	769a      	strb	r2, [r3, #26]

	NewNetwork(&network, 1);//1 is the socket number to use
 800063a:	2101      	movs	r1, #1
 800063c:	4827      	ldr	r0, [pc, #156]	@ (80006dc <main+0x11c>)
 800063e:	f001 f9dd 	bl	80019fc <NewNetwork>
	PrintBrokerIP();
 8000642:	f000 fa1d 	bl	8000a80 <PrintBrokerIP>
	printf("Connecting to MQTT Broker ...");
 8000646:	4826      	ldr	r0, [pc, #152]	@ (80006e0 <main+0x120>)
 8000648:	f006 f93a 	bl	80068c0 <iprintf>
	if(ConnectNetwork(&network, destination_ip, destination_port)!=SOCK_OK)
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <main+0x124>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4925      	ldr	r1, [pc, #148]	@ (80006e8 <main+0x128>)
 8000654:	4821      	ldr	r0, [pc, #132]	@ (80006dc <main+0x11c>)
 8000656:	f001 fa4e 	bl	8001af6 <ConnectNetwork>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d004      	beq.n	800066a <main+0xaa>
	{
	  printf("ERROR: Cannot connect with broker!\r\n");
 8000660:	4822      	ldr	r0, [pc, #136]	@ (80006ec <main+0x12c>)
 8000662:	f006 f995 	bl	8006990 <puts>
	  //Broker (server) not reachable
	  while(1);
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <main+0xa6>
	}

	printf("SUCCESS\r\n");
 800066a:	4821      	ldr	r0, [pc, #132]	@ (80006f0 <main+0x130>)
 800066c:	f006 f990 	bl	8006990 <puts>

	MQTTClientInit(&mqtt_client, &network, 1000, sendbuff, 256, receivebuff, 256);
 8000670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <main+0x134>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <main+0x138>)
 8000682:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000686:	4915      	ldr	r1, [pc, #84]	@ (80006dc <main+0x11c>)
 8000688:	481c      	ldr	r0, [pc, #112]	@ (80006fc <main+0x13c>)
 800068a:	f000 fc57 	bl	8000f3c <MQTTClientInit>

	printf("Sending connect packet ...");
 800068e:	481c      	ldr	r0, [pc, #112]	@ (8000700 <main+0x140>)
 8000690:	f006 f916 	bl	80068c0 <iprintf>

	if(MQTTConnect(&mqtt_client, &connect_data)!=MQTT_SUCCESS)
 8000694:	490f      	ldr	r1, [pc, #60]	@ (80006d4 <main+0x114>)
 8000696:	4819      	ldr	r0, [pc, #100]	@ (80006fc <main+0x13c>)
 8000698:	f001 f864 	bl	8001764 <MQTTConnect>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d004      	beq.n	80006ac <main+0xec>
	{
	  printf("ERROR!");
 80006a2:	4818      	ldr	r0, [pc, #96]	@ (8000704 <main+0x144>)
 80006a4:	f006 f90c 	bl	80068c0 <iprintf>
	  while(1);
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <main+0xe8>
	}

	printf("SUCCESS\r\n");
 80006ac:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <main+0x130>)
 80006ae:	f006 f96f 	bl	8006990 <puts>

	while(1)
	{
	  MQTTPublish(&mqtt_client, "test/topic1", &msg);
 80006b2:	4a15      	ldr	r2, [pc, #84]	@ (8000708 <main+0x148>)
 80006b4:	4915      	ldr	r1, [pc, #84]	@ (800070c <main+0x14c>)
 80006b6:	4811      	ldr	r0, [pc, #68]	@ (80006fc <main+0x13c>)
 80006b8:	f001 f865 	bl	8001786 <MQTTPublish>
	  HAL_Delay(1000);
 80006bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c0:	f003 fe52 	bl	8004368 <HAL_Delay>
	  MQTTPublish(&mqtt_client, "test/topic1", &msg);
 80006c4:	bf00      	nop
 80006c6:	e7f4      	b.n	80006b2 <main+0xf2>
 80006c8:	200000d0 	.word	0x200000d0
 80006cc:	08007848 	.word	0x08007848
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000020 	.word	0x20000020
 80006d8:	08007880 	.word	0x08007880
 80006dc:	2000029c 	.word	0x2000029c
 80006e0:	0800788c 	.word	0x0800788c
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	20000018 	.word	0x20000018
 80006ec:	080078ac 	.word	0x080078ac
 80006f0:	080078d0 	.word	0x080078d0
 80006f4:	200003ac 	.word	0x200003ac
 80006f8:	200002ac 	.word	0x200002ac
 80006fc:	20000234 	.word	0x20000234
 8000700:	080078dc 	.word	0x080078dc
 8000704:	080078f8 	.word	0x080078f8
 8000708:	20000078 	.word	0x20000078
 800070c:	08007900 	.word	0x08007900

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	2238      	movs	r2, #56	@ 0x38
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f006 fad2 	bl	8006cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000736:	f004 f8b7 	bl	80048a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073a:	2301      	movs	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000748:	2303      	movs	r3, #3
 800074a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	4618      	mov	r0, r3
 8000766:	f004 f953 	bl	8004a10 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000770:	f000 f9a0 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2303      	movs	r3, #3
 800077a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2101      	movs	r1, #1
 800078c:	4618      	mov	r0, r3
 800078e:	f004 fc51 	bl	8005034 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000798:	f000 f98c 	bl	8000ab4 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	@ 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007aa:	4a20      	ldr	r2, [pc, #128]	@ (800082c <MX_SPI1_Init+0x88>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007da:	2208      	movs	r2, #8
 80007dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007f2:	2207      	movs	r2, #7
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_SPI1_Init+0x84>)
 80007fe:	2208      	movs	r2, #8
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000802:	4809      	ldr	r0, [pc, #36]	@ (8000828 <MX_SPI1_Init+0x84>)
 8000804:	f005 f880 	bl	8005908 <HAL_SPI_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 f951 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000812:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <MX_SPI1_Init+0x84>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b03      	ldr	r3, [pc, #12]	@ (8000828 <MX_SPI1_Init+0x84>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000820:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000013c 	.word	0x2000013c
 800082c:	40013000 	.word	0x40013000

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 8000836:	4a23      	ldr	r2, [pc, #140]	@ (80008c4 <MX_USART2_UART_Init+0x94>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800083a:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 800083c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000878:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 800087a:	f005 f8f0 	bl	8005a5e <HAL_UART_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000884:	f000 f916 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 800088c:	f005 fe8c 	bl	80065a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000896:	f000 f90d 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4808      	ldr	r0, [pc, #32]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 800089e:	f005 fec1 	bl	8006624 <HAL_UARTEx_SetRxFifoThreshold>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008a8:	f000 f904 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_USART2_UART_Init+0x90>)
 80008ae:	f005 fe42 	bl	8006536 <HAL_UARTEx_DisableFifoMode>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008b8:	f000 f8fc 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200001a0 	.word	0x200001a0
 80008c4:	40004400 	.word	0x40004400

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_GPIO_Init+0x90>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000958 <MX_GPIO_Init+0x90>)
 80008e4:	f043 0320 	orr.w	r3, r3, #32
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_GPIO_Init+0x90>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0320 	and.w	r3, r3, #32
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_GPIO_Init+0x90>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a17      	ldr	r2, [pc, #92]	@ (8000958 <MX_GPIO_Init+0x90>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_GPIO_Init+0x90>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_GPIO_Init+0x90>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a11      	ldr	r2, [pc, #68]	@ (8000958 <MX_GPIO_Init+0x90>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_GPIO_Init+0x90>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2103      	movs	r1, #3
 800092a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092e:	f003 ffa3 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000932:	2303      	movs	r3, #3
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094c:	f003 fe12 	bl	8004574 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000

0800095c <UWriteData>:

/* USER CODE BEGIN 4 */
void UWriteData(const char data)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 8000966:	bf00      	nop
 8000968:	4b08      	ldr	r3, [pc, #32]	@ (800098c <UWriteData+0x30>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000972:	2b80      	cmp	r3, #128	@ 0x80
 8000974:	d1f8      	bne.n	8000968 <UWriteData+0xc>

	huart2.Instance->TDR=data;
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <UWriteData+0x30>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28

}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200001a0 	.word	0x200001a0

08000990 <__io_putchar>:

int __io_putchar(int ch)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ffdd 	bl	800095c <UWriteData>
	return ch;
 80009a2:	687b      	ldr	r3, [r7, #4]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	uint8_t tmp;


	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 80009b2:	480e      	ldr	r0, [pc, #56]	@ (80009ec <PHYStatusCheck+0x40>)
 80009b4:	f005 ff84 	bl	80068c0 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	4619      	mov	r1, r3
 80009bc:	200f      	movs	r0, #15
 80009be:	f002 ff73 	bl	80038a8 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d106      	bne.n	80009d6 <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 80009c8:	4809      	ldr	r0, [pc, #36]	@ (80009f0 <PHYStatusCheck+0x44>)
 80009ca:	f005 ff79 	bl	80068c0 <iprintf>
			HAL_Delay(1500);
 80009ce:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80009d2:	f003 fcc9 	bl	8004368 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0ea      	beq.n	80009b2 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <PHYStatusCheck+0x48>)
 80009de:	f005 ff6f 	bl	80068c0 <iprintf>

}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	0800790c 	.word	0x0800790c
 80009f0:	08007934 	.word	0x08007934
 80009f4:	08007948 	.word	0x08007948

080009f8 <PrintPHYConf>:

void PrintPHYConf(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	200b      	movs	r0, #11
 8000a04:	f002 ff50 	bl	80038a8 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000a08:	793b      	ldrb	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 8000a0e:	4814      	ldr	r0, [pc, #80]	@ (8000a60 <PrintPHYConf+0x68>)
 8000a10:	f005 ff56 	bl	80068c0 <iprintf>
 8000a14:	e002      	b.n	8000a1c <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 8000a16:	4813      	ldr	r0, [pc, #76]	@ (8000a64 <PrintPHYConf+0x6c>)
 8000a18:	f005 ff52 	bl	80068c0 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 8000a1c:	797b      	ldrb	r3, [r7, #5]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d103      	bne.n	8000a2a <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 8000a22:	4811      	ldr	r0, [pc, #68]	@ (8000a68 <PrintPHYConf+0x70>)
 8000a24:	f005 ff4c 	bl	80068c0 <iprintf>
 8000a28:	e002      	b.n	8000a30 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 8000a2a:	4810      	ldr	r0, [pc, #64]	@ (8000a6c <PrintPHYConf+0x74>)
 8000a2c:	f005 ff48 	bl	80068c0 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d103      	bne.n	8000a3e <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 8000a36:	480e      	ldr	r0, [pc, #56]	@ (8000a70 <PrintPHYConf+0x78>)
 8000a38:	f005 ff42 	bl	80068c0 <iprintf>
 8000a3c:	e002      	b.n	8000a44 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 8000a3e:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <PrintPHYConf+0x7c>)
 8000a40:	f005 ff3e 	bl	80068c0 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d103      	bne.n	8000a52 <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 8000a4a:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <PrintPHYConf+0x80>)
 8000a4c:	f005 ff38 	bl	80068c0 <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 8000a50:	e002      	b.n	8000a58 <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 8000a52:	480a      	ldr	r0, [pc, #40]	@ (8000a7c <PrintPHYConf+0x84>)
 8000a54:	f005 ff34 	bl	80068c0 <iprintf>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	08007964 	.word	0x08007964
 8000a64:	08007988 	.word	0x08007988
 8000a68:	080079a8 	.word	0x080079a8
 8000a6c:	080079c4 	.word	0x080079c4
 8000a70:	080079e4 	.word	0x080079e4
 8000a74:	080079f8 	.word	0x080079f8
 8000a78:	08007a0c 	.word	0x08007a0c
 8000a7c:	08007a1c 	.word	0x08007a1c

08000a80 <PrintBrokerIP>:

static void PrintBrokerIP(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af02      	add	r7, sp, #8
	printf("Broker IP: %d.%d.%d.%d\r\n",destination_ip[0],destination_ip[1],destination_ip[2],destination_ip[3]);
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <PrintBrokerIP+0x2c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <PrintBrokerIP+0x2c>)
 8000a8e:	785b      	ldrb	r3, [r3, #1]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <PrintBrokerIP+0x2c>)
 8000a94:	789b      	ldrb	r3, [r3, #2]
 8000a96:	4618      	mov	r0, r3
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <PrintBrokerIP+0x2c>)
 8000a9a:	78db      	ldrb	r3, [r3, #3]
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <PrintBrokerIP+0x30>)
 8000aa2:	f005 ff0d 	bl	80068c0 <iprintf>
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000018 	.word	0x20000018
 8000ab0:	08007a30 	.word	0x08007a30

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000af6:	f003 ff7b 	bl	80049f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a25      	ldr	r2, [pc, #148]	@ (8000bbc <HAL_SPI_MspInit+0xb4>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d144      	bne.n	8000bb4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2a:	4b25      	ldr	r3, [pc, #148]	@ (8000bc0 <HAL_SPI_MspInit+0xb8>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2e:	4a24      	ldr	r2, [pc, #144]	@ (8000bc0 <HAL_SPI_MspInit+0xb8>)
 8000b30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b36:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <HAL_SPI_MspInit+0xb8>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <HAL_SPI_MspInit+0xb8>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <HAL_SPI_MspInit+0xb8>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <HAL_SPI_MspInit+0xb8>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <HAL_SPI_MspInit+0xb8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a18      	ldr	r2, [pc, #96]	@ (8000bc0 <HAL_SPI_MspInit+0xb8>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <HAL_SPI_MspInit+0xb8>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b72:	23c0      	movs	r3, #192	@ 0xc0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b90:	f003 fcf0 	bl	8004574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b94:	2308      	movs	r3, #8
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <HAL_SPI_MspInit+0xbc>)
 8000bb0:	f003 fce0 	bl	8004574 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	@ 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b09e      	sub	sp, #120	@ 0x78
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2254      	movs	r2, #84	@ 0x54
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 f86d 	bl	8006cc8 <memset>
  if(huart->Instance==USART2)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c70 <HAL_UART_MspInit+0xa8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d136      	bne.n	8000c66 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4618      	mov	r0, r3
 8000c06:	f004 fc31 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c10:	f7ff ff50 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c14:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <HAL_UART_MspInit+0xac>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c18:	4a16      	ldr	r2, [pc, #88]	@ (8000c74 <HAL_UART_MspInit+0xac>)
 8000c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c20:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <HAL_UART_MspInit+0xac>)
 8000c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <HAL_UART_MspInit+0xac>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c30:	4a10      	ldr	r2, [pc, #64]	@ (8000c74 <HAL_UART_MspInit+0xac>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <HAL_UART_MspInit+0xac>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c44:	230c      	movs	r3, #12
 8000c46:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c54:	2307      	movs	r3, #7
 8000c56:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f003 fc87 	bl	8004574 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c66:	bf00      	nop
 8000c68:	3778      	adds	r7, #120	@ 0x78
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cce:	f003 fb2d 	bl	800432c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  MilliTimer_Handler();
 8000cd2:	f000 fe1f 	bl	8001914 <MilliTimer_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI15_10_IRQn 0 */
//  BSP_PB_IRQHandler(BUTTON_USER);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
  }

  return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fe27 	bl	8000990 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
  }
  return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f005 ffc8 	bl	8006d88 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20020000 	.word	0x20020000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200004ac 	.word	0x200004ac
 8000e2c:	20000630 	.word	0x20000630

08000e30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	601a      	str	r2, [r3, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d003      	beq.n	8000e94 <getNextPacketId+0x1c>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	e000      	b.n	8000e96 <getNextPacketId+0x1e>
 8000e94:	2301      	movs	r3, #1
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8000eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eac:	b087      	sub	sp, #28
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	617b      	str	r3, [r7, #20]
        sent = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8000ec0:	e018      	b.n	8000ef4 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ec6:	689c      	ldr	r4, [r3, #8]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	18d6      	adds	r6, r2, r3
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 fd7b 	bl	80019d0 <TimerLeftMS>
 8000eda:	4603      	mov	r3, r0
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	4631      	mov	r1, r6
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	47a0      	blx	r4
 8000ee4:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0e      	blt.n	8000f0a <sendPacket+0x60>
            break;
        sent += rc;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	da07      	bge.n	8000f0c <sendPacket+0x62>
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fd25 	bl	800194c <TimerIsExpired>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0dc      	beq.n	8000ec2 <sendPacket+0x18>
 8000f08:	e000      	b.n	8000f0c <sendPacket+0x62>
            break;
 8000f0a:	bf00      	nop
    }
    if (sent == length)
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d10b      	bne.n	8000f2c <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f000 fd3d 	bl	80019a0 <TimerCountdown>
        rc = MQTT_SUCCESS;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e002      	b.n	8000f32 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	617b      	str	r3, [r7, #20]
    return rc;
 8000f32:	697b      	ldr	r3, [r7, #20]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	371c      	adds	r7, #28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f3c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	655a      	str	r2, [r3, #84]	@ 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e008      	b.n	8000f68 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	3205      	adds	r2, #5
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	ddf3      	ble.n	8000f56 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f84:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f8a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	@ 0x24
    c->ping_outstanding = 0;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	651a      	str	r2, [r3, #80]	@ 0x50
	  c->next_packetid = 1;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3358      	adds	r3, #88	@ 0x58
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fcbe 	bl	8001930 <TimerInit>
    TimerInit(&c->last_received);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3360      	adds	r3, #96	@ 0x60
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fcb9 	bl	8001930 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8000fc6:	b590      	push	{r4, r7, lr}
 8000fc8:	b08b      	sub	sp, #44	@ 0x2c
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	3301      	adds	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
 8000ff0:	6a3a      	ldr	r2, [r7, #32]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dd03      	ble.n	8001000 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	61bb      	str	r3, [r7, #24]
            goto exit;
 8000ffe:	e021      	b.n	8001044 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001004:	685c      	ldr	r4, [r3, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800100a:	f107 0117 	add.w	r1, r7, #23
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	47a0      	blx	r4
 8001014:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d112      	bne.n	8001042 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001026:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	441a      	add	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	01db      	lsls	r3, r3, #7
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	dbd1      	blt.n	8000fe4 <decodePacket+0x1e>
exit:
 8001040:	e000      	b.n	8001044 <decodePacket+0x7e>
            goto exit;
 8001042:	bf00      	nop
    return len;
 8001044:	6a3b      	ldr	r3, [r7, #32]
}
 8001046:	4618      	mov	r0, r3
 8001048:	372c      	adds	r7, #44	@ 0x2c
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}

0800104e <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800104e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001050:	b089      	sub	sp, #36	@ 0x24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
    int len = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001068:	685c      	ldr	r4, [r3, #4]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	695e      	ldr	r6, [r3, #20]
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f000 fcac 	bl	80019d0 <TimerLeftMS>
 8001078:	4603      	mov	r3, r0
 800107a:	2201      	movs	r2, #1
 800107c:	4631      	mov	r1, r6
 800107e:	4628      	mov	r0, r5
 8001080:	47a0      	blx	r4
 8001082:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d15d      	bne.n	8001146 <readPacket+0xf8>
        goto exit;

    len = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800108e:	68b8      	ldr	r0, [r7, #8]
 8001090:	f000 fc9e 	bl	80019d0 <TimerLeftMS>
 8001094:	4602      	mov	r2, r0
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4619      	mov	r1, r3
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff ff92 	bl	8000fc6 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fff4 	bl	800209a <MQTTPacket_encode>
 80010b2:	4602      	mov	r2, r0
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	4413      	add	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d203      	bcs.n	80010d0 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 80010c8:	f06f 0301 	mvn.w	r3, #1
 80010cc:	61fb      	str	r3, [r7, #28]
        goto exit;
 80010ce:	e03d      	b.n	800114c <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	dd20      	ble.n	8001118 <readPacket+0xca>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010da:	685c      	ldr	r4, [r3, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	18d6      	adds	r6, r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	68b8      	ldr	r0, [r7, #8]
 80010ee:	f000 fc6f 	bl	80019d0 <TimerLeftMS>
 80010f2:	4603      	mov	r3, r0
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	4631      	mov	r1, r6
 80010f8:	4628      	mov	r0, r5
 80010fa:	47a0      	blx	r4
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <readPacket+0xca>
        rc = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
        goto exit;
 8001116:	e019      	b.n	800114c <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8001120:	7d3b      	ldrb	r3, [r7, #20]
 8001122:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001126:	b2db      	uxtb	r3, r3
 8001128:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f000 fc2e 	bl	80019a0 <TimerCountdown>
 8001144:	e002      	b.n	800114c <readPacket+0xfe>
        goto exit;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <readPacket+0xfe>
exit:
 800114a:	bf00      	nop
    return rc;
 800114c:	69fb      	ldr	r3, [r7, #28]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001156 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8001156:	b480      	push	{r7}
 8001158:	b087      	sub	sp, #28
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	461a      	mov	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4413      	add	r3, r2
 8001174:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8001176:	e039      	b.n	80011ec <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b2f      	cmp	r3, #47	@ 0x2f
 800117e:	d103      	bne.n	8001188 <isTopicMatched+0x32>
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b2f      	cmp	r3, #47	@ 0x2f
 8001186:	d13a      	bne.n	80011fe <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b2b      	cmp	r3, #43	@ 0x2b
 800118e:	d009      	beq.n	80011a4 <isTopicMatched+0x4e>
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b23      	cmp	r3, #35	@ 0x23
 8001196:	d005      	beq.n	80011a4 <isTopicMatched+0x4e>
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d12e      	bne.n	8001202 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b2b      	cmp	r3, #43	@ 0x2b
 80011aa:	d112      	bne.n	80011d2 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	3301      	adds	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80011b2:	e005      	b.n	80011c0 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	3301      	adds	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d20b      	bcs.n	80011e0 <isTopicMatched+0x8a>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80011ce:	d1f1      	bne.n	80011b4 <isTopicMatched+0x5e>
 80011d0:	e006      	b.n	80011e0 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b23      	cmp	r3, #35	@ 0x23
 80011d8:	d102      	bne.n	80011e0 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3b01      	subs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
        curf++;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
        curn++;
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	3301      	adds	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <isTopicMatched+0xae>
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d3bd      	bcc.n	8001178 <isTopicMatched+0x22>
 80011fc:	e002      	b.n	8001204 <isTopicMatched+0xae>
            break;
 80011fe:	bf00      	nop
 8001200:	e000      	b.n	8001204 <isTopicMatched+0xae>
            break;
 8001202:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	429a      	cmp	r2, r3
 800120a:	d105      	bne.n	8001218 <isTopicMatched+0xc2>
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <isTopicMatched+0xc2>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <isTopicMatched+0xc4>
 8001218:	2300      	movs	r3, #0
 800121a:	b2db      	uxtb	r3, r3
}
 800121c:	4618      	mov	r0, r3
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
 800123e:	e03c      	b.n	80012ba <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001244:	3205      	adds	r2, #5
 8001246:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d032      	beq.n	80012b4 <deliverMessage+0x8c>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001252:	3205      	adds	r2, #5
 8001254:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001258:	4619      	mov	r1, r3
 800125a:	68b8      	ldr	r0, [r7, #8]
 800125c:	f001 f8ec 	bl	8002438 <MQTTPacket_equals>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10b      	bne.n	800127e <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800126a:	3205      	adds	r2, #5
 800126c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff6f 	bl	8001156 <isTopicMatched>
 8001278:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800127a:	2b00      	cmp	r3, #0
 800127c:	d01a      	beq.n	80012b4 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001282:	3305      	adds	r3, #5
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d012      	beq.n	80012b4 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fddc 	bl	8000e54 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	3305      	adds	r3, #5
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f107 0218 	add.w	r2, r7, #24
 80012ac:	4610      	mov	r0, r2
 80012ae:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80012b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b6:	3301      	adds	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	2b04      	cmp	r3, #4
 80012be:	ddbf      	ble.n	8001240 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c6:	d112      	bne.n	80012ee <deliverMessage+0xc6>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00e      	beq.n	80012ee <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fdbb 	bl	8000e54 <NewMessageData>
        c->defaultMessageHandler(&md);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012e2:	f107 0210 	add.w	r2, r7, #16
 80012e6:	4610      	mov	r0, r2
 80012e8:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
    }

    return rc;
 80012ee:	6a3b      	ldr	r3, [r7, #32]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3728      	adds	r7, #40	@ 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <keepalive>:


int keepalive(MQTTClient* c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d03e      	beq.n	800138a <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3358      	adds	r3, #88	@ 0x58
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fb1b 	bl	800194c <TimerIsExpired>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d107      	bne.n	800132c <keepalive+0x34>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3360      	adds	r3, #96	@ 0x60
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fb13 	bl	800194c <TimerIsExpired>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d030      	beq.n	800138e <keepalive+0x96>
    {
        if (c->ping_outstanding)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7f1b      	ldrb	r3, [r3, #28]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e029      	b.n	8001390 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	4618      	mov	r0, r3
 8001342:	f000 faf5 	bl	8001930 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fb12 	bl	8001978 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f000 fdcf 	bl	8001f02 <MQTTSerialize_pingreq>
 8001364:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd11      	ble.n	8001390 <keepalive+0x98>
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	461a      	mov	r2, r3
 8001372:	6939      	ldr	r1, [r7, #16]
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fd98 	bl	8000eaa <sendPacket>
 800137a:	6178      	str	r0, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <keepalive+0x98>
                c->ping_outstanding = 1;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	771a      	strb	r2, [r3, #28]
 8001388:	e002      	b.n	8001390 <keepalive+0x98>
        goto exit;
 800138a:	bf00      	nop
 800138c:	e000      	b.n	8001390 <keepalive+0x98>
        }
    }

exit:
 800138e:	bf00      	nop
    return rc;
 8001390:	697b      	ldr	r3, [r7, #20]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 800139a:	b480      	push	{r7}
 800139c:	b085      	sub	sp, #20
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
    int i = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e008      	b.n	80013be <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	3205      	adds	r2, #5
 80013b2:	2100      	movs	r1, #0
 80013b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3301      	adds	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	ddf3      	ble.n	80013ac <MQTTCleanSession+0x12>
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffd3 	bl	800139a <MQTTCleanSession>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	b095      	sub	sp, #84	@ 0x54
 8001400:	af06      	add	r7, sp, #24
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    int len = 0,
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = MQTT_SUCCESS;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	@ 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fe1c 	bl	800104e <readPacket>
 8001416:	62f8      	str	r0, [r7, #44]	@ 0x2c

    switch (packet_type)
 8001418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800141a:	2b0d      	cmp	r3, #13
 800141c:	d81e      	bhi.n	800145c <cycle+0x60>
 800141e:	a201      	add	r2, pc, #4	@ (adr r2, 8001424 <cycle+0x28>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	080015b3 	.word	0x080015b3
 8001428:	0800145d 	.word	0x0800145d
 800142c:	080015b3 	.word	0x080015b3
 8001430:	08001463 	.word	0x08001463
 8001434:	080015b3 	.word	0x080015b3
 8001438:	0800152f 	.word	0x0800152f
 800143c:	0800152f 	.word	0x0800152f
 8001440:	080015b3 	.word	0x080015b3
 8001444:	0800145d 	.word	0x0800145d
 8001448:	080015b3 	.word	0x080015b3
 800144c:	0800145d 	.word	0x0800145d
 8001450:	080015b3 	.word	0x080015b3
 8001454:	0800145d 	.word	0x0800145d
 8001458:	080015ab 	.word	0x080015ab
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 800145c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145e:	633b      	str	r3, [r7, #48]	@ 0x30
            goto exit;
 8001460:	e0b9      	b.n	80015d6 <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800146e:	4616      	mov	r6, r2
 8001470:	f107 0210 	add.w	r2, r7, #16
 8001474:	1d15      	adds	r5, r2, #4
 8001476:	f107 0210 	add.w	r2, r7, #16
 800147a:	1c54      	adds	r4, r2, #1
 800147c:	f107 010c 	add.w	r1, r7, #12
 8001480:	f107 0210 	add.w	r2, r7, #16
 8001484:	1c90      	adds	r0, r2, #2
 8001486:	9604      	str	r6, [sp, #16]
 8001488:	9303      	str	r3, [sp, #12]
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	330c      	adds	r3, #12
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	3308      	adds	r3, #8
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f107 0320 	add.w	r3, r7, #32
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	462b      	mov	r3, r5
 80014a2:	4622      	mov	r2, r4
 80014a4:	f000 fd3c 	bl	8001f20 <MQTTDeserialize_publish>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	f040 8090 	bne.w	80015d0 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80014b6:	f107 0210 	add.w	r2, r7, #16
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff feb1 	bl	8001228 <deliverMessage>
            if (msg.qos != QOS0)
 80014c6:	7c3b      	ldrb	r3, [r7, #16]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d074      	beq.n	80015b6 <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 80014cc:	7c3b      	ldrb	r3, [r7, #16]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d10c      	bne.n	80014ec <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6918      	ldr	r0, [r3, #16]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	4619      	mov	r1, r3
 80014dc:	8abb      	ldrh	r3, [r7, #20]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2300      	movs	r3, #0
 80014e2:	2204      	movs	r2, #4
 80014e4:	f001 f875 	bl	80025d2 <MQTTSerialize_ack>
 80014e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80014ea:	e00e      	b.n	800150a <cycle+0x10e>
                else if (msg.qos == QOS2)
 80014ec:	7c3b      	ldrb	r3, [r7, #16]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d10b      	bne.n	800150a <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6918      	ldr	r0, [r3, #16]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4619      	mov	r1, r3
 80014fc:	8abb      	ldrh	r3, [r7, #20]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	2205      	movs	r2, #5
 8001504:	f001 f865 	bl	80025d2 <MQTTSerialize_ack>
 8001508:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 800150a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800150c:	2b00      	cmp	r3, #0
 800150e:	dc03      	bgt.n	8001518 <cycle+0x11c>
                    rc = FAILURE;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	633b      	str	r3, [r7, #48]	@ 0x30
 8001516:	e005      	b.n	8001524 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fcc4 	bl	8000eaa <sendPacket>
 8001522:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8001524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152a:	d144      	bne.n	80015b6 <cycle+0x1ba>
                    goto exit; // there was a problem
 800152c:	e053      	b.n	80015d6 <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695c      	ldr	r4, [r3, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	f107 020a 	add.w	r2, r7, #10
 800153a:	f107 0109 	add.w	r1, r7, #9
 800153e:	f107 0008 	add.w	r0, r7, #8
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4623      	mov	r3, r4
 8001546:	f000 fd5d 	bl	8002004 <MQTTDeserialize_ack>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d003      	beq.n	8001558 <cycle+0x15c>
                rc = FAILURE;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
 8001556:	e023      	b.n	80015a0 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6918      	ldr	r0, [r3, #16]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4619      	mov	r1, r3
 8001562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001564:	2b05      	cmp	r3, #5
 8001566:	d101      	bne.n	800156c <cycle+0x170>
 8001568:	2206      	movs	r2, #6
 800156a:	e000      	b.n	800156e <cycle+0x172>
 800156c:	2207      	movs	r2, #7
 800156e:	897b      	ldrh	r3, [r7, #10]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2300      	movs	r3, #0
 8001574:	f001 f82d 	bl	80025d2 <MQTTSerialize_ack>
 8001578:	6378      	str	r0, [r7, #52]	@ 0x34
 800157a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800157c:	2b00      	cmp	r3, #0
 800157e:	dc03      	bgt.n	8001588 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	633b      	str	r3, [r7, #48]	@ 0x30
 8001586:	e00b      	b.n	80015a0 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fc8c 	bl	8000eaa <sendPacket>
 8001592:	6338      	str	r0, [r7, #48]	@ 0x30
 8001594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 80015a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a6:	d108      	bne.n	80015ba <cycle+0x1be>
                goto exit; // there was a problem
 80015a8:	e015      	b.n	80015d6 <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	771a      	strb	r2, [r3, #28]
            break;
 80015b0:	e004      	b.n	80015bc <cycle+0x1c0>
            break;
 80015b2:	bf00      	nop
 80015b4:	e002      	b.n	80015bc <cycle+0x1c0>
            break;
 80015b6:	bf00      	nop
 80015b8:	e000      	b.n	80015bc <cycle+0x1c0>
            break;
 80015ba:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fe9b 	bl	80012f8 <keepalive>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80015ce:	e002      	b.n	80015d6 <cycle+0x1da>
                goto exit;
 80015d0:	bf00      	nop
 80015d2:	e000      	b.n	80015d6 <cycle+0x1da>
    }

exit:
 80015d4:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 80015d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <cycle+0x1e6>
        rc = packet_type;
 80015dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015de:	633b      	str	r3, [r7, #48]	@ 0x30
 80015e0:	e006      	b.n	80015f0 <cycle+0x1f4>
    else if (c->isconnected)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <cycle+0x1f4>
        MQTTCloseSession(c);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fef1 	bl	80013d2 <MQTTCloseSession>
    return rc;
 80015f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	373c      	adds	r7, #60	@ 0x3c
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fa:	bf00      	nop

080015fc <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f99c 	bl	800194c <TimerIsExpired>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10c      	bne.n	8001634 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff feed 	bl	80013fc <cycle>
 8001622:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d004      	beq.n	8001636 <waitfor+0x3a>
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	daed      	bge.n	800160e <waitfor+0x12>
 8001632:	e000      	b.n	8001636 <waitfor+0x3a>
            break; // we timed out
 8001634:	bf00      	nop

    return rc;
 8001636:	697b      	ldr	r3, [r7, #20]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b09e      	sub	sp, #120	@ 0x78
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8001652:	4a43      	ldr	r2, [pc, #268]	@ (8001760 <MQTTConnectWithResults+0x120>)
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4611      	mov	r1, r2
 800165a:	2258      	movs	r2, #88	@ 0x58
 800165c:	4618      	mov	r0, r3
 800165e:	f005 fbc0 	bl	8006de2 <memcpy>
    int len = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d164      	bne.n	8001738 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 800166e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f95c 	bl	8001930 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f978 	bl	8001978 <TimerCountdownMS>

    if (options == 0)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	8b1b      	ldrh	r3, [r3, #24]
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	7e9b      	ldrb	r3, [r3, #26]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4610      	mov	r0, r2
 80016b6:	f000 f973 	bl	80019a0 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6918      	ldr	r0, [r3, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f000 faa3 	bl	8001c10 <MQTTSerialize_connect>
 80016ca:	6738      	str	r0, [r7, #112]	@ 0x70
 80016cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	dd34      	ble.n	800173c <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 80016d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80016d6:	461a      	mov	r2, r3
 80016d8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff fbe5 	bl	8000eaa <sendPacket>
 80016e0:	6778      	str	r0, [r7, #116]	@ 0x74
 80016e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d12b      	bne.n	8001740 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 80016e8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80016ec:	461a      	mov	r2, r3
 80016ee:	2102      	movs	r1, #2
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f7ff ff83 	bl	80015fc <waitfor>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d119      	bne.n	8001730 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	1c58      	adds	r0, r3, #1
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f000 fb67 	bl	8001de8 <MQTTDeserialize_connack>
 800171a:	4603      	mov	r3, r0
 800171c:	2b01      	cmp	r3, #1
 800171e:	d103      	bne.n	8001728 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	677b      	str	r3, [r7, #116]	@ 0x74
 8001726:	e00c      	b.n	8001742 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	677b      	str	r3, [r7, #116]	@ 0x74
 800172e:	e008      	b.n	8001742 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	677b      	str	r3, [r7, #116]	@ 0x74
 8001736:	e004      	b.n	8001742 <MQTTConnectWithResults+0x102>
		  goto exit;
 8001738:	bf00      	nop
 800173a:	e002      	b.n	8001742 <MQTTConnectWithResults+0x102>
        goto exit;
 800173c:	bf00      	nop
 800173e:	e000      	b.n	8001742 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8001740:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8001742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8001754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8001756:	4618      	mov	r0, r3
 8001758:	3778      	adds	r7, #120	@ 0x78
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	08007a4c 	.word	0x08007a4c

08001764 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	461a      	mov	r2, r3
 8001774:	6839      	ldr	r1, [r7, #0]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff62 	bl	8001640 <MQTTConnectWithResults>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8001786:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001788:	b097      	sub	sp, #92	@ 0x5c
 800178a:	af08      	add	r7, sp, #32
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicName;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	61fb      	str	r3, [r7, #28]
    int len = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 809b 	beq.w	80018ec <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 80017b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f8b8 	bl	8001930 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f8d4 	bl	8001978 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d003      	beq.n	80017e0 <MQTTPublish+0x5a>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d106      	bne.n	80017ee <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff fb49 	bl	8000e78 <getNextPacketId>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	469c      	mov	ip, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	469e      	mov	lr, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	785d      	ldrb	r5, [r3, #1]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8001810:	9206      	str	r2, [sp, #24]
 8001812:	9305      	str	r3, [sp, #20]
 8001814:	ac02      	add	r4, sp, #8
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800181e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001822:	9601      	str	r6, [sp, #4]
 8001824:	9500      	str	r5, [sp, #0]
 8001826:	4673      	mov	r3, lr
 8001828:	2200      	movs	r2, #0
 800182a:	4661      	mov	r1, ip
 800182c:	6838      	ldr	r0, [r7, #0]
 800182e:	f000 fe5a 	bl	80024e6 <MQTTSerialize_publish>
 8001832:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 8001834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001836:	2b00      	cmp	r3, #0
 8001838:	dd5a      	ble.n	80018f0 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 800183a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800183e:	461a      	mov	r2, r3
 8001840:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff fb31 	bl	8000eaa <sendPacket>
 8001848:	6378      	str	r0, [r7, #52]	@ 0x34
 800184a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800184c:	2b00      	cmp	r3, #0
 800184e:	d151      	bne.n	80018f4 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d122      	bne.n	800189e <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8001858:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800185c:	461a      	mov	r2, r3
 800185e:	2104      	movs	r1, #4
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff fecb 	bl	80015fc <waitfor>
 8001866:	4603      	mov	r3, r0
 8001868:	2b04      	cmp	r3, #4
 800186a:	d114      	bne.n	8001896 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	695c      	ldr	r4, [r3, #20]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f107 021a 	add.w	r2, r7, #26
 8001878:	f107 0119 	add.w	r1, r7, #25
 800187c:	f107 0018 	add.w	r0, r7, #24
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	4623      	mov	r3, r4
 8001884:	f000 fbbe 	bl	8002004 <MQTTDeserialize_ack>
 8001888:	4603      	mov	r3, r0
 800188a:	2b01      	cmp	r3, #1
 800188c:	d035      	beq.n	80018fa <MQTTPublish+0x174>
                rc = FAILURE;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	637b      	str	r3, [r7, #52]	@ 0x34
 8001894:	e031      	b.n	80018fa <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
 800189c:	e02d      	b.n	80018fa <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d128      	bne.n	80018f8 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 80018a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018aa:	461a      	mov	r2, r3
 80018ac:	2107      	movs	r1, #7
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7ff fea4 	bl	80015fc <waitfor>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d114      	bne.n	80018e4 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	695c      	ldr	r4, [r3, #20]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f107 0216 	add.w	r2, r7, #22
 80018c6:	f107 0115 	add.w	r1, r7, #21
 80018ca:	f107 0014 	add.w	r0, r7, #20
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	4623      	mov	r3, r4
 80018d2:	f000 fb97 	bl	8002004 <MQTTDeserialize_ack>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d00e      	beq.n	80018fa <MQTTPublish+0x174>
                rc = FAILURE;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018e2:	e00a      	b.n	80018fa <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018ea:	e006      	b.n	80018fa <MQTTPublish+0x174>
		    goto exit;
 80018ec:	bf00      	nop
 80018ee:	e004      	b.n	80018fa <MQTTPublish+0x174>
        goto exit;
 80018f0:	bf00      	nop
 80018f2:	e002      	b.n	80018fa <MQTTPublish+0x174>
        goto exit; // there was a problem
 80018f4:	bf00      	nop
 80018f6:	e000      	b.n	80018fa <MQTTPublish+0x174>
    }

exit:
 80018f8:	bf00      	nop
    if (rc == FAILURE)
 80018fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d102      	bne.n	8001908 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f7ff fd65 	bl	80013d2 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8001908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800190a:	4618      	mov	r0, r3
 800190c:	373c      	adds	r7, #60	@ 0x3c
 800190e:	46bd      	mov	sp, r7
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001914 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	MilliTimer++;
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <MilliTimer_Handler+0x18>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	4a03      	ldr	r2, [pc, #12]	@ (800192c <MilliTimer_Handler+0x18>)
 8001920:	6013      	str	r3, [r2, #0]
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	200004b0 	.word	0x200004b0

08001930 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <TimerIsExpired+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	0fdb      	lsrs	r3, r3, #31
 8001964:	b2db      	uxtb	r3, r3
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200004b0 	.word	0x200004b0

08001978 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <TimerCountdownMS+0x24>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	441a      	add	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	605a      	str	r2, [r3, #4]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200004b0 	.word	0x200004b0

080019a0 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019b0:	fb03 f202 	mul.w	r2, r3, r2
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <TimerCountdown+0x2c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	441a      	add	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	200004b0 	.word	0x200004b0

080019d0 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <TimerLeftMS+0x28>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200004b0 	.word	0x200004b0

080019fc <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <NewNetwork+0x30>)
 8001a10:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a06      	ldr	r2, [pc, #24]	@ (8001a30 <NewNetwork+0x34>)
 8001a16:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <NewNetwork+0x38>)
 8001a1c:	60da      	str	r2, [r3, #12]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	08001a39 	.word	0x08001a39
 8001a30:	08001a93 	.word	0x08001a93
 8001a34:	08001adb 	.word	0x08001adb

08001a38 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fe11 	bl	800267c <WIZCHIP_READ>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b17      	cmp	r3, #23
 8001a5e:	d113      	bne.n	8001a88 <w5x00_read+0x50>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 ffab 	bl	80029c2 <getSn_RX_RSR>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 fc68 	bl	8003354 <recv>
 8001a84:	4603      	mov	r3, r0
 8001a86:	e000      	b.n	8001a8a <w5x00_read+0x52>

	return SOCK_ERROR;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fde4 	bl	800267c <WIZCHIP_READ>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b17      	cmp	r3, #23
 8001ab8:	d10a      	bne.n	8001ad0 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fb4c 	bl	8003164 <send>
 8001acc:	4603      	mov	r3, r0
 8001ace:	e000      	b.n	8001ad2 <w5x00_write+0x40>

	return SOCK_ERROR;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f001 fac5 	bl	8003078 <disconnect>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8001b04:	f243 0339 	movw	r3, #12345	@ 0x3039
 8001b08:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b2d8      	uxtb	r0, r3
 8001b10:	8afa      	ldrh	r2, [r7, #22]
 8001b12:	2300      	movs	r3, #0
 8001b14:	2101      	movs	r1, #1
 8001b16:	f001 f851 	bl	8002bbc <socket>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e00d      	b.n	8001b46 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	88fa      	ldrh	r2, [r7, #6]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 f9c3 	bl	8002ec0 <connect>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d001      	beq.n	8001b44 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <ConnectNetwork+0x50>

	return SOCK_OK;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8001b4e:	b590      	push	{r4, r7, lr}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	int len = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7a1b      	ldrb	r3, [r3, #8]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d102      	bne.n	8001b68 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8001b62:	230c      	movs	r3, #12
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e005      	b.n	8001b74 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7a1b      	ldrb	r3, [r3, #8]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d101      	bne.n	8001b74 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8001b70:	230a      	movs	r3, #10
 8001b72:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	330c      	adds	r3, #12
 8001b78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b7c:	f000 fc43 	bl	8002406 <MQTTstrlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	3302      	adds	r3, #2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7edb      	ldrb	r3, [r3, #27]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d013      	beq.n	8001bba <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3324      	adds	r3, #36	@ 0x24
 8001b96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b9a:	f000 fc34 	bl	8002406 <MQTTstrlen>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	1c9c      	adds	r4, r3, #2
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3330      	adds	r3, #48	@ 0x30
 8001ba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001baa:	f000 fc2c 	bl	8002406 <MQTTstrlen>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4423      	add	r3, r4
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d103      	bne.n	8001bca <MQTTSerialize_connectLength+0x7c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3340      	adds	r3, #64	@ 0x40
 8001bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bd2:	f000 fc18 	bl	8002406 <MQTTstrlen>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	3302      	adds	r3, #2
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d103      	bne.n	8001bf0 <MQTTSerialize_connectLength+0xa2>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00a      	beq.n	8001c06 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	334c      	adds	r3, #76	@ 0x4c
 8001bf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bf8:	f000 fc05 	bl	8002406 <MQTTstrlen>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	3302      	adds	r3, #2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff8b 	bl	8001b4e <MQTTSerialize_connectLength>
 8001c38:	6238      	str	r0, [r7, #32]
 8001c3a:	6a38      	ldr	r0, [r7, #32]
 8001c3c:	f000 fa98 	bl	8002170 <MQTTPacket_len>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	4293      	cmp	r3, r2
 8001c46:	da03      	bge.n	8001c50 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001c48:	f06f 0301 	mvn.w	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8001c4e:	e0c2      	b.n	8001dd6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8001c54:	7e3b      	ldrb	r3, [r7, #24]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f362 1307 	bfi	r3, r2, #4, #4
 8001c5c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8001c5e:	7e3a      	ldrb	r2, [r7, #24]
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fb11 	bl	800228e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	6a39      	ldr	r1, [r7, #32]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fa12 	bl	800209a <MQTTPacket_encode>
 8001c76:	4602      	mov	r2, r0
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	7a1b      	ldrb	r3, [r3, #8]
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d10c      	bne.n	8001ca0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4955      	ldr	r1, [pc, #340]	@ (8001de0 <MQTTSerialize_connect+0x1d0>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fb3c 	bl	800230a <writeCString>
		writeChar(&ptr, (char) 4);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	2104      	movs	r1, #4
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 faf8 	bl	800228e <writeChar>
 8001c9e:	e00b      	b.n	8001cb8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	494f      	ldr	r1, [pc, #316]	@ (8001de4 <MQTTSerialize_connect+0x1d4>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fb2f 	bl	800230a <writeCString>
		writeChar(&ptr, (char) 3);
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	2103      	movs	r1, #3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 faeb 	bl	800228e <writeChar>
	}

	flags.all = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7e9b      	ldrb	r3, [r3, #26]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	7d3b      	ldrb	r3, [r7, #20]
 8001cc8:	f362 0341 	bfi	r3, r2, #1, #1
 8001ccc:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7edb      	ldrb	r3, [r3, #27]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf14      	ite	ne
 8001cd6:	2301      	movne	r3, #1
 8001cd8:	2300      	moveq	r3, #0
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	7d3b      	ldrb	r3, [r7, #20]
 8001cde:	f362 0382 	bfi	r3, r2, #2, #1
 8001ce2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8001ce4:	7d3b      	ldrb	r3, [r7, #20]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	7d3b      	ldrb	r3, [r7, #20]
 8001cfe:	f362 03c4 	bfi	r3, r2, #3, #2
 8001d02:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	7d3b      	ldrb	r3, [r7, #20]
 8001d12:	f362 1345 	bfi	r3, r2, #5, #1
 8001d16:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d103      	bne.n	8001d28 <MQTTSerialize_connect+0x118>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8001d28:	7d3b      	ldrb	r3, [r7, #20]
 8001d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d2e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d103      	bne.n	8001d40 <MQTTSerialize_connect+0x130>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8001d40:	7d3b      	ldrb	r3, [r7, #20]
 8001d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d46:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8001d48:	7d3a      	ldrb	r2, [r7, #20]
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fa9c 	bl	800228e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	8b1b      	ldrh	r3, [r3, #24]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 faa8 	bl	80022b8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f107 001c 	add.w	r0, r7, #28
 8001d6e:	330c      	adds	r3, #12
 8001d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d72:	f000 fae9 	bl	8002348 <writeMQTTString>
	if (options->willFlag)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7edb      	ldrb	r3, [r3, #27]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00d      	beq.n	8001d9a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f107 001c 	add.w	r0, r7, #28
 8001d84:	3324      	adds	r3, #36	@ 0x24
 8001d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d88:	f000 fade 	bl	8002348 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f107 001c 	add.w	r0, r7, #28
 8001d92:	3330      	adds	r3, #48	@ 0x30
 8001d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d96:	f000 fad7 	bl	8002348 <writeMQTTString>
	}
	if (flags.bits.username)
 8001d9a:	7d3b      	ldrb	r3, [r7, #20]
 8001d9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f107 001c 	add.w	r0, r7, #28
 8001dac:	3340      	adds	r3, #64	@ 0x40
 8001dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db0:	f000 faca 	bl	8002348 <writeMQTTString>
	if (flags.bits.password)
 8001db4:	7d3b      	ldrb	r3, [r7, #20]
 8001db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f107 001c 	add.w	r0, r7, #28
 8001dc6:	334c      	adds	r3, #76	@ 0x4c
 8001dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dca:	f000 fabd 	bl	8002348 <writeMQTTString>

	rc = ptr - buf;
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3728      	adds	r7, #40	@ 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	08007aa4 	.word	0x08007aa4
 8001de4:	08007aac 	.word	0x08007aac

08001de8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001e0a:	f107 0318 	add.w	r3, r7, #24
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fa29 	bl	8002266 <readChar>
 8001e14:	4603      	mov	r3, r0
 8001e16:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8001e18:	7f3b      	ldrb	r3, [r7, #28]
 8001e1a:	f023 030f 	bic.w	r3, r3, #15
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d12e      	bne.n	8001e82 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f107 0214 	add.w	r2, r7, #20
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 f9e9 	bl	8002204 <MQTTPacket_decodeBuf>
 8001e32:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4413      	add	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4413      	add	r3, r2
 8001e42:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6a3a      	ldr	r2, [r7, #32]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	dd1b      	ble.n	8001e86 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8001e4e:	f107 0318 	add.w	r3, r7, #24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fa07 	bl	8002266 <readChar>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8001e5c:	7c3b      	ldrb	r3, [r7, #16]
 8001e5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8001e6a:	f107 0318 	add.w	r3, r7, #24
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f9f9 	bl	8002266 <readChar>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e80:	e002      	b.n	8001e88 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001e82:	bf00      	nop
 8001e84:	e000      	b.n	8001e88 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001e86:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b088      	sub	sp, #32
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	dc03      	bgt.n	8001ebc <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001eb4:	f06f 0301 	mvn.w	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001eba:	e01d      	b.n	8001ef8 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	7e3b      	ldrb	r3, [r7, #24]
 8001eca:	f362 1307 	bfi	r3, r2, #4, #4
 8001ece:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8001ed0:	7e3a      	ldrb	r2, [r7, #24]
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f9d8 	bl	800228e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f8d9 	bl	800209a <MQTTPacket_encode>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	4413      	add	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8001f0c:	220c      	movs	r2, #12
 8001f0e:	6839      	ldr	r1, [r7, #0]
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ffbe 	bl	8001e92 <MQTTSerialize_zero>
 8001f16:	4603      	mov	r3, r0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	@ 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f34:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f98d 	bl	8002266 <readChar>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8001f50:	7f3b      	ldrb	r3, [r7, #28]
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b30      	cmp	r3, #48	@ 0x30
 8001f5a:	d14b      	bne.n	8001ff4 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8001f5c:	7f3b      	ldrb	r3, [r7, #28]
 8001f5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8001f6a:	7f3b      	ldrb	r3, [r7, #28]
 8001f6c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8001f78:	7f3b      	ldrb	r3, [r7, #28]
 8001f7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f107 0214 	add.w	r2, r7, #20
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f938 	bl	8002204 <MQTTPacket_decodeBuf>
 8001f94:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8001fa6:	f107 0318 	add.w	r3, r7, #24
 8001faa:	6a3a      	ldr	r2, [r7, #32]
 8001fac:	4619      	mov	r1, r3
 8001fae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fb0:	f000 f9f8 	bl	80023a4 <readMQTTLenString>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d01e      	beq.n	8001ff8 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	6a3a      	ldr	r2, [r7, #32]
 8001fbe:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db19      	blt.n	8001ff8 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	dd08      	ble.n	8001fde <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f92d 	bl	8002230 <readInt>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	1ad2      	subs	r2, r2, r3
 8001fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fe6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fec:	601a      	str	r2, [r3, #0]
	rc = 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff2:	e002      	b.n	8001ffa <MQTTDeserialize_publish+0xda>
		goto exit;
 8001ff4:	bf00      	nop
 8001ff6:	e000      	b.n	8001ffa <MQTTDeserialize_publish+0xda>
		goto exit;
 8001ff8:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3728      	adds	r7, #40	@ 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	@ 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f91d 	bl	8002266 <readChar>
 800202c:	4603      	mov	r3, r0
 800202e:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8002030:	7f3b      	ldrb	r3, [r7, #28]
 8002032:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800203e:	7f3b      	ldrb	r3, [r7, #28]
 8002040:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002044:	b2db      	uxtb	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f107 0214 	add.w	r2, r7, #20
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f000 f8d5 	bl	8002204 <MQTTPacket_decodeBuf>
 800205a:	6278      	str	r0, [r7, #36]	@ 0x24
 800205c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4413      	add	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4413      	add	r3, r2
 800206a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6a3a      	ldr	r2, [r7, #32]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	dd0b      	ble.n	800208e <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8002076:	f107 0318 	add.w	r3, r7, #24
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f8d8 	bl	8002230 <readInt>
 8002080:	4603      	mov	r3, r0
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
 800208c:	e000      	b.n	8002090 <MQTTDeserialize_ack+0x8c>
		goto exit;
 800208e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002092:	4618      	mov	r0, r3
 8002094:	3728      	adds	r7, #40	@ 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	425a      	negs	r2, r3
 80020ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020b4:	bf58      	it	pl
 80020b6:	4253      	negpl	r3, r2
 80020b8:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da00      	bge.n	80020c2 <MQTTPacket_encode+0x28>
 80020c0:	337f      	adds	r3, #127	@ 0x7f
 80020c2:	11db      	asrs	r3, r3, #7
 80020c4:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	dd03      	ble.n	80020d4 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020d2:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60fa      	str	r2, [r7, #12]
 80020da:	461a      	mov	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	7afa      	ldrb	r2, [r7, #11]
 80020e2:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	dcde      	bgt.n	80020a8 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
	int len = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
 8002114:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3301      	adds	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b04      	cmp	r3, #4
 8002120:	dd03      	ble.n	800212a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	60fb      	str	r3, [r7, #12]
			goto exit;
 8002128:	e01d      	b.n	8002166 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800212a:	f107 020b 	add.w	r2, r7, #11
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2101      	movs	r1, #1
 8002132:	4610      	mov	r0, r2
 8002134:	4798      	blx	r3
 8002136:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d112      	bne.n	8002164 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	7afb      	ldrb	r3, [r7, #11]
 8002144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002148:	6979      	ldr	r1, [r7, #20]
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	441a      	add	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	01db      	lsls	r3, r3, #7
 8002158:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	b25b      	sxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	dbd6      	blt.n	8002110 <MQTTPacket_decode+0x18>
exit:
 8002162:	e000      	b.n	8002166 <MQTTPacket_decode+0x6e>
			goto exit;
 8002164:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8002166:	693b      	ldr	r3, [r7, #16]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3301      	adds	r3, #1
 800217c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b7f      	cmp	r3, #127	@ 0x7f
 8002182:	dc03      	bgt.n	800218c <MQTTPacket_len+0x1c>
		rem_len += 1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3301      	adds	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	e012      	b.n	80021b2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002192:	da03      	bge.n	800219c <MQTTPacket_len+0x2c>
		rem_len += 2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3302      	adds	r3, #2
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	e00a      	b.n	80021b2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <MQTTPacket_len+0x50>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	dc03      	bgt.n	80021ac <MQTTPacket_len+0x3c>
		rem_len += 3;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3303      	adds	r3, #3
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	e002      	b.n	80021b2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	607b      	str	r3, [r7, #4]
	return rem_len;
 80021b2:	687b      	ldr	r3, [r7, #4]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	001ffffe 	.word	0x001ffffe

080021c4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	e00a      	b.n	80021ea <bufchar+0x26>
		*c = *bufptr++;
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <bufchar+0x3c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	4909      	ldr	r1, [pc, #36]	@ (8002200 <bufchar+0x3c>)
 80021dc:	600a      	str	r2, [r1, #0]
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	dbf0      	blt.n	80021d4 <bufchar+0x10>
	return count;
 80021f2:	683b      	ldr	r3, [r7, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	200004b4 	.word	0x200004b4

08002204 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800220e:	4a06      	ldr	r2, [pc, #24]	@ (8002228 <MQTTPacket_decodeBuf+0x24>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	4805      	ldr	r0, [pc, #20]	@ (800222c <MQTTPacket_decodeBuf+0x28>)
 8002218:	f7ff ff6e 	bl	80020f8 <MQTTPacket_decode>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200004b4 	.word	0x200004b4
 800222c:	080021c5 	.word	0x080021c5

08002230 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	3201      	adds	r2, #1
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	4413      	add	r3, r2
 800224c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1c9a      	adds	r2, r3, #2
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	601a      	str	r2, [r3, #0]
	return len;
 8002258:	68bb      	ldr	r3, [r7, #8]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	601a      	str	r2, [r3, #0]
	return c;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	da00      	bge.n	80022ca <writeInt+0x12>
 80022c8:	33ff      	adds	r3, #255	@ 0xff
 80022ca:	121b      	asrs	r3, r3, #8
 80022cc:	461a      	mov	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	425a      	negs	r2, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	bf58      	it	pl
 80022ea:	4253      	negpl	r3, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8002314:	6838      	ldr	r0, [r7, #0]
 8002316:	f7fd ff83 	bl	8000220 <strlen>
 800231a:	4603      	mov	r3, r0
 800231c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800231e:	68f9      	ldr	r1, [r7, #12]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ffc9 	bl	80022b8 <writeInt>
	memcpy(*pptr, string, len);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f004 fd57 	bl	8006de2 <memcpy>
	*pptr += len;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	441a      	add	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	601a      	str	r2, [r3, #0]
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	4638      	mov	r0, r7
 8002352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	dd12      	ble.n	8002382 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4619      	mov	r1, r3
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff ffa9 	bl	80022b8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f004 fd37 	bl	8006de2 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	441a      	add	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8002380:	e00c      	b.n	800239c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4619      	mov	r1, r3
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff ffbc 	bl	800230a <writeCString>
}
 8002392:	e003      	b.n	800239c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8002394:	2100      	movs	r1, #0
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7ff ff8e 	bl	80022b8 <writeInt>
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	dd1a      	ble.n	80023f6 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80023c0:	68b8      	ldr	r0, [r7, #8]
 80023c2:	f7ff ff35 	bl	8002230 <readInt>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	6852      	ldr	r2, [r2, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d30c      	bcc.n	80023f6 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	6852      	ldr	r2, [r2, #4]
 80023ec:	441a      	add	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	601a      	str	r2, [r3, #0]
			rc = 1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 80023fc:	697b      	ldr	r3, [r7, #20]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fd fefe 	bl	8000220 <strlen>
 8002424:	4603      	mov	r3, r0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	e001      	b.n	800242e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	617b      	str	r3, [r7, #20]
	return rc;
 800242e:	697b      	ldr	r3, [r7, #20]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
		blen = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fd fedf 	bl	8000220 <strlen>
 8002462:	4603      	mov	r3, r0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e005      	b.n	8002474 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8002474:	6838      	ldr	r0, [r7, #0]
 8002476:	f7fd fed3 	bl	8000220 <strlen>
 800247a:	4603      	mov	r3, r0
 800247c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	429a      	cmp	r2, r3
 8002484:	d10a      	bne.n	800249c <MQTTPacket_equals+0x64>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	461a      	mov	r2, r3
 800248a:	6839      	ldr	r1, [r7, #0]
 800248c:	6938      	ldr	r0, [r7, #16]
 800248e:	f004 fc23 	bl	8006cd8 <strncmp>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <MQTTPacket_equals+0x64>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <MQTTPacket_equals+0x66>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	4638      	mov	r0, r7
 80024b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80024b8:	463b      	mov	r3, r7
 80024ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024be:	f7ff ffa2 	bl	8002406 <MQTTstrlen>
 80024c2:	4603      	mov	r3, r0
 80024c4:	1c9a      	adds	r2, r3, #2
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	4413      	add	r3, r2
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4413      	add	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	dd02      	ble.n	80024dc <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3302      	adds	r3, #2
 80024da:	617b      	str	r3, [r7, #20]
	return len;
 80024dc:	697b      	ldr	r3, [r7, #20]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b08a      	sub	sp, #40	@ 0x28
 80024ea:	af02      	add	r7, sp, #8
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8002506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800250e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002510:	6838      	ldr	r0, [r7, #0]
 8002512:	f7ff ffc8 	bl	80024a6 <MQTTSerialize_publishLength>
 8002516:	61b8      	str	r0, [r7, #24]
 8002518:	69b8      	ldr	r0, [r7, #24]
 800251a:	f7ff fe29 	bl	8002170 <MQTTPacket_len>
 800251e:	4602      	mov	r2, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4293      	cmp	r3, r2
 8002524:	da03      	bge.n	800252e <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8002526:	f06f 0301 	mvn.w	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800252c:	e04c      	b.n	80025c8 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800252e:	7c3b      	ldrb	r3, [r7, #16]
 8002530:	2203      	movs	r2, #3
 8002532:	f362 1307 	bfi	r3, r2, #4, #4
 8002536:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	b2da      	uxtb	r2, r3
 8002540:	7c3b      	ldrb	r3, [r7, #16]
 8002542:	f362 03c3 	bfi	r3, r2, #3, #1
 8002546:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	b2da      	uxtb	r2, r3
 8002550:	7c3b      	ldrb	r3, [r7, #16]
 8002552:	f362 0342 	bfi	r3, r2, #1, #2
 8002556:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8002558:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	7c3b      	ldrb	r3, [r7, #16]
 8002564:	f362 0300 	bfi	r3, r2, #0, #1
 8002568:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800256a:	7c3a      	ldrb	r2, [r7, #16]
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fe8b 	bl	800228e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fd8c 	bl	800209a <MQTTPacket_encode>
 8002582:	4602      	mov	r2, r0
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	4413      	add	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800258a:	f107 0014 	add.w	r0, r7, #20
 800258e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002594:	f7ff fed8 	bl	8002348 <writeMQTTString>

	if (qos > 0)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	dd06      	ble.n	80025ac <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800259e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fe86 	bl	80022b8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 fc15 	bl	8006de2 <memcpy>
	ptr += payloadlen;
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025bc:	4413      	add	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80025c8:	69fb      	ldr	r3, [r7, #28]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b088      	sub	sp, #32
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	4611      	mov	r1, r2
 80025de:	461a      	mov	r2, r3
 80025e0:	460b      	mov	r3, r1
 80025e2:	71fb      	strb	r3, [r7, #7]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	dc03      	bgt.n	8002602 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80025fa:	f06f 0301 	mvn.w	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
		goto exit;
 8002600:	e037      	b.n	8002672 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	b2da      	uxtb	r2, r3
 800260a:	7e3b      	ldrb	r3, [r7, #24]
 800260c:	f362 1307 	bfi	r3, r2, #4, #4
 8002610:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	7e3b      	ldrb	r3, [r7, #24]
 800261c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002620:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b06      	cmp	r3, #6
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	b2da      	uxtb	r2, r3
 8002634:	7e3b      	ldrb	r3, [r7, #24]
 8002636:	f362 0342 	bfi	r3, r2, #1, #2
 800263a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800263c:	7e3a      	ldrb	r2, [r7, #24]
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fe22 	bl	800228e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2102      	movs	r1, #2
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fd23 	bl	800209a <MQTTPacket_encode>
 8002654:	4602      	mov	r2, r0
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	4413      	add	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800265c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fe27 	bl	80022b8 <writeInt>
	rc = ptr - buf;
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8002672:	69fb      	ldr	r3, [r7, #28]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002684:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <WIZCHIP_READ+0x94>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4798      	blx	r3
   WIZCHIP.CS._select();
 800268a:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <WIZCHIP_READ+0x94>)
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002690:	4b1f      	ldr	r3, [pc, #124]	@ (8002710 <WIZCHIP_READ+0x94>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <WIZCHIP_READ+0x24>
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <WIZCHIP_READ+0x94>)
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d114      	bne.n	80026ca <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <WIZCHIP_READ+0x94>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	0c12      	lsrs	r2, r2, #16
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	4610      	mov	r0, r2
 80026ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80026ae:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <WIZCHIP_READ+0x94>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	0a12      	lsrs	r2, r2, #8
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4610      	mov	r0, r2
 80026ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <WIZCHIP_READ+0x94>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	4610      	mov	r0, r2
 80026c6:	4798      	blx	r3
 80026c8:	e011      	b.n	80026ee <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <WIZCHIP_READ+0x94>)
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	f107 020c 	add.w	r2, r7, #12
 80026e8:	2103      	movs	r1, #3
 80026ea:	4610      	mov	r0, r2
 80026ec:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <WIZCHIP_READ+0x94>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4798      	blx	r3
 80026f4:	4603      	mov	r3, r0
 80026f6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <WIZCHIP_READ+0x94>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80026fe:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <WIZCHIP_READ+0x94>)
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	4798      	blx	r3
   return ret;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000090 	.word	0x20000090

08002714 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002720:	4b22      	ldr	r3, [pc, #136]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002726:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002734:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	d119      	bne.n	8002770 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	0c12      	lsrs	r2, r2, #16
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	4610      	mov	r0, r2
 8002748:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800274a:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	0a12      	lsrs	r2, r2, #8
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4610      	mov	r0, r2
 8002756:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002758:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4610      	mov	r0, r2
 8002762:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	4610      	mov	r0, r2
 800276c:	4798      	blx	r3
 800276e:	e013      	b.n	8002798 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0c1b      	lsrs	r3, r3, #16
 8002774:	b2db      	uxtb	r3, r3
 8002776:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b2db      	uxtb	r3, r3
 800277e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800278a:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	f107 020c 	add.w	r2, r7, #12
 8002792:	2104      	movs	r1, #4
 8002794:	4610      	mov	r0, r2
 8002796:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800279e:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <WIZCHIP_WRITE+0x98>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	4798      	blx	r3
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000090 	.word	0x20000090

080027b0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80027be:	4b2b      	ldr	r3, [pc, #172]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80027c4:	4b29      	ldr	r3, [pc, #164]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80027ca:	4b28      	ldr	r3, [pc, #160]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <WIZCHIP_READ_BUF+0x2a>
 80027d2:	4b26      	ldr	r3, [pc, #152]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d126      	bne.n	8002828 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80027da:	4b24      	ldr	r3, [pc, #144]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	0c12      	lsrs	r2, r2, #16
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	4610      	mov	r0, r2
 80027e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80027e8:	4b20      	ldr	r3, [pc, #128]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	0a12      	lsrs	r2, r2, #8
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	4610      	mov	r0, r2
 80027f4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80027f6:	4b1d      	ldr	r3, [pc, #116]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	4610      	mov	r0, r2
 8002800:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002802:	2300      	movs	r3, #0
 8002804:	82fb      	strh	r3, [r7, #22]
 8002806:	e00a      	b.n	800281e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002808:	4b18      	ldr	r3, [pc, #96]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	8afa      	ldrh	r2, [r7, #22]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	188c      	adds	r4, r1, r2
 8002812:	4798      	blx	r3
 8002814:	4603      	mov	r3, r0
 8002816:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002818:	8afb      	ldrh	r3, [r7, #22]
 800281a:	3301      	adds	r3, #1
 800281c:	82fb      	strh	r3, [r7, #22]
 800281e:	8afa      	ldrh	r2, [r7, #22]
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	429a      	cmp	r2, r3
 8002824:	d3f0      	bcc.n	8002808 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002826:	e017      	b.n	8002858 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	b2db      	uxtb	r3, r3
 800282e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	b2db      	uxtb	r3, r3
 8002836:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800283e:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 8002840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002842:	f107 0210 	add.w	r2, r7, #16
 8002846:	2103      	movs	r1, #3
 8002848:	4610      	mov	r0, r2
 800284a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800284c:	4b07      	ldr	r3, [pc, #28]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	4611      	mov	r1, r2
 8002854:	68b8      	ldr	r0, [r7, #8]
 8002856:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800285e:	4b03      	ldr	r3, [pc, #12]	@ (800286c <WIZCHIP_READ_BUF+0xbc>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	4798      	blx	r3
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	20000090 	.word	0x20000090

08002870 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800287e:	4b2b      	ldr	r3, [pc, #172]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002884:	4b29      	ldr	r3, [pc, #164]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002892:	4b26      	ldr	r3, [pc, #152]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	2b00      	cmp	r3, #0
 8002898:	d126      	bne.n	80028e8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800289a:	4b24      	ldr	r3, [pc, #144]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	0c12      	lsrs	r2, r2, #16
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	4610      	mov	r0, r2
 80028a6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80028a8:	4b20      	ldr	r3, [pc, #128]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	0a12      	lsrs	r2, r2, #8
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4610      	mov	r0, r2
 80028b4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80028b6:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	4610      	mov	r0, r2
 80028c0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	82fb      	strh	r3, [r7, #22]
 80028c6:	e00a      	b.n	80028de <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	8afa      	ldrh	r2, [r7, #22]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	440a      	add	r2, r1
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	4610      	mov	r0, r2
 80028d6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028d8:	8afb      	ldrh	r3, [r7, #22]
 80028da:	3301      	adds	r3, #1
 80028dc:	82fb      	strh	r3, [r7, #22]
 80028de:	8afa      	ldrh	r2, [r7, #22]
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d3f0      	bcc.n	80028c8 <WIZCHIP_WRITE_BUF+0x58>
 80028e6:	e017      	b.n	8002918 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	0c1b      	lsrs	r3, r3, #16
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80028fe:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	f107 0210 	add.w	r2, r7, #16
 8002906:	2103      	movs	r1, #3
 8002908:	4610      	mov	r0, r2
 800290a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	4611      	mov	r1, r2
 8002914:	68b8      	ldr	r0, [r7, #8]
 8002916:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800291e:	4b03      	ldr	r3, [pc, #12]	@ (800292c <WIZCHIP_WRITE_BUF+0xbc>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	4798      	blx	r3
}
 8002924:	bf00      	nop
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000090 	.word	0x20000090

08002930 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800293a:	2300      	movs	r3, #0
 800293c:	81fb      	strh	r3, [r7, #14]
 800293e:	2300      	movs	r3, #0
 8002940:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	3301      	adds	r3, #1
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fe94 	bl	800267c <WIZCHIP_READ>
 8002954:	4603      	mov	r3, r0
 8002956:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002958:	89bb      	ldrh	r3, [r7, #12]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	b29c      	uxth	r4, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	3301      	adds	r3, #1
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fe86 	bl	800267c <WIZCHIP_READ>
 8002970:	4603      	mov	r3, r0
 8002972:	4423      	add	r3, r4
 8002974:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002976:	89bb      	ldrh	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d019      	beq.n	80029b0 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	3301      	adds	r3, #1
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fe77 	bl	800267c <WIZCHIP_READ>
 800298e:	4603      	mov	r3, r0
 8002990:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002992:	89fb      	ldrh	r3, [r7, #14]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	b29c      	uxth	r4, r3
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3301      	adds	r3, #1
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fe69 	bl	800267c <WIZCHIP_READ>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4423      	add	r3, r4
 80029ae:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80029b0:	89fa      	ldrh	r2, [r7, #14]
 80029b2:	89bb      	ldrh	r3, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1c4      	bne.n	8002942 <getSn_TX_FSR+0x12>
   return val;
 80029b8:	89fb      	ldrh	r3, [r7, #14]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}

080029c2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80029c2:	b590      	push	{r4, r7, lr}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	81fb      	strh	r3, [r7, #14]
 80029d0:	2300      	movs	r3, #0
 80029d2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3301      	adds	r3, #1
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fe4b 	bl	800267c <WIZCHIP_READ>
 80029e6:	4603      	mov	r3, r0
 80029e8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80029ea:	89bb      	ldrh	r3, [r7, #12]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	b29c      	uxth	r4, r3
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	3301      	adds	r3, #1
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fe3d 	bl	800267c <WIZCHIP_READ>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4423      	add	r3, r4
 8002a06:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002a08:	89bb      	ldrh	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	3301      	adds	r3, #1
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fe2e 	bl	800267c <WIZCHIP_READ>
 8002a20:	4603      	mov	r3, r0
 8002a22:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a24:	89fb      	ldrh	r3, [r7, #14]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	b29c      	uxth	r4, r3
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	3301      	adds	r3, #1
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fe20 	bl	800267c <WIZCHIP_READ>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4423      	add	r3, r4
 8002a40:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a42:	89fa      	ldrh	r2, [r7, #14]
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d1c4      	bne.n	80029d4 <getSn_RX_RSR+0x12>
   return val;
 8002a4a:	89fb      	ldrh	r3, [r7, #14]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd90      	pop	{r4, r7, pc}

08002a54 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
 8002a60:	4613      	mov	r3, r2
 8002a62:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002a6c:	88bb      	ldrh	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d046      	beq.n	8002b00 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	3301      	adds	r3, #1
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fdfc 	bl	800267c <WIZCHIP_READ>
 8002a84:	4603      	mov	r3, r0
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	b29c      	uxth	r4, r3
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	3301      	adds	r3, #1
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fdf0 	bl	800267c <WIZCHIP_READ>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4423      	add	r3, r4
 8002aa0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	3202      	adds	r2, #2
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002ab2:	88bb      	ldrh	r3, [r7, #4]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	f7ff fed9 	bl	8002870 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002abe:	89fa      	ldrh	r2, [r7, #14]
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	3301      	adds	r3, #1
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7ff fe18 	bl	8002714 <WIZCHIP_WRITE>
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	3301      	adds	r3, #1
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002af0:	461a      	mov	r2, r3
 8002af2:	89fb      	ldrh	r3, [r7, #14]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff fe0b 	bl	8002714 <WIZCHIP_WRITE>
 8002afe:	e000      	b.n	8002b02 <wiz_send_data+0xae>
   if(len == 0)  return;
 8002b00:	bf00      	nop
}
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}

08002b08 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d046      	beq.n	8002bb4 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fda2 	bl	800267c <WIZCHIP_READ>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	b29c      	uxth	r4, r3
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	3301      	adds	r3, #1
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fd96 	bl	800267c <WIZCHIP_READ>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4423      	add	r3, r4
 8002b54:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002b56:	89fb      	ldrh	r3, [r7, #14]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	79fa      	ldrb	r2, [r7, #7]
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	3203      	adds	r2, #3
 8002b60:	00d2      	lsls	r2, r2, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002b66:	88bb      	ldrh	r3, [r7, #4]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	68b8      	ldr	r0, [r7, #8]
 8002b6e:	f7ff fe1f 	bl	80027b0 <WIZCHIP_READ_BUF>
   ptr += len;
 8002b72:	89fa      	ldrh	r2, [r7, #14]
 8002b74:	88bb      	ldrh	r3, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	3301      	adds	r3, #1
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002b86:	461a      	mov	r2, r3
 8002b88:	89fb      	ldrh	r3, [r7, #14]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f7ff fdbe 	bl	8002714 <WIZCHIP_WRITE>
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	89fb      	ldrh	r3, [r7, #14]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f7ff fdb1 	bl	8002714 <WIZCHIP_WRITE>
 8002bb2:	e000      	b.n	8002bb6 <wiz_recv_data+0xae>
   if(len == 0) return;
 8002bb4:	bf00      	nop
}
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	71fb      	strb	r3, [r7, #7]
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71bb      	strb	r3, [r7, #6]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	80bb      	strh	r3, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d902      	bls.n	8002be6 <socket+0x2a>
 8002be0:	f04f 33ff 	mov.w	r3, #4294967295
 8002be4:	e0f0      	b.n	8002dc8 <socket+0x20c>
	switch(protocol)
 8002be6:	79bb      	ldrb	r3, [r7, #6]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d005      	beq.n	8002bf8 <socket+0x3c>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	dd11      	ble.n	8002c14 <socket+0x58>
 8002bf0:	3b02      	subs	r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d80e      	bhi.n	8002c14 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002bf6:	e011      	b.n	8002c1c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002bf8:	f107 030c 	add.w	r3, r7, #12
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002c04:	f7ff fdd4 	bl	80027b0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <socket+0x5e>
 8002c0e:	f06f 0302 	mvn.w	r3, #2
 8002c12:	e0d9      	b.n	8002dc8 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002c14:	f06f 0304 	mvn.w	r3, #4
 8002c18:	e0d6      	b.n	8002dc8 <socket+0x20c>
	    break;
 8002c1a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <socket+0x70>
 8002c26:	f06f 0305 	mvn.w	r3, #5
 8002c2a:	e0cd      	b.n	8002dc8 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d028      	beq.n	8002c84 <socket+0xc8>
	{
   	switch(protocol)
 8002c32:	79bb      	ldrb	r3, [r7, #6]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d002      	beq.n	8002c3e <socket+0x82>
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d008      	beq.n	8002c4e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002c3c:	e022      	b.n	8002c84 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11a      	bne.n	8002c7e <socket+0xc2>
 8002c48:	f06f 0305 	mvn.w	r3, #5
 8002c4c:	e0bc      	b.n	8002dc8 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d006      	beq.n	8002c66 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	db02      	blt.n	8002c66 <socket+0xaa>
 8002c60:	f06f 0305 	mvn.w	r3, #5
 8002c64:	e0b0      	b.n	8002dc8 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db04      	blt.n	8002c82 <socket+0xc6>
 8002c78:	f06f 0305 	mvn.w	r3, #5
 8002c7c:	e0a4      	b.n	8002dc8 <socket+0x20c>
   	      break;
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <socket+0xc8>
   	      break;
 8002c82:	bf00      	nop
   	}
   }
	close(sn);
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f8ac 	bl	8002de4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	3301      	adds	r3, #1
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4618      	mov	r0, r3
 8002c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c9a:	f023 030f 	bic.w	r3, r3, #15
 8002c9e:	b25a      	sxtb	r2, r3
 8002ca0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7ff fd32 	bl	8002714 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002cb0:	88bb      	ldrh	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d110      	bne.n	8002cd8 <socket+0x11c>
	{
	   port = sock_any_port++;
 8002cb6:	4b46      	ldr	r3, [pc, #280]	@ (8002dd0 <socket+0x214>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	b291      	uxth	r1, r2
 8002cbe:	4a44      	ldr	r2, [pc, #272]	@ (8002dd0 <socket+0x214>)
 8002cc0:	8011      	strh	r1, [r2, #0]
 8002cc2:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002cc4:	4b42      	ldr	r3, [pc, #264]	@ (8002dd0 <socket+0x214>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <socket+0x11c>
 8002cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd0 <socket+0x214>)
 8002cd2:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002cd6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3301      	adds	r3, #1
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	88bb      	ldrh	r3, [r7, #4]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f7ff fd0f 	bl	8002714 <WIZCHIP_WRITE>
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d02:	461a      	mov	r2, r3
 8002d04:	88bb      	ldrh	r3, [r7, #4]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f7ff fd02 	bl	8002714 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	3301      	adds	r3, #1
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fcf8 	bl	8002714 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002d24:	bf00      	nop
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fca2 	bl	800267c <WIZCHIP_READ>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f3      	bne.n	8002d26 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	2201      	movs	r2, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <socket+0x218>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b21b      	sxth	r3, r3
 8002d52:	4013      	ands	r3, r2
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd4 <socket+0x218>)
 8002d5a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 0201 	and.w	r2, r3, #1
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <socket+0x218>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b21b      	sxth	r3, r3
 8002d70:	4313      	orrs	r3, r2
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <socket+0x218>)
 8002d78:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	b21a      	sxth	r2, r3
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <socket+0x21c>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	4013      	ands	r3, r2
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <socket+0x21c>)
 8002d96:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	4a10      	ldr	r2, [pc, #64]	@ (8002ddc <socket+0x220>)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	4a0e      	ldr	r2, [pc, #56]	@ (8002de0 <socket+0x224>)
 8002da6:	2100      	movs	r1, #0
 8002da8:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002daa:	bf00      	nop
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	3301      	adds	r3, #1
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fc5f 	bl	800267c <WIZCHIP_READ>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f3      	beq.n	8002dac <socket+0x1f0>
   return (int8_t)sn;
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd90      	pop	{r4, r7, pc}
 8002dd0:	2000008c 	.word	0x2000008c
 8002dd4:	200004b8 	.word	0x200004b8
 8002dd8:	200004ba 	.word	0x200004ba
 8002ddc:	200004bc 	.word	0x200004bc
 8002de0:	200004cc 	.word	0x200004cc

08002de4 <close>:

int8_t close(uint8_t sn)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d902      	bls.n	8002dfa <close+0x16>
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	e055      	b.n	8002ea6 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	3301      	adds	r3, #1
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e06:	2110      	movs	r1, #16
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fc83 	bl	8002714 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002e0e:	bf00      	nop
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	3301      	adds	r3, #1
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fc2d 	bl	800267c <WIZCHIP_READ>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f3      	bne.n	8002e10 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002e34:	211f      	movs	r1, #31
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fc6c 	bl	8002714 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	b21a      	sxth	r2, r3
 8002e4a:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <close+0xcc>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b21b      	sxth	r3, r3
 8002e50:	4013      	ands	r3, r2
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	4b16      	ldr	r3, [pc, #88]	@ (8002eb0 <close+0xcc>)
 8002e58:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <close+0xd0>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	4013      	ands	r3, r2
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <close+0xd0>)
 8002e76:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002eb8 <close+0xd4>)
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <close+0xd8>)
 8002e86:	2100      	movs	r1, #0
 8002e88:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002e8a:	bf00      	nop
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	3301      	adds	r3, #1
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fbef 	bl	800267c <WIZCHIP_READ>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f3      	bne.n	8002e8c <close+0xa8>
	return SOCK_OK;
 8002ea4:	2301      	movs	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200004b8 	.word	0x200004b8
 8002eb4:	200004ba 	.word	0x200004ba
 8002eb8:	200004bc 	.word	0x200004bc
 8002ebc:	200004cc 	.word	0x200004cc

08002ec0 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	71fb      	strb	r3, [r7, #7]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d902      	bls.n	8002edc <connect+0x1c>
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eda:	e0c6      	b.n	800306a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fbc9 	bl	800267c <WIZCHIP_READ>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d002      	beq.n	8002efa <connect+0x3a>
 8002ef4:	f06f 0304 	mvn.w	r3, #4
 8002ef8:	e0b7      	b.n	800306a <connect+0x1aa>
   CHECK_SOCKINIT();
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	3301      	adds	r3, #1
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fbb8 	bl	800267c <WIZCHIP_READ>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b13      	cmp	r3, #19
 8002f10:	d002      	beq.n	8002f18 <connect+0x58>
 8002f12:	f06f 0302 	mvn.w	r3, #2
 8002f16:	e0a8      	b.n	800306a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	3201      	adds	r2, #1
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	3202      	adds	r2, #2
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	3203      	adds	r2, #3
 8002f42:	7812      	ldrb	r2, [r2, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d002      	beq.n	8002f56 <connect+0x96>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <connect+0x9c>
 8002f56:	f06f 030b 	mvn.w	r3, #11
 8002f5a:	e086      	b.n	800306a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002f5c:	88bb      	ldrh	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <connect+0xa8>
 8002f62:	f06f 030a 	mvn.w	r3, #10
 8002f66:	e080      	b.n	800306a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002f74:	2204      	movs	r2, #4
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fc79 	bl	8002870 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	3301      	adds	r3, #1
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	88bb      	ldrh	r3, [r7, #4]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f7ff fbbc 	bl	8002714 <WIZCHIP_WRITE>
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8002fa8:	461a      	mov	r2, r3
 8002faa:	88bb      	ldrh	r3, [r7, #4]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f7ff fbaf 	bl	8002714 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	3301      	adds	r3, #1
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002fc2:	2104      	movs	r1, #4
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fba5 	bl	8002714 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002fca:	bf00      	nop
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fb4f 	bl	800267c <WIZCHIP_READ>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f3      	bne.n	8002fcc <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002fe4:	4b23      	ldr	r3, [pc, #140]	@ (8003074 <connect+0x1b4>)
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	fa42 f303 	asr.w	r3, r2, r3
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02b      	beq.n	8003050 <connect+0x190>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e036      	b.n	800306a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	3301      	adds	r3, #1
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fb37 	bl	800267c <WIZCHIP_READ>
 800300e:	4603      	mov	r3, r0
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	3301      	adds	r3, #1
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003024:	2108      	movs	r1, #8
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fb74 	bl	8002714 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800302c:	f06f 030c 	mvn.w	r3, #12
 8003030:	e01b      	b.n	800306a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	3301      	adds	r3, #1
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fb1c 	bl	800267c <WIZCHIP_READ>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800304a:	f06f 0303 	mvn.w	r3, #3
 800304e:	e00c      	b.n	800306a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	3301      	adds	r3, #1
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fb0d 	bl	800267c <WIZCHIP_READ>
 8003062:	4603      	mov	r3, r0
 8003064:	2b17      	cmp	r3, #23
 8003066:	d1c9      	bne.n	8002ffc <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8003068:	2301      	movs	r3, #1
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200004b8 	.word	0x200004b8

08003078 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d902      	bls.n	800308e <disconnect+0x16>
 8003088:	f04f 33ff 	mov.w	r3, #4294967295
 800308c:	e062      	b.n	8003154 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	3301      	adds	r3, #1
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff faf0 	bl	800267c <WIZCHIP_READ>
 800309c:	4603      	mov	r3, r0
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d002      	beq.n	80030ac <disconnect+0x34>
 80030a6:	f06f 0304 	mvn.w	r3, #4
 80030aa:	e053      	b.n	8003154 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3301      	adds	r3, #1
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80030b8:	2108      	movs	r1, #8
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fb2a 	bl	8002714 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80030c0:	bf00      	nop
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3301      	adds	r3, #1
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fad4 	bl	800267c <WIZCHIP_READ>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f3      	bne.n	80030c2 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2201      	movs	r2, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	b21b      	sxth	r3, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	b21a      	sxth	r2, r3
 80030e8:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <disconnect+0xe4>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	4013      	ands	r3, r2
 80030f0:	b21b      	sxth	r3, r3
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <disconnect+0xe4>)
 80030f6:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80030f8:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <disconnect+0xe8>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	fa42 f303 	asr.w	r3, r2, r3
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d016      	beq.n	800313a <disconnect+0xc2>
 800310c:	2300      	movs	r3, #0
 800310e:	e021      	b.n	8003154 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	3301      	adds	r3, #1
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff faad 	bl	800267c <WIZCHIP_READ>
 8003122:	4603      	mov	r3, r0
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <disconnect+0xc2>
	   {
	      close(sn);
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fe58 	bl	8002de4 <close>
	      return SOCKERR_TIMEOUT;
 8003134:	f06f 030c 	mvn.w	r3, #12
 8003138:	e00c      	b.n	8003154 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	3301      	adds	r3, #1
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fa98 	bl	800267c <WIZCHIP_READ>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1de      	bne.n	8003110 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8003152:	2301      	movs	r3, #1
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	200004ba 	.word	0x200004ba
 8003160:	200004b8 	.word	0x200004b8

08003164 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
 8003170:	4613      	mov	r3, r2
 8003172:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003178:	2300      	movs	r3, #0
 800317a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d902      	bls.n	8003188 <send+0x24>
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	e0dd      	b.n	8003344 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	3301      	adds	r3, #1
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fa73 	bl	800267c <WIZCHIP_READ>
 8003196:	4603      	mov	r3, r0
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <send+0x42>
 80031a0:	f06f 0304 	mvn.w	r3, #4
 80031a4:	e0ce      	b.n	8003344 <send+0x1e0>
   CHECK_SOCKDATA();
 80031a6:	88bb      	ldrh	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <send+0x4e>
 80031ac:	f06f 030d 	mvn.w	r3, #13
 80031b0:	e0c8      	b.n	8003344 <send+0x1e0>
   tmp = getSn_SR(sn);
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	3301      	adds	r3, #1
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fa5c 	bl	800267c <WIZCHIP_READ>
 80031c4:	4603      	mov	r3, r0
 80031c6:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b17      	cmp	r3, #23
 80031cc:	d005      	beq.n	80031da <send+0x76>
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b1c      	cmp	r3, #28
 80031d2:	d002      	beq.n	80031da <send+0x76>
 80031d4:	f06f 0306 	mvn.w	r3, #6
 80031d8:	e0b4      	b.n	8003344 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 80031da:	4b5c      	ldr	r3, [pc, #368]	@ (800334c <send+0x1e8>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	fa42 f303 	asr.w	r3, r2, r3
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d039      	beq.n	8003262 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3301      	adds	r3, #1
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fa3e 	bl	800267c <WIZCHIP_READ>
 8003200:	4603      	mov	r3, r0
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	3301      	adds	r3, #1
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800321e:	2110      	movs	r1, #16
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fa77 	bl	8002714 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	2201      	movs	r2, #1
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	b21b      	sxth	r3, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	b21a      	sxth	r2, r3
 8003234:	4b45      	ldr	r3, [pc, #276]	@ (800334c <send+0x1e8>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b21b      	sxth	r3, r3
 800323a:	4013      	ands	r3, r2
 800323c:	b21b      	sxth	r3, r3
 800323e:	b29a      	uxth	r2, r3
 8003240:	4b42      	ldr	r3, [pc, #264]	@ (800334c <send+0x1e8>)
 8003242:	801a      	strh	r2, [r3, #0]
 8003244:	e00d      	b.n	8003262 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <send+0xfa>
      {
         close(sn);
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fdc6 	bl	8002de4 <close>
         return SOCKERR_TIMEOUT;
 8003258:	f06f 030c 	mvn.w	r3, #12
 800325c:	e072      	b.n	8003344 <send+0x1e0>
      }
      else return SOCK_BUSY;
 800325e:	2300      	movs	r3, #0
 8003260:	e070      	b.n	8003344 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	3301      	adds	r3, #1
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fa04 	bl	800267c <WIZCHIP_READ>
 8003274:	4603      	mov	r3, r0
 8003276:	029b      	lsls	r3, r3, #10
 8003278:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800327a:	88ba      	ldrh	r2, [r7, #4]
 800327c:	89bb      	ldrh	r3, [r7, #12]
 800327e:	429a      	cmp	r2, r3
 8003280:	d901      	bls.n	8003286 <send+0x122>
 8003282:	89bb      	ldrh	r3, [r7, #12]
 8003284:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fb51 	bl	8002930 <getSn_TX_FSR>
 800328e:	4603      	mov	r3, r0
 8003290:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	3301      	adds	r3, #1
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff f9ec 	bl	800267c <WIZCHIP_READ>
 80032a4:	4603      	mov	r3, r0
 80032a6:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b17      	cmp	r3, #23
 80032ac:	d009      	beq.n	80032c2 <send+0x15e>
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b1c      	cmp	r3, #28
 80032b2:	d006      	beq.n	80032c2 <send+0x15e>
      {
         close(sn);
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fd94 	bl	8002de4 <close>
         return SOCKERR_SOCKSTATUS;
 80032bc:	f06f 0306 	mvn.w	r3, #6
 80032c0:	e040      	b.n	8003344 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80032c2:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <send+0x1ec>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	fa42 f303 	asr.w	r3, r2, r3
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <send+0x17e>
 80032d6:	88ba      	ldrh	r2, [r7, #4]
 80032d8:	89bb      	ldrh	r3, [r7, #12]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d901      	bls.n	80032e2 <send+0x17e>
 80032de:	2300      	movs	r3, #0
 80032e0:	e030      	b.n	8003344 <send+0x1e0>
      if(len <= freesize) break;
 80032e2:	88ba      	ldrh	r2, [r7, #4]
 80032e4:	89bb      	ldrh	r3, [r7, #12]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d900      	bls.n	80032ec <send+0x188>
      freesize = getSn_TX_FSR(sn);
 80032ea:	e7cc      	b.n	8003286 <send+0x122>
      if(len <= freesize) break;
 80032ec:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80032ee:	88ba      	ldrh	r2, [r7, #4]
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	6839      	ldr	r1, [r7, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fbad 	bl	8002a54 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	3301      	adds	r3, #1
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003306:	2120      	movs	r1, #32
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fa03 	bl	8002714 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800330e:	bf00      	nop
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	3301      	adds	r3, #1
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f9ad 	bl	800267c <WIZCHIP_READ>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f3      	bne.n	8003310 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	2201      	movs	r2, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	b21a      	sxth	r2, r3
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <send+0x1e8>)
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b21b      	sxth	r3, r3
 8003338:	4313      	orrs	r3, r2
 800333a:	b21b      	sxth	r3, r3
 800333c:	b29a      	uxth	r2, r3
 800333e:	4b03      	ldr	r3, [pc, #12]	@ (800334c <send+0x1e8>)
 8003340:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003342:	88bb      	ldrh	r3, [r7, #4]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	200004ba 	.word	0x200004ba
 8003350:	200004b8 	.word	0x200004b8

08003354 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
 8003360:	4613      	mov	r3, r2
 8003362:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	2b08      	cmp	r3, #8
 8003370:	d902      	bls.n	8003378 <recv+0x24>
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	e09b      	b.n	80034b0 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	3301      	adds	r3, #1
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff f97b 	bl	800267c <WIZCHIP_READ>
 8003386:	4603      	mov	r3, r0
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	2b01      	cmp	r3, #1
 800338e:	d002      	beq.n	8003396 <recv+0x42>
 8003390:	f06f 0304 	mvn.w	r3, #4
 8003394:	e08c      	b.n	80034b0 <recv+0x15c>
   CHECK_SOCKDATA();
 8003396:	88bb      	ldrh	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <recv+0x4e>
 800339c:	f06f 030d 	mvn.w	r3, #13
 80033a0:	e086      	b.n	80034b0 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	3301      	adds	r3, #1
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f964 	bl	800267c <WIZCHIP_READ>
 80033b4:	4603      	mov	r3, r0
 80033b6:	029b      	lsls	r3, r3, #10
 80033b8:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80033ba:	89ba      	ldrh	r2, [r7, #12]
 80033bc:	88bb      	ldrh	r3, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d201      	bcs.n	80033c6 <recv+0x72>
 80033c2:	89bb      	ldrh	r3, [r7, #12]
 80033c4:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fafa 	bl	80029c2 <getSn_RX_RSR>
 80033ce:	4603      	mov	r3, r0
 80033d0:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	3301      	adds	r3, #1
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff f94c 	bl	800267c <WIZCHIP_READ>
 80033e4:	4603      	mov	r3, r0
 80033e6:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2b17      	cmp	r3, #23
 80033ec:	d026      	beq.n	800343c <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b1c      	cmp	r3, #28
 80033f2:	d11c      	bne.n	800342e <recv+0xda>
            {
               if(recvsize != 0) break;
 80033f4:	89bb      	ldrh	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d133      	bne.n	8003462 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fa97 	bl	8002930 <getSn_TX_FSR>
 8003402:	4603      	mov	r3, r0
 8003404:	461c      	mov	r4, r3
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3301      	adds	r3, #1
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff f932 	bl	800267c <WIZCHIP_READ>
 8003418:	4603      	mov	r3, r0
 800341a:	029b      	lsls	r3, r3, #10
 800341c:	429c      	cmp	r4, r3
 800341e:	d10d      	bne.n	800343c <recv+0xe8>
               {
                  close(sn);
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fcde 	bl	8002de4 <close>
                  return SOCKERR_SOCKSTATUS;
 8003428:	f06f 0306 	mvn.w	r3, #6
 800342c:	e040      	b.n	80034b0 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fcd7 	bl	8002de4 <close>
               return SOCKERR_SOCKSTATUS;
 8003436:	f06f 0306 	mvn.w	r3, #6
 800343a:	e039      	b.n	80034b0 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800343c:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <recv+0x164>)
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	fa42 f303 	asr.w	r3, r2, r3
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <recv+0x106>
 8003450:	89bb      	ldrh	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <recv+0x106>
 8003456:	2300      	movs	r3, #0
 8003458:	e02a      	b.n	80034b0 <recv+0x15c>
         if(recvsize != 0) break;
 800345a:	89bb      	ldrh	r3, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8003460:	e7b1      	b.n	80033c6 <recv+0x72>
               if(recvsize != 0) break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <recv+0x114>
         if(recvsize != 0) break;
 8003466:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003468:	89ba      	ldrh	r2, [r7, #12]
 800346a:	88bb      	ldrh	r3, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	d201      	bcs.n	8003474 <recv+0x120>
 8003470:	89bb      	ldrh	r3, [r7, #12]
 8003472:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003474:	88ba      	ldrh	r2, [r7, #4]
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fb44 	bl	8002b08 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	3301      	adds	r3, #1
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800348c:	2140      	movs	r1, #64	@ 0x40
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f940 	bl	8002714 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003494:	bf00      	nop
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	3301      	adds	r3, #1
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff f8ea 	bl	800267c <WIZCHIP_READ>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f3      	bne.n	8003496 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80034ae:	88bb      	ldrh	r3, [r7, #4]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd90      	pop	{r4, r7, pc}
 80034b8:	200004b8 	.word	0x200004b8

080034bc <SPIReadWrite>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80034c6:	bf00      	nop
 80034c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <SPIReadWrite+0x4c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d1f8      	bne.n	80034c8 <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 80034d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <SPIReadWrite+0x4c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	79fa      	ldrb	r2, [r7, #7]
 80034de:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 80034e0:	bf00      	nop
 80034e2:	4b09      	ldr	r3, [pc, #36]	@ (8003508 <SPIReadWrite+0x4c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d1f8      	bne.n	80034e2 <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 80034f0:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <SPIReadWrite+0x4c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b2db      	uxtb	r3, r3
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	2000013c 	.word	0x2000013c

0800350c <wizchip_select>:

void  wizchip_select(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003510:	2200      	movs	r2, #0
 8003512:	2102      	movs	r1, #2
 8003514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003518:	f001 f9ae 	bl	8004878 <HAL_GPIO_WritePin>
}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}

08003520 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8003524:	2201      	movs	r2, #1
 8003526:	2102      	movs	r1, #2
 8003528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800352c:	f001 f9a4 	bl	8004878 <HAL_GPIO_WritePin>
}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}

08003534 <wizchip_read>:

uint8_t wizchip_read()
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 800353a:	2000      	movs	r0, #0
 800353c:	f7ff ffbe 	bl	80034bc <SPIReadWrite>
 8003540:	4603      	mov	r3, r0
 8003542:	71fb      	strb	r3, [r7, #7]
	return rb;
 8003544:	79fb      	ldrb	r3, [r7, #7]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff ffae 	bl	80034bc <SPIReadWrite>
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8003574:	2300      	movs	r3, #0
 8003576:	81fb      	strh	r3, [r7, #14]
 8003578:	e00c      	b.n	8003594 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 800357a:	2000      	movs	r0, #0
 800357c:	f7ff ff9e 	bl	80034bc <SPIReadWrite>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3301      	adds	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 800358e:	89fb      	ldrh	r3, [r7, #14]
 8003590:	3301      	adds	r3, #1
 8003592:	81fb      	strh	r3, [r7, #14]
 8003594:	89fa      	ldrh	r2, [r7, #14]
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	429a      	cmp	r2, r3
 800359a:	d3ee      	bcc.n	800357a <wizchip_readburst+0x12>
	}
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	81fb      	strh	r3, [r7, #14]
 80035b6:	e00a      	b.n	80035ce <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff7d 	bl	80034bc <SPIReadWrite>
		pBuf++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3301      	adds	r3, #1
 80035c6:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 80035c8:	89fb      	ldrh	r3, [r7, #14]
 80035ca:	3301      	adds	r3, #1
 80035cc:	81fb      	strh	r3, [r7, #14]
 80035ce:	89fa      	ldrh	r2, [r7, #14]
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3f0      	bcc.n	80035b8 <wizchip_writeburst+0x12>
	}
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <W5500IOInit>:

void W5500IOInit()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA10
	 * and
	 * CS->PA11
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <W5500IOInit+0x50>)
 80035f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003630 <W5500IOInit+0x50>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <W5500IOInit+0x50>)
 8003602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800360c:	2303      	movs	r3, #3
 800360e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003610:	2301      	movs	r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003618:	2302      	movs	r3, #2
 800361a:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	4619      	mov	r1, r3
 8003620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003624:	f000 ffa6 	bl	8004574 <HAL_GPIO_Init>
}
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000

08003634 <W5500Init>:

void W5500Init()
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 800363a:	4b21      	ldr	r3, [pc, #132]	@ (80036c0 <W5500Init+0x8c>)
 800363c:	1d3c      	adds	r4, r7, #4
 800363e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 8003644:	f7ff ffcc 	bl	80035e0 <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default
 8003648:	2201      	movs	r2, #1
 800364a:	2102      	movs	r1, #2
 800364c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003650:	f001 f912 	bl	8004878 <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8003654:	2200      	movs	r2, #0
 8003656:	2101      	movs	r1, #1
 8003658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800365c:	f001 f90c 	bl	8004878 <HAL_GPIO_WritePin>
	tmp = 0xFF;
 8003660:	23ff      	movs	r3, #255	@ 0xff
 8003662:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 8003664:	bf00      	nop
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	1e5a      	subs	r2, r3, #1
 800366a:	75fa      	strb	r2, [r7, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1fa      	bne.n	8003666 <W5500Init+0x32>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8003670:	2201      	movs	r2, #1
 8003672:	2101      	movs	r1, #1
 8003674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003678:	f001 f8fe 	bl	8004878 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800367c:	4911      	ldr	r1, [pc, #68]	@ (80036c4 <W5500Init+0x90>)
 800367e:	4812      	ldr	r0, [pc, #72]	@ (80036c8 <W5500Init+0x94>)
 8003680:	f000 f894 	bl	80037ac <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8003684:	4911      	ldr	r1, [pc, #68]	@ (80036cc <W5500Init+0x98>)
 8003686:	4812      	ldr	r0, [pc, #72]	@ (80036d0 <W5500Init+0x9c>)
 8003688:	f000 f8b6 	bl	80037f8 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 800368c:	4911      	ldr	r1, [pc, #68]	@ (80036d4 <W5500Init+0xa0>)
 800368e:	4812      	ldr	r0, [pc, #72]	@ (80036d8 <W5500Init+0xa4>)
 8003690:	f000 f8de 	bl	8003850 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	4619      	mov	r1, r3
 8003698:	2001      	movs	r0, #1
 800369a:	f000 f905 	bl	80038a8 <ctlwizchip>
 800369e:	4603      	mov	r3, r0
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d104      	bne.n	80036b0 <W5500Init+0x7c>
		printf("WIZCHIP Initialized Failed.\r\n");
 80036a6:	480d      	ldr	r0, [pc, #52]	@ (80036dc <W5500Init+0xa8>)
 80036a8:	f003 f972 	bl	8006990 <puts>
		while (1);
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <W5500Init+0x78>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 80036b0:	480b      	ldr	r0, [pc, #44]	@ (80036e0 <W5500Init+0xac>)
 80036b2:	f003 f96d 	bl	8006990 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd90      	pop	{r4, r7, pc}
 80036be:	bf00      	nop
 80036c0:	08007af8 	.word	0x08007af8
 80036c4:	08003521 	.word	0x08003521
 80036c8:	0800350d 	.word	0x0800350d
 80036cc:	0800354f 	.word	0x0800354f
 80036d0:	08003535 	.word	0x08003535
 80036d4:	080035a7 	.word	0x080035a7
 80036d8:	08003569 	.word	0x08003569
 80036dc:	08007ab4 	.word	0x08007ab4
 80036e0:	08007ad4 	.word	0x08007ad4

080036e4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	70fb      	strb	r3, [r7, #3]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
 8003758:	2300      	movs	r3, #0
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	460b      	mov	r3, r1
 8003784:	807b      	strh	r3, [r7, #2]
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	807b      	strh	r3, [r7, #2]
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <reg_wizchip_cs_cbfunc+0x16>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <reg_wizchip_cs_cbfunc+0x40>)
 80037c4:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <reg_wizchip_cs_cbfunc+0x44>)
 80037c6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80037c8:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <reg_wizchip_cs_cbfunc+0x40>)
 80037ca:	4a0a      	ldr	r2, [pc, #40]	@ (80037f4 <reg_wizchip_cs_cbfunc+0x48>)
 80037cc:	619a      	str	r2, [r3, #24]
 80037ce:	e006      	b.n	80037de <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80037d0:	4a06      	ldr	r2, [pc, #24]	@ (80037ec <reg_wizchip_cs_cbfunc+0x40>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80037d6:	4a05      	ldr	r2, [pc, #20]	@ (80037ec <reg_wizchip_cs_cbfunc+0x40>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6193      	str	r3, [r2, #24]
   }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000090 	.word	0x20000090
 80037f0:	08003701 	.word	0x08003701
 80037f4:	0800370f 	.word	0x0800370f

080037f8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003802:	bf00      	nop
 8003804:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <reg_wizchip_spi_cbfunc+0x4c>)
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f9      	beq.n	8003804 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <reg_wizchip_spi_cbfunc+0x24>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800381c:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <reg_wizchip_spi_cbfunc+0x4c>)
 800381e:	4a0a      	ldr	r2, [pc, #40]	@ (8003848 <reg_wizchip_spi_cbfunc+0x50>)
 8003820:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <reg_wizchip_spi_cbfunc+0x4c>)
 8003824:	4a09      	ldr	r2, [pc, #36]	@ (800384c <reg_wizchip_spi_cbfunc+0x54>)
 8003826:	621a      	str	r2, [r3, #32]
 8003828:	e006      	b.n	8003838 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800382a:	4a06      	ldr	r2, [pc, #24]	@ (8003844 <reg_wizchip_spi_cbfunc+0x4c>)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003830:	4a04      	ldr	r2, [pc, #16]	@ (8003844 <reg_wizchip_spi_cbfunc+0x4c>)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6213      	str	r3, [r2, #32]
   }
}
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	20000090 	.word	0x20000090
 8003848:	08003755 	.word	0x08003755
 800384c:	08003765 	.word	0x08003765

08003850 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800385a:	bf00      	nop
 800385c:	4b0f      	ldr	r3, [pc, #60]	@ (800389c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f9      	beq.n	800385c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <reg_wizchip_spiburst_cbfunc+0x24>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003874:	4b09      	ldr	r3, [pc, #36]	@ (800389c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003878:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800387a:	4b08      	ldr	r3, [pc, #32]	@ (800389c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800387c:	4a09      	ldr	r2, [pc, #36]	@ (80038a4 <reg_wizchip_spiburst_cbfunc+0x54>)
 800387e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003880:	e006      	b.n	8003890 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003882:	4a06      	ldr	r2, [pc, #24]	@ (800389c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003888:	4a04      	ldr	r2, [pc, #16]	@ (800389c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	20000090 	.word	0x20000090
 80038a0:	0800377b 	.word	0x0800377b
 80038a4:	08003793 	.word	0x08003793

080038a8 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	2b0f      	cmp	r3, #15
 80038c4:	f200 80c5 	bhi.w	8003a52 <ctlwizchip+0x1aa>
 80038c8:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <ctlwizchip+0x28>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	08003911 	.word	0x08003911
 80038d4:	08003917 	.word	0x08003917
 80038d8:	08003943 	.word	0x08003943
 80038dc:	08003937 	.word	0x08003937
 80038e0:	08003951 	.word	0x08003951
 80038e4:	0800395d 	.word	0x0800395d
 80038e8:	0800396b 	.word	0x0800396b
 80038ec:	08003991 	.word	0x08003991
 80038f0:	080039b3 	.word	0x080039b3
 80038f4:	080039f7 	.word	0x080039f7
 80038f8:	080039fd 	.word	0x080039fd
 80038fc:	08003a05 	.word	0x08003a05
 8003900:	08003a59 	.word	0x08003a59
 8003904:	08003a0d 	.word	0x08003a0d
 8003908:	08003a1b 	.word	0x08003a1b
 800390c:	08003a37 	.word	0x08003a37
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003910:	f000 f8e8 	bl	8003ae4 <wizchip_sw_reset>
         break;
 8003914:	e0a1      	b.n	8003a5a <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3308      	adds	r3, #8
 8003924:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f925 	bl	8003b7c <wizchip_init>
 8003932:	4603      	mov	r3, r0
 8003934:	e092      	b.n	8003a5c <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f9aa 	bl	8003c94 <wizchip_clrinterrupt>
         break;
 8003940:	e08b      	b.n	8003a5a <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003942:	f000 f9db 	bl	8003cfc <wizchip_getinterrupt>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	801a      	strh	r2, [r3, #0]
         break;
 800394e:	e084      	b.n	8003a5a <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f9f6 	bl	8003d46 <wizchip_setinterruptmask>
         break;         
 800395a:	e07e      	b.n	8003a5a <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800395c:	f000 fa0e 	bl	8003d7c <wizchip_getinterruptmask>
 8003960:	4603      	mov	r3, r0
 8003962:	461a      	mov	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	801a      	strh	r2, [r3, #0]
         break;
 8003968:	e077      	b.n	8003a5a <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	b29b      	uxth	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4619      	mov	r1, r3
 8003976:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800397a:	f7fe fecb 	bl	8002714 <WIZCHIP_WRITE>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	4619      	mov	r1, r3
 8003986:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800398a:	f7fe fec3 	bl	8002714 <WIZCHIP_WRITE>
         break;
 800398e:	e064      	b.n	8003a5a <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003990:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003994:	f7fe fe72 	bl	800267c <WIZCHIP_READ>
 8003998:	4603      	mov	r3, r0
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	b29c      	uxth	r4, r3
 800399e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80039a2:	f7fe fe6b 	bl	800267c <WIZCHIP_READ>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4423      	add	r3, r4
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	801a      	strh	r2, [r3, #0]
         break;
 80039b0:	e053      	b.n	8003a5a <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80039b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003a64 <ctlwizchip+0x1bc>)
 80039b4:	789a      	ldrb	r2, [r3, #2]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	4a29      	ldr	r2, [pc, #164]	@ (8003a64 <ctlwizchip+0x1bc>)
 80039c0:	78d2      	ldrb	r2, [r2, #3]
 80039c2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	3302      	adds	r3, #2
 80039c8:	4a26      	ldr	r2, [pc, #152]	@ (8003a64 <ctlwizchip+0x1bc>)
 80039ca:	7912      	ldrb	r2, [r2, #4]
 80039cc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	3303      	adds	r3, #3
 80039d2:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <ctlwizchip+0x1bc>)
 80039d4:	7952      	ldrb	r2, [r2, #5]
 80039d6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	3304      	adds	r3, #4
 80039dc:	4a21      	ldr	r2, [pc, #132]	@ (8003a64 <ctlwizchip+0x1bc>)
 80039de:	7992      	ldrb	r2, [r2, #6]
 80039e0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	3305      	adds	r3, #5
 80039e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <ctlwizchip+0x1bc>)
 80039e8:	79d2      	ldrb	r2, [r2, #7]
 80039ea:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	3306      	adds	r3, #6
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
         break;
 80039f4:	e031      	b.n	8003a5a <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80039f6:	f000 fa13 	bl	8003e20 <wizphy_reset>
         break;
 80039fa:	e02e      	b.n	8003a5a <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80039fc:	6838      	ldr	r0, [r7, #0]
 80039fe:	f000 fa36 	bl	8003e6e <wizphy_setphyconf>
         break;
 8003a02:	e02a      	b.n	8003a5a <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003a04:	6838      	ldr	r0, [r7, #0]
 8003a06:	f000 fa75 	bl	8003ef4 <wizphy_getphyconf>
         break;
 8003a0a:	e026      	b.n	8003a5a <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fad9 	bl	8003fc8 <wizphy_setphypmode>
 8003a16:	4603      	mov	r3, r0
 8003a18:	e020      	b.n	8003a5c <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003a1a:	f000 f9e8 	bl	8003dee <wizphy_getphypmode>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2bff      	cmp	r3, #255	@ 0xff
 8003a26:	d102      	bne.n	8003a2e <ctlwizchip+0x186>
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2c:	e016      	b.n	8003a5c <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	7dfa      	ldrb	r2, [r7, #23]
 8003a32:	701a      	strb	r2, [r3, #0]
         break;
 8003a34:	e011      	b.n	8003a5a <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003a36:	f000 f9c4 	bl	8003dc2 <wizphy_getphylink>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	2bff      	cmp	r3, #255	@ 0xff
 8003a42:	d102      	bne.n	8003a4a <ctlwizchip+0x1a2>
 8003a44:	f04f 33ff 	mov.w	r3, #4294967295
 8003a48:	e008      	b.n	8003a5c <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	7dfa      	ldrb	r2, [r7, #23]
 8003a4e:	701a      	strb	r2, [r3, #0]
         break;
 8003a50:	e003      	b.n	8003a5a <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	e001      	b.n	8003a5c <ctlwizchip+0x1b4>
         break;
 8003a58:	bf00      	nop
   }
   return 0;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd90      	pop	{r4, r7, pc}
 8003a64:	20000090 	.word	0x20000090

08003a68 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d82c      	bhi.n	8003ad4 <ctlnetwork+0x6c>
 8003a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a80 <ctlnetwork+0x18>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003a99 	.word	0x08003a99
 8003a84:	08003aa1 	.word	0x08003aa1
 8003a88:	08003aa9 	.word	0x08003aa9
 8003a8c:	08003ab7 	.word	0x08003ab7
 8003a90:	08003ac5 	.word	0x08003ac5
 8003a94:	08003acd 	.word	0x08003acd
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003a98:	6838      	ldr	r0, [r7, #0]
 8003a9a:	f000 fadf 	bl	800405c <wizchip_setnetinfo>
         break;
 8003a9e:	e01c      	b.n	8003ada <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003aa0:	6838      	ldr	r0, [r7, #0]
 8003aa2:	f000 fb1b 	bl	80040dc <wizchip_getnetinfo>
         break;
 8003aa6:	e018      	b.n	8003ada <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fb55 	bl	800415c <wizchip_setnetmode>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	e012      	b.n	8003adc <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003ab6:	f000 fb73 	bl	80041a0 <wizchip_getnetmode>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	701a      	strb	r2, [r3, #0]
         break;
 8003ac2:	e00a      	b.n	8003ada <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003ac4:	6838      	ldr	r0, [r7, #0]
 8003ac6:	f000 fb73 	bl	80041b0 <wizchip_settimeout>
         break;
 8003aca:	e006      	b.n	8003ada <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003acc:	6838      	ldr	r0, [r7, #0]
 8003ace:	f000 fb90 	bl	80041f2 <wizchip_gettimeout>
         break;
 8003ad2:	e002      	b.n	8003ada <ctlnetwork+0x72>
      default:
         return -1;
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	e000      	b.n	8003adc <ctlnetwork+0x74>
   }
   return 0;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	2206      	movs	r2, #6
 8003aee:	4619      	mov	r1, r3
 8003af0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003af4:	f7fe fe5c 	bl	80027b0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	2204      	movs	r2, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003b04:	f7fe fe54 	bl	80027b0 <WIZCHIP_READ_BUF>
 8003b08:	f107 0310 	add.w	r3, r7, #16
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003b14:	f7fe fe4c 	bl	80027b0 <WIZCHIP_READ_BUF>
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003b24:	f7fe fe44 	bl	80027b0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003b28:	2180      	movs	r1, #128	@ 0x80
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f7fe fdf2 	bl	8002714 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003b30:	2000      	movs	r0, #0
 8003b32:	f7fe fda3 	bl	800267c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	2206      	movs	r2, #6
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003b40:	f7fe fe96 	bl	8002870 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003b44:	f107 0314 	add.w	r3, r7, #20
 8003b48:	2204      	movs	r2, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003b50:	f7fe fe8e 	bl	8002870 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003b54:	f107 0310 	add.w	r3, r7, #16
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003b60:	f7fe fe86 	bl	8002870 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	2204      	movs	r2, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003b70:	f7fe fe7e 	bl	8002870 <WIZCHIP_WRITE_BUF>
}
 8003b74:	bf00      	nop
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003b8a:	f7ff ffab 	bl	8003ae4 <wizchip_sw_reset>
   if(txsize)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d03b      	beq.n	8003c0c <wizchip_init+0x90>
   {
      tmp = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	e015      	b.n	8003bca <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	7bbb      	ldrb	r3, [r7, #14]
 8003baa:	4413      	add	r3, r2
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003bb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	dd02      	ble.n	8003bbe <wizchip_init+0x42>
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbc:	e066      	b.n	8003c8c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bce:	2b07      	cmp	r3, #7
 8003bd0:	dde5      	ble.n	8003b9e <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
 8003bd6:	e015      	b.n	8003c04 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	3301      	adds	r3, #1
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003be6:	4618      	mov	r0, r3
 8003be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f7fe fd8e 	bl	8002714 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c08:	2b07      	cmp	r3, #7
 8003c0a:	dde5      	ble.n	8003bd8 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d03b      	beq.n	8003c8a <wizchip_init+0x10e>
   {
      tmp = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	73fb      	strb	r3, [r7, #15]
 8003c1a:	e015      	b.n	8003c48 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
 8003c28:	4413      	add	r3, r2
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	dd02      	ble.n	8003c3c <wizchip_init+0xc0>
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	e027      	b.n	8003c8c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	73fb      	strb	r3, [r7, #15]
 8003c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c4c:	2b07      	cmp	r3, #7
 8003c4e:	dde5      	ble.n	8003c1c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
 8003c54:	e015      	b.n	8003c82 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003c64:	4618      	mov	r0, r3
 8003c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7fe fd4f 	bl	8002714 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c86:	2b07      	cmp	r3, #7
 8003c88:	dde5      	ble.n	8003c56 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	f023 030f 	bic.w	r3, r3, #15
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003cb8:	f7fe fd2c 	bl	8002714 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	e014      	b.n	8003cec <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003cc2:	7bba      	ldrb	r2, [r7, #14]
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	fa42 f303 	asr.w	r3, r2, r3
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <wizchip_clrinterrupt+0x52>
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003cde:	211f      	movs	r1, #31
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe fd17 	bl	8002714 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b07      	cmp	r3, #7
 8003cf0:	d9e7      	bls.n	8003cc2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003d0e:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003d12:	f7fe fcb3 	bl	800267c <WIZCHIP_READ>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f023 030f 	bic.w	r3, r3, #15
 8003d1c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003d1e:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8003d22:	f7fe fcab 	bl	800267c <WIZCHIP_READ>
 8003d26:	4603      	mov	r3, r0
 8003d28:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003d2a:	79bb      	ldrb	r3, [r7, #6]
 8003d2c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003d2e:	88bb      	ldrh	r3, [r7, #4]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003d3c:	88bb      	ldrh	r3, [r7, #4]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003d64:	f7fe fcd6 	bl	8002714 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003d68:	7bbb      	ldrb	r3, [r7, #14]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8003d70:	f7fe fcd0 	bl	8002714 <WIZCHIP_WRITE>
#endif   
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003d8e:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003d92:	f7fe fc73 	bl	800267c <WIZCHIP_READ>
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003d9a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8003d9e:	f7fe fc6d 	bl	800267c <WIZCHIP_READ>
 8003da2:	4603      	mov	r3, r0
 8003da4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003da6:	79bb      	ldrb	r3, [r7, #6]
 8003da8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003daa:	88bb      	ldrh	r3, [r7, #4]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003db8:	88bb      	ldrh	r3, [r7, #4]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003dcc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003dd0:	f7fe fc54 	bl	800267c <WIZCHIP_READ>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003dde:	2301      	movs	r3, #1
 8003de0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003df8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003dfc:	f7fe fc3e 	bl	800267c <WIZCHIP_READ>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e06:	2b30      	cmp	r3, #48	@ 0x30
 8003e08:	d102      	bne.n	8003e10 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	71fb      	strb	r3, [r7, #7]
 8003e0e:	e001      	b.n	8003e14 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003e10:	2300      	movs	r3, #0
 8003e12:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003e26:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003e2a:	f7fe fc27 	bl	800267c <WIZCHIP_READ>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e38:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003e42:	f7fe fc67 	bl	8002714 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003e46:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003e4a:	f7fe fc17 	bl	800267c <WIZCHIP_READ>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e58:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003e62:	f7fe fc57 	bl	8002714 <WIZCHIP_WRITE>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d104      	bne.n	8003e8c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	e003      	b.n	8003e94 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e92:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d104      	bne.n	8003ea6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	e019      	b.n	8003eda <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	78db      	ldrb	r3, [r3, #3]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10d      	bne.n	8003eca <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	789b      	ldrb	r3, [r3, #2]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d104      	bne.n	8003ec0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	f043 0318 	orr.w	r3, r3, #24
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	e00c      	b.n	8003eda <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	f043 0308 	orr.w	r3, r3, #8
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e007      	b.n	8003eda <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	789b      	ldrb	r3, [r3, #2]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d103      	bne.n	8003eda <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	f043 0310 	orr.w	r3, r3, #16
 8003ed8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	4619      	mov	r1, r3
 8003ede:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003ee2:	f7fe fc17 	bl	8002714 <WIZCHIP_WRITE>
   wizphy_reset();
 8003ee6:	f7ff ff9b 	bl	8003e20 <wizphy_reset>
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003f00:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003f04:	f7fe fbba 	bl	800267c <WIZCHIP_READ>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	119b      	asrs	r3, r3, #6
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d001      	beq.n	8003f2a <wizphy_getphyconf+0x36>
 8003f26:	2b38      	cmp	r3, #56	@ 0x38
 8003f28:	d103      	bne.n	8003f32 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	705a      	strb	r2, [r3, #1]
         break;
 8003f30:	e003      	b.n	8003f3a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	705a      	strb	r2, [r3, #1]
         break;
 8003f38:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f40:	3b10      	subs	r3, #16
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	bf8c      	ite	hi
 8003f46:	2201      	movhi	r2, #1
 8003f48:	2200      	movls	r2, #0
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	2a00      	cmp	r2, #0
 8003f4e:	d10f      	bne.n	8003f70 <wizphy_getphyconf+0x7c>
 8003f50:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc0 <wizphy_getphyconf+0xcc>)
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	709a      	strb	r2, [r3, #2]
         break;
 8003f6e:	e003      	b.n	8003f78 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	709a      	strb	r2, [r3, #2]
         break;
 8003f76:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f7e:	3b08      	subs	r3, #8
 8003f80:	2b18      	cmp	r3, #24
 8003f82:	bf8c      	ite	hi
 8003f84:	2201      	movhi	r2, #1
 8003f86:	2200      	movls	r2, #0
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	d10f      	bne.n	8003fae <wizphy_getphyconf+0xba>
 8003f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc4 <wizphy_getphyconf+0xd0>)
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	70da      	strb	r2, [r3, #3]
         break;
 8003fac:	e003      	b.n	8003fb6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	70da      	strb	r2, [r3, #3]
         break;
 8003fb4:	bf00      	nop
   }
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	00010101 	.word	0x00010101
 8003fc4:	01010001 	.word	0x01010001

08003fc8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003fd6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003fda:	f7fe fb4f 	bl	800267c <WIZCHIP_READ>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <wizphy_setphypmode+0x2a>
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	e030      	b.n	8004054 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003ff8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d104      	bne.n	800400a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e003      	b.n	8004012 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004010:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	4619      	mov	r1, r3
 8004016:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800401a:	f7fe fb7b 	bl	8002714 <WIZCHIP_WRITE>
   wizphy_reset();
 800401e:	f7ff feff 	bl	8003e20 <wizphy_reset>
   tmp = getPHYCFGR();
 8004022:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004026:	f7fe fb29 	bl	800267c <WIZCHIP_READ>
 800402a:	4603      	mov	r3, r0
 800402c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <wizphy_setphypmode+0x88>
 800403e:	2300      	movs	r3, #0
 8004040:	e008      	b.n	8004054 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <wizphy_setphypmode+0x88>
 800404c:	2300      	movs	r3, #0
 800404e:	e001      	b.n	8004054 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2206      	movs	r2, #6
 8004068:	4619      	mov	r1, r3
 800406a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800406e:	f7fe fbff 	bl	8002870 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	330e      	adds	r3, #14
 8004076:	2204      	movs	r2, #4
 8004078:	4619      	mov	r1, r3
 800407a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800407e:	f7fe fbf7 	bl	8002870 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	330a      	adds	r3, #10
 8004086:	2204      	movs	r2, #4
 8004088:	4619      	mov	r1, r3
 800408a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800408e:	f7fe fbef 	bl	8002870 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3306      	adds	r3, #6
 8004096:	2204      	movs	r2, #4
 8004098:	4619      	mov	r1, r3
 800409a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800409e:	f7fe fbe7 	bl	8002870 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7c9a      	ldrb	r2, [r3, #18]
 80040a6:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <wizchip_setnetinfo+0x78>)
 80040a8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	7cda      	ldrb	r2, [r3, #19]
 80040ae:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <wizchip_setnetinfo+0x78>)
 80040b0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	7d1a      	ldrb	r2, [r3, #20]
 80040b6:	4b07      	ldr	r3, [pc, #28]	@ (80040d4 <wizchip_setnetinfo+0x78>)
 80040b8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7d5a      	ldrb	r2, [r3, #21]
 80040be:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <wizchip_setnetinfo+0x78>)
 80040c0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7d9a      	ldrb	r2, [r3, #22]
 80040c6:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <wizchip_setnetinfo+0x7c>)
 80040c8:	701a      	strb	r2, [r3, #0]
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200004d4 	.word	0x200004d4
 80040d8:	200004d8 	.word	0x200004d8

080040dc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2206      	movs	r2, #6
 80040e8:	4619      	mov	r1, r3
 80040ea:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80040ee:	f7fe fb5f 	bl	80027b0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	330e      	adds	r3, #14
 80040f6:	2204      	movs	r2, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80040fe:	f7fe fb57 	bl	80027b0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	330a      	adds	r3, #10
 8004106:	2204      	movs	r2, #4
 8004108:	4619      	mov	r1, r3
 800410a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800410e:	f7fe fb4f 	bl	80027b0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3306      	adds	r3, #6
 8004116:	2204      	movs	r2, #4
 8004118:	4619      	mov	r1, r3
 800411a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800411e:	f7fe fb47 	bl	80027b0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004122:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <wizchip_getnetinfo+0x78>)
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800412a:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <wizchip_getnetinfo+0x78>)
 800412c:	785a      	ldrb	r2, [r3, #1]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <wizchip_getnetinfo+0x78>)
 8004134:	789a      	ldrb	r2, [r3, #2]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800413a:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <wizchip_getnetinfo+0x78>)
 800413c:	78da      	ldrb	r2, [r3, #3]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004142:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <wizchip_getnetinfo+0x7c>)
 8004144:	781a      	ldrb	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	759a      	strb	r2, [r3, #22]
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200004d4 	.word	0x200004d4
 8004158:	200004d8 	.word	0x200004d8

0800415c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <wizchip_setnetmode+0x1e>
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	e00e      	b.n	8004198 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800417a:	2000      	movs	r0, #0
 800417c:	f7fe fa7e 	bl	800267c <WIZCHIP_READ>
 8004180:	4603      	mov	r3, r0
 8004182:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004184:	7bfa      	ldrb	r2, [r7, #15]
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	4313      	orrs	r3, r2
 800418a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	4619      	mov	r1, r3
 8004190:	2000      	movs	r0, #0
 8004192:	f7fe fabf 	bl	8002714 <WIZCHIP_WRITE>
   return 0;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80041a4:	2000      	movs	r0, #0
 80041a6:	f7fe fa69 	bl	800267c <WIZCHIP_READ>
 80041aa:	4603      	mov	r3, r0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80041c2:	f7fe faa7 	bl	8002714 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	885b      	ldrh	r3, [r3, #2]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	4619      	mov	r1, r3
 80041d2:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80041d6:	f7fe fa9d 	bl	8002714 <WIZCHIP_WRITE>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	885b      	ldrh	r3, [r3, #2]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	4619      	mov	r1, r3
 80041e2:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80041e6:	f7fe fa95 	bl	8002714 <WIZCHIP_WRITE>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80041f2:	b590      	push	{r4, r7, lr}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80041fa:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80041fe:	f7fe fa3d 	bl	800267c <WIZCHIP_READ>
 8004202:	4603      	mov	r3, r0
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800420a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800420e:	f7fe fa35 	bl	800267c <WIZCHIP_READ>
 8004212:	4603      	mov	r3, r0
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	b29c      	uxth	r4, r3
 8004218:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800421c:	f7fe fa2e 	bl	800267c <WIZCHIP_READ>
 8004220:	4603      	mov	r3, r0
 8004222:	4423      	add	r3, r4
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	805a      	strh	r2, [r3, #2]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	bd90      	pop	{r4, r7, pc}
	...

08004234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004234:	480d      	ldr	r0, [pc, #52]	@ (800426c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004236:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004238:	f7fc fdfa 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800423c:	480c      	ldr	r0, [pc, #48]	@ (8004270 <LoopForever+0x6>)
  ldr r1, =_edata
 800423e:	490d      	ldr	r1, [pc, #52]	@ (8004274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004240:	4a0d      	ldr	r2, [pc, #52]	@ (8004278 <LoopForever+0xe>)
  movs r3, #0
 8004242:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004244:	e002      	b.n	800424c <LoopCopyDataInit>

08004246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800424a:	3304      	adds	r3, #4

0800424c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800424c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800424e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004250:	d3f9      	bcc.n	8004246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004252:	4a0a      	ldr	r2, [pc, #40]	@ (800427c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004254:	4c0a      	ldr	r4, [pc, #40]	@ (8004280 <LoopForever+0x16>)
  movs r3, #0
 8004256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004258:	e001      	b.n	800425e <LoopFillZerobss>

0800425a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800425a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800425c:	3204      	adds	r2, #4

0800425e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800425e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004260:	d3fb      	bcc.n	800425a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004262:	f002 fd97 	bl	8006d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004266:	f7fc f9ab 	bl	80005c0 <main>

0800426a <LoopForever>:

LoopForever:
    b LoopForever
 800426a:	e7fe      	b.n	800426a <LoopForever>
  ldr   r0, =_estack
 800426c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004274:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8004278:	08007b8c 	.word	0x08007b8c
  ldr r2, =_sbss
 800427c:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8004280:	2000062c 	.word	0x2000062c

08004284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004284:	e7fe      	b.n	8004284 <ADC1_2_IRQHandler>

08004286 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004290:	2003      	movs	r0, #3
 8004292:	f000 f93d 	bl	8004510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004296:	2000      	movs	r0, #0
 8004298:	f000 f80e 	bl	80042b8 <HAL_InitTick>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	71fb      	strb	r3, [r7, #7]
 80042a6:	e001      	b.n	80042ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042a8:	f7fc fc0a 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042ac:	79fb      	ldrb	r3, [r7, #7]

}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80042c4:	4b16      	ldr	r3, [pc, #88]	@ (8004320 <HAL_InitTick+0x68>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d022      	beq.n	8004312 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80042cc:	4b15      	ldr	r3, [pc, #84]	@ (8004324 <HAL_InitTick+0x6c>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <HAL_InitTick+0x68>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80042d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f93a 	bl	800455a <HAL_SYSTICK_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10f      	bne.n	800430c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d809      	bhi.n	8004306 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042f2:	2200      	movs	r2, #0
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295
 80042fa:	f000 f914 	bl	8004526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <HAL_InitTick+0x70>)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e007      	b.n	8004316 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e004      	b.n	8004316 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e001      	b.n	8004316 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	200000c0 	.word	0x200000c0
 8004324:	20000088 	.word	0x20000088
 8004328:	200000bc 	.word	0x200000bc

0800432c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004330:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <HAL_IncTick+0x1c>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b05      	ldr	r3, [pc, #20]	@ (800434c <HAL_IncTick+0x20>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4413      	add	r3, r2
 800433a:	4a03      	ldr	r2, [pc, #12]	@ (8004348 <HAL_IncTick+0x1c>)
 800433c:	6013      	str	r3, [r2, #0]
}
 800433e:	bf00      	nop
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	200004dc 	.word	0x200004dc
 800434c:	200000c0 	.word	0x200000c0

08004350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return uwTick;
 8004354:	4b03      	ldr	r3, [pc, #12]	@ (8004364 <HAL_GetTick+0x14>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	200004dc 	.word	0x200004dc

08004368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004370:	f7ff ffee 	bl	8004350 <HAL_GetTick>
 8004374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d004      	beq.n	800438c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004382:	4b09      	ldr	r3, [pc, #36]	@ (80043a8 <HAL_Delay+0x40>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  }

   while ((HAL_GetTick() - tickstart) < wait)
 800438c:	bf00      	nop
 800438e:	f7ff ffdf 	bl	8004350 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	429a      	cmp	r2, r3
 800439c:	d8f7      	bhi.n	800438e <HAL_Delay+0x26>
  {
  }
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	200000c0 	.word	0x200000c0

080043ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043bc:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043de:	4a04      	ldr	r2, [pc, #16]	@ (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	60d3      	str	r3, [r2, #12]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f8:	4b04      	ldr	r3, [pc, #16]	@ (800440c <__NVIC_GetPriorityGrouping+0x18>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	f003 0307 	and.w	r3, r3, #7
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004420:	2b00      	cmp	r3, #0
 8004422:	db0a      	blt.n	800443a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	490c      	ldr	r1, [pc, #48]	@ (800445c <__NVIC_SetPriority+0x4c>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	0112      	lsls	r2, r2, #4
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	440b      	add	r3, r1
 8004434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004438:	e00a      	b.n	8004450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4908      	ldr	r1, [pc, #32]	@ (8004460 <__NVIC_SetPriority+0x50>)
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	3b04      	subs	r3, #4
 8004448:	0112      	lsls	r2, r2, #4
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	440b      	add	r3, r1
 800444e:	761a      	strb	r2, [r3, #24]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000e100 	.word	0xe000e100
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	@ 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f1c3 0307 	rsb	r3, r3, #7
 800447e:	2b04      	cmp	r3, #4
 8004480:	bf28      	it	cs
 8004482:	2304      	movcs	r3, #4
 8004484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3304      	adds	r3, #4
 800448a:	2b06      	cmp	r3, #6
 800448c:	d902      	bls.n	8004494 <NVIC_EncodePriority+0x30>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3b03      	subs	r3, #3
 8004492:	e000      	b.n	8004496 <NVIC_EncodePriority+0x32>
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43da      	mvns	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	401a      	ands	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044ac:	f04f 31ff 	mov.w	r1, #4294967295
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	43d9      	mvns	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044bc:	4313      	orrs	r3, r2
         );
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3724      	adds	r7, #36	@ 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044dc:	d301      	bcc.n	80044e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044de:	2301      	movs	r3, #1
 80044e0:	e00f      	b.n	8004502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044e2:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <SysTick_Config+0x40>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ea:	210f      	movs	r1, #15
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	f7ff ff8e 	bl	8004410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f4:	4b05      	ldr	r3, [pc, #20]	@ (800450c <SysTick_Config+0x40>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044fa:	4b04      	ldr	r3, [pc, #16]	@ (800450c <SysTick_Config+0x40>)
 80044fc:	2207      	movs	r2, #7
 80044fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	e000e010 	.word	0xe000e010

08004510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff ff47 	bl	80043ac <__NVIC_SetPriorityGrouping>
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af00      	add	r7, sp, #0
 800452c:	4603      	mov	r3, r0
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004534:	f7ff ff5e 	bl	80043f4 <__NVIC_GetPriorityGrouping>
 8004538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	6978      	ldr	r0, [r7, #20]
 8004540:	f7ff ff90 	bl	8004464 <NVIC_EncodePriority>
 8004544:	4602      	mov	r2, r0
 8004546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff5f 	bl	8004410 <__NVIC_SetPriority>
}
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ffb2 	bl	80044cc <SysTick_Config>
 8004568:	4603      	mov	r3, r0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004582:	e15a      	b.n	800483a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	2101      	movs	r1, #1
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	4013      	ands	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 814c 	beq.w	8004834 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d005      	beq.n	80045b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d130      	bne.n	8004616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	2203      	movs	r2, #3
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ea:	2201      	movs	r2, #1
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 0201 	and.w	r2, r3, #1
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b03      	cmp	r3, #3
 8004620:	d017      	beq.n	8004652 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	2203      	movs	r2, #3
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4013      	ands	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d123      	bne.n	80046a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	08da      	lsrs	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3208      	adds	r2, #8
 8004666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	220f      	movs	r2, #15
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	08da      	lsrs	r2, r3, #3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3208      	adds	r2, #8
 80046a0:	6939      	ldr	r1, [r7, #16]
 80046a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	2203      	movs	r2, #3
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 0203 	and.w	r2, r3, #3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a6 	beq.w	8004834 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004858 <HAL_GPIO_Init+0x2e4>)
 80046ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004858 <HAL_GPIO_Init+0x2e4>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80046f4:	4b58      	ldr	r3, [pc, #352]	@ (8004858 <HAL_GPIO_Init+0x2e4>)
 80046f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004700:	4a56      	ldr	r2, [pc, #344]	@ (800485c <HAL_GPIO_Init+0x2e8>)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	3302      	adds	r3, #2
 8004708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	220f      	movs	r2, #15
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800472a:	d01f      	beq.n	800476c <HAL_GPIO_Init+0x1f8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a4c      	ldr	r2, [pc, #304]	@ (8004860 <HAL_GPIO_Init+0x2ec>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d019      	beq.n	8004768 <HAL_GPIO_Init+0x1f4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a4b      	ldr	r2, [pc, #300]	@ (8004864 <HAL_GPIO_Init+0x2f0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_GPIO_Init+0x1f0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a4a      	ldr	r2, [pc, #296]	@ (8004868 <HAL_GPIO_Init+0x2f4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00d      	beq.n	8004760 <HAL_GPIO_Init+0x1ec>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a49      	ldr	r2, [pc, #292]	@ (800486c <HAL_GPIO_Init+0x2f8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <HAL_GPIO_Init+0x1e8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a48      	ldr	r2, [pc, #288]	@ (8004870 <HAL_GPIO_Init+0x2fc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d101      	bne.n	8004758 <HAL_GPIO_Init+0x1e4>
 8004754:	2305      	movs	r3, #5
 8004756:	e00a      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 8004758:	2306      	movs	r3, #6
 800475a:	e008      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 800475c:	2304      	movs	r3, #4
 800475e:	e006      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 8004760:	2303      	movs	r3, #3
 8004762:	e004      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 8004764:	2302      	movs	r3, #2
 8004766:	e002      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 800476c:	2300      	movs	r3, #0
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	f002 0203 	and.w	r2, r2, #3
 8004774:	0092      	lsls	r2, r2, #2
 8004776:	4093      	lsls	r3, r2
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800477e:	4937      	ldr	r1, [pc, #220]	@ (800485c <HAL_GPIO_Init+0x2e8>)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	3302      	adds	r3, #2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800478c:	4b39      	ldr	r3, [pc, #228]	@ (8004874 <HAL_GPIO_Init+0x300>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	43db      	mvns	r3, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047b0:	4a30      	ldr	r2, [pc, #192]	@ (8004874 <HAL_GPIO_Init+0x300>)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004874 <HAL_GPIO_Init+0x300>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	43db      	mvns	r3, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047da:	4a26      	ldr	r2, [pc, #152]	@ (8004874 <HAL_GPIO_Init+0x300>)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047e0:	4b24      	ldr	r3, [pc, #144]	@ (8004874 <HAL_GPIO_Init+0x300>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004804:	4a1b      	ldr	r2, [pc, #108]	@ (8004874 <HAL_GPIO_Init+0x300>)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800480a:	4b1a      	ldr	r3, [pc, #104]	@ (8004874 <HAL_GPIO_Init+0x300>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	43db      	mvns	r3, r3
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4013      	ands	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800482e:	4a11      	ldr	r2, [pc, #68]	@ (8004874 <HAL_GPIO_Init+0x300>)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	3301      	adds	r3, #1
 8004838:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	f47f ae9d 	bne.w	8004584 <HAL_GPIO_Init+0x10>
  }
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40021000 	.word	0x40021000
 800485c:	40010000 	.word	0x40010000
 8004860:	48000400 	.word	0x48000400
 8004864:	48000800 	.word	0x48000800
 8004868:	48000c00 	.word	0x48000c00
 800486c:	48001000 	.word	0x48001000
 8004870:	48001400 	.word	0x48001400
 8004874:	40010400 	.word	0x40010400

08004878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	807b      	strh	r3, [r7, #2]
 8004884:	4613      	mov	r3, r2
 8004886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004888:	787b      	ldrb	r3, [r7, #1]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004894:	e002      	b.n	800489c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d141      	bne.n	800493a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048b6:	4b4b      	ldr	r3, [pc, #300]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c2:	d131      	bne.n	8004928 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048c4:	4b47      	ldr	r3, [pc, #284]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ca:	4a46      	ldr	r2, [pc, #280]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048d4:	4b43      	ldr	r3, [pc, #268]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048dc:	4a41      	ldr	r2, [pc, #260]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048e4:	4b40      	ldr	r3, [pc, #256]	@ (80049e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2232      	movs	r2, #50	@ 0x32
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	4a3f      	ldr	r2, [pc, #252]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	0c9b      	lsrs	r3, r3, #18
 80048f6:	3301      	adds	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048fa:	e002      	b.n	8004902 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3b01      	subs	r3, #1
 8004900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004902:	4b38      	ldr	r3, [pc, #224]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800490e:	d102      	bne.n	8004916 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f2      	bne.n	80048fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004916:	4b33      	ldr	r3, [pc, #204]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004922:	d158      	bne.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e057      	b.n	80049d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004928:	4b2e      	ldr	r3, [pc, #184]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800492e:	4a2d      	ldr	r2, [pc, #180]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004934:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004938:	e04d      	b.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004940:	d141      	bne.n	80049c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004942:	4b28      	ldr	r3, [pc, #160]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494e:	d131      	bne.n	80049b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004950:	4b24      	ldr	r3, [pc, #144]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004956:	4a23      	ldr	r2, [pc, #140]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800495c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004960:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004968:	4a1e      	ldr	r2, [pc, #120]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800496e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004970:	4b1d      	ldr	r3, [pc, #116]	@ (80049e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2232      	movs	r2, #50	@ 0x32
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	4a1c      	ldr	r2, [pc, #112]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	0c9b      	lsrs	r3, r3, #18
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004986:	e002      	b.n	800498e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3b01      	subs	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800498e:	4b15      	ldr	r3, [pc, #84]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499a:	d102      	bne.n	80049a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f2      	bne.n	8004988 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ae:	d112      	bne.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e011      	b.n	80049d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ba:	4a0a      	ldr	r2, [pc, #40]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049c4:	e007      	b.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049c6:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049ce:	4a05      	ldr	r2, [pc, #20]	@ (80049e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40007000 	.word	0x40007000
 80049e8:	20000088 	.word	0x20000088
 80049ec:	431bde83 	.word	0x431bde83

080049f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a04      	ldr	r2, [pc, #16]	@ (8004a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049fe:	6093      	str	r3, [r2, #8]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40007000 	.word	0x40007000

08004a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e2fe      	b.n	8005020 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d075      	beq.n	8004b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2e:	4b97      	ldr	r3, [pc, #604]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a38:	4b94      	ldr	r3, [pc, #592]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d102      	bne.n	8004a4e <HAL_RCC_OscConfig+0x3e>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d002      	beq.n	8004a54 <HAL_RCC_OscConfig+0x44>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	4b8d      	ldr	r3, [pc, #564]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d05b      	beq.n	8004b18 <HAL_RCC_OscConfig+0x108>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d157      	bne.n	8004b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e2d9      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a74:	d106      	bne.n	8004a84 <HAL_RCC_OscConfig+0x74>
 8004a76:	4b85      	ldr	r3, [pc, #532]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a84      	ldr	r2, [pc, #528]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e01d      	b.n	8004ac0 <HAL_RCC_OscConfig+0xb0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x98>
 8004a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a7e      	ldr	r2, [pc, #504]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7b      	ldr	r2, [pc, #492]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0xb0>
 8004aa8:	4b78      	ldr	r3, [pc, #480]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a77      	ldr	r2, [pc, #476]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4b75      	ldr	r3, [pc, #468]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a74      	ldr	r2, [pc, #464]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d013      	beq.n	8004af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7ff fc42 	bl	8004350 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7ff fc3e 	bl	8004350 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	@ 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e29e      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0xc0>
 8004aee:	e014      	b.n	8004b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7ff fc2e 	bl	8004350 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7ff fc2a 	bl	8004350 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	@ 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e28a      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b0a:	4b60      	ldr	r3, [pc, #384]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0xe8>
 8004b16:	e000      	b.n	8004b1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d075      	beq.n	8004c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b26:	4b59      	ldr	r3, [pc, #356]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b30:	4b56      	ldr	r3, [pc, #344]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b0c      	cmp	r3, #12
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCC_OscConfig+0x136>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d002      	beq.n	8004b4c <HAL_RCC_OscConfig+0x13c>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d11f      	bne.n	8004b8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_OscConfig+0x154>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e25d      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	4b49      	ldr	r3, [pc, #292]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	061b      	lsls	r3, r3, #24
 8004b72:	4946      	ldr	r1, [pc, #280]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b78:	4b45      	ldr	r3, [pc, #276]	@ (8004c90 <HAL_RCC_OscConfig+0x280>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff fb9b 	bl	80042b8 <HAL_InitTick>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d043      	beq.n	8004c10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e249      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d023      	beq.n	8004bdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b94:	4b3d      	ldr	r3, [pc, #244]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3c      	ldr	r2, [pc, #240]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7ff fbd6 	bl	8004350 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7ff fbd2 	bl	8004350 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e232      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bba:	4b34      	ldr	r3, [pc, #208]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc6:	4b31      	ldr	r3, [pc, #196]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	061b      	lsls	r3, r3, #24
 8004bd4:	492d      	ldr	r1, [pc, #180]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	604b      	str	r3, [r1, #4]
 8004bda:	e01a      	b.n	8004c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004be2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7ff fbb2 	bl	8004350 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf0:	f7ff fbae 	bl	8004350 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e20e      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c02:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x1e0>
 8004c0e:	e000      	b.n	8004c12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d041      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01c      	beq.n	8004c60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c26:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c2c:	4a17      	ldr	r2, [pc, #92]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c36:	f7ff fb8b 	bl	8004350 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c3e:	f7ff fb87 	bl	8004350 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e1e7      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c50:	4b0e      	ldr	r3, [pc, #56]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ef      	beq.n	8004c3e <HAL_RCC_OscConfig+0x22e>
 8004c5e:	e020      	b.n	8004ca2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c60:	4b0a      	ldr	r3, [pc, #40]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c66:	4a09      	ldr	r2, [pc, #36]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c70:	f7ff fb6e 	bl	8004350 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c76:	e00d      	b.n	8004c94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c78:	f7ff fb6a 	bl	8004350 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d906      	bls.n	8004c94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e1ca      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	200000bc 	.word	0x200000bc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c94:	4b8c      	ldr	r3, [pc, #560]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1ea      	bne.n	8004c78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80a6 	beq.w	8004dfc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cb4:	4b84      	ldr	r3, [pc, #528]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x2b4>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x2b6>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cce:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce6:	4b79      	ldr	r3, [pc, #484]	@ (8004ecc <HAL_RCC_OscConfig+0x4bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf2:	4b76      	ldr	r3, [pc, #472]	@ (8004ecc <HAL_RCC_OscConfig+0x4bc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	@ (8004ecc <HAL_RCC_OscConfig+0x4bc>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7ff fb27 	bl	8004350 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7ff fb23 	bl	8004350 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e183      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d18:	4b6c      	ldr	r3, [pc, #432]	@ (8004ecc <HAL_RCC_OscConfig+0x4bc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d108      	bne.n	8004d3e <HAL_RCC_OscConfig+0x32e>
 8004d2c:	4b66      	ldr	r3, [pc, #408]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d32:	4a65      	ldr	r2, [pc, #404]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d3c:	e024      	b.n	8004d88 <HAL_RCC_OscConfig+0x378>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d110      	bne.n	8004d68 <HAL_RCC_OscConfig+0x358>
 8004d46:	4b60      	ldr	r3, [pc, #384]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d56:	4b5c      	ldr	r3, [pc, #368]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d66:	e00f      	b.n	8004d88 <HAL_RCC_OscConfig+0x378>
 8004d68:	4b57      	ldr	r3, [pc, #348]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6e:	4a56      	ldr	r2, [pc, #344]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d78:	4b53      	ldr	r3, [pc, #332]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7e:	4a52      	ldr	r2, [pc, #328]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d016      	beq.n	8004dbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7ff fade 	bl	8004350 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d98:	f7ff fada 	bl	8004350 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e138      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dae:	4b46      	ldr	r3, [pc, #280]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0ed      	beq.n	8004d98 <HAL_RCC_OscConfig+0x388>
 8004dbc:	e015      	b.n	8004dea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7ff fac7 	bl	8004350 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7ff fac3 	bl	8004350 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e121      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1ed      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d105      	bne.n	8004dfc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df0:	4b35      	ldr	r3, [pc, #212]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df4:	4a34      	ldr	r2, [pc, #208]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d03c      	beq.n	8004e82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01c      	beq.n	8004e4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e10:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e16:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7ff fa96 	bl	8004350 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e28:	f7ff fa92 	bl	8004350 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e0f2      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e3a:	4b23      	ldr	r3, [pc, #140]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ef      	beq.n	8004e28 <HAL_RCC_OscConfig+0x418>
 8004e48:	e01b      	b.n	8004e82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5a:	f7ff fa79 	bl	8004350 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e62:	f7ff fa75 	bl	8004350 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0d5      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e74:	4b14      	ldr	r3, [pc, #80]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ef      	bne.n	8004e62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80c9 	beq.w	800501e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	f000 8083 	beq.w	8004fa0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d15e      	bne.n	8004f60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea2:	4b09      	ldr	r3, [pc, #36]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a08      	ldr	r2, [pc, #32]	@ (8004ec8 <HAL_RCC_OscConfig+0x4b8>)
 8004ea8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7ff fa4f 	bl	8004350 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb4:	e00c      	b.n	8004ed0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb6:	f7ff fa4b 	bl	8004350 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d905      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e0ab      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed0:	4b55      	ldr	r3, [pc, #340]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ec      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004edc:	4b52      	ldr	r3, [pc, #328]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	4b52      	ldr	r3, [pc, #328]	@ (800502c <HAL_RCC_OscConfig+0x61c>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6a11      	ldr	r1, [r2, #32]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eec:	3a01      	subs	r2, #1
 8004eee:	0112      	lsls	r2, r2, #4
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004ef6:	0212      	lsls	r2, r2, #8
 8004ef8:	4311      	orrs	r1, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004efe:	0852      	lsrs	r2, r2, #1
 8004f00:	3a01      	subs	r2, #1
 8004f02:	0552      	lsls	r2, r2, #21
 8004f04:	4311      	orrs	r1, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f0a:	0852      	lsrs	r2, r2, #1
 8004f0c:	3a01      	subs	r2, #1
 8004f0e:	0652      	lsls	r2, r2, #25
 8004f10:	4311      	orrs	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f16:	06d2      	lsls	r2, r2, #27
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	4943      	ldr	r1, [pc, #268]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f20:	4b41      	ldr	r3, [pc, #260]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a40      	ldr	r2, [pc, #256]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4a3d      	ldr	r2, [pc, #244]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7ff fa0a 	bl	8004350 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7ff fa06 	bl	8004350 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e066      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f52:	4b35      	ldr	r3, [pc, #212]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x530>
 8004f5e:	e05e      	b.n	800501e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f60:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a30      	ldr	r2, [pc, #192]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7ff f9f0 	bl	8004350 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f74:	f7ff f9ec 	bl	8004350 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e04c      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f86:	4b28      	ldr	r3, [pc, #160]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f92:	4b25      	ldr	r3, [pc, #148]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	4924      	ldr	r1, [pc, #144]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004f98:	4b25      	ldr	r3, [pc, #148]	@ (8005030 <HAL_RCC_OscConfig+0x620>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	60cb      	str	r3, [r1, #12]
 8004f9e:	e03e      	b.n	800501e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e039      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004fac:	4b1e      	ldr	r3, [pc, #120]	@ (8005028 <HAL_RCC_OscConfig+0x618>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f003 0203 	and.w	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d12c      	bne.n	800501a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d123      	bne.n	800501a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d11b      	bne.n	800501a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d113      	bne.n	800501a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	3b01      	subs	r3, #1
 8005000:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d109      	bne.n	800501a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	3b01      	subs	r3, #1
 8005014:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d001      	beq.n	800501e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	019f800c 	.word	0x019f800c
 8005030:	feeefffc 	.word	0xfeeefffc

08005034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e11e      	b.n	800528a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800504c:	4b91      	ldr	r3, [pc, #580]	@ (8005294 <HAL_RCC_ClockConfig+0x260>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d910      	bls.n	800507c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505a:	4b8e      	ldr	r3, [pc, #568]	@ (8005294 <HAL_RCC_ClockConfig+0x260>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 020f 	bic.w	r2, r3, #15
 8005062:	498c      	ldr	r1, [pc, #560]	@ (8005294 <HAL_RCC_ClockConfig+0x260>)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b8a      	ldr	r3, [pc, #552]	@ (8005294 <HAL_RCC_ClockConfig+0x260>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e106      	b.n	800528a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d073      	beq.n	8005170 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d129      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005090:	4b81      	ldr	r3, [pc, #516]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0f4      	b.n	800528a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80050a0:	f000 f99e 	bl	80053e0 <RCC_GetSysClockFreqFromPLLSource>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4a7c      	ldr	r2, [pc, #496]	@ (800529c <HAL_RCC_ClockConfig+0x268>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d93f      	bls.n	800512e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050ae:	4b7a      	ldr	r3, [pc, #488]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d033      	beq.n	800512e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d12f      	bne.n	800512e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050ce:	4b72      	ldr	r3, [pc, #456]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050d6:	4a70      	ldr	r2, [pc, #448]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80050d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050de:	2380      	movs	r3, #128	@ 0x80
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	e024      	b.n	800512e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0c6      	b.n	800528a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050fc:	4b66      	ldr	r3, [pc, #408]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0be      	b.n	800528a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800510c:	f000 f8ce 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8005110:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4a61      	ldr	r2, [pc, #388]	@ (800529c <HAL_RCC_ClockConfig+0x268>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d909      	bls.n	800512e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800511a:	4b5f      	ldr	r3, [pc, #380]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005122:	4a5d      	ldr	r2, [pc, #372]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 8005124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005128:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800512a:	2380      	movs	r3, #128	@ 0x80
 800512c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800512e:	4b5a      	ldr	r3, [pc, #360]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4957      	ldr	r1, [pc, #348]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005140:	f7ff f906 	bl	8004350 <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7ff f902 	bl	8004350 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e095      	b.n	800528a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515e:	4b4e      	ldr	r3, [pc, #312]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 020c 	and.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	429a      	cmp	r2, r3
 800516e:	d1eb      	bne.n	8005148 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d023      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005188:	4b43      	ldr	r3, [pc, #268]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a42      	ldr	r2, [pc, #264]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 800518e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005192:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80051a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051a8:	4a3b      	ldr	r2, [pc, #236]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80051aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b0:	4b39      	ldr	r3, [pc, #228]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4936      	ldr	r1, [pc, #216]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b80      	cmp	r3, #128	@ 0x80
 80051c8:	d105      	bne.n	80051d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051ca:	4b33      	ldr	r3, [pc, #204]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	4a32      	ldr	r2, [pc, #200]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 80051d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005294 <HAL_RCC_ClockConfig+0x260>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d21d      	bcs.n	8005220 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005294 <HAL_RCC_ClockConfig+0x260>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f023 020f 	bic.w	r2, r3, #15
 80051ec:	4929      	ldr	r1, [pc, #164]	@ (8005294 <HAL_RCC_ClockConfig+0x260>)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051f4:	f7ff f8ac 	bl	8004350 <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	e00a      	b.n	8005212 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fc:	f7ff f8a8 	bl	8004350 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e03b      	b.n	800528a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b20      	ldr	r3, [pc, #128]	@ (8005294 <HAL_RCC_ClockConfig+0x260>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d1ed      	bne.n	80051fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800522c:	4b1a      	ldr	r3, [pc, #104]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	4917      	ldr	r1, [pc, #92]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524a:	4b13      	ldr	r3, [pc, #76]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	490f      	ldr	r1, [pc, #60]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 800525a:	4313      	orrs	r3, r2
 800525c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800525e:	f000 f825 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8005262:	4602      	mov	r2, r0
 8005264:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <HAL_RCC_ClockConfig+0x264>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	490c      	ldr	r1, [pc, #48]	@ (80052a0 <HAL_RCC_ClockConfig+0x26c>)
 8005270:	5ccb      	ldrb	r3, [r1, r3]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	fa22 f303 	lsr.w	r3, r2, r3
 800527a:	4a0a      	ldr	r2, [pc, #40]	@ (80052a4 <HAL_RCC_ClockConfig+0x270>)
 800527c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800527e:	4b0a      	ldr	r3, [pc, #40]	@ (80052a8 <HAL_RCC_ClockConfig+0x274>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff f818 	bl	80042b8 <HAL_InitTick>
 8005288:	4603      	mov	r3, r0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40022000 	.word	0x40022000
 8005298:	40021000 	.word	0x40021000
 800529c:	04c4b400 	.word	0x04c4b400
 80052a0:	08007b08 	.word	0x08007b08
 80052a4:	20000088 	.word	0x20000088
 80052a8:	200000bc 	.word	0x200000bc

080052ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d102      	bne.n	80052c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052be:	4b2a      	ldr	r3, [pc, #168]	@ (8005368 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	e047      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052c4:	4b27      	ldr	r3, [pc, #156]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 030c 	and.w	r3, r3, #12
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d102      	bne.n	80052d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052d0:	4b26      	ldr	r3, [pc, #152]	@ (800536c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	e03e      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052d6:	4b23      	ldr	r3, [pc, #140]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
 80052de:	2b0c      	cmp	r3, #12
 80052e0:	d136      	bne.n	8005350 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052e2:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	3301      	adds	r3, #1
 80052f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d10c      	bne.n	800531a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005300:	4a1a      	ldr	r2, [pc, #104]	@ (800536c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	4a16      	ldr	r2, [pc, #88]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xb8>)
 800530a:	68d2      	ldr	r2, [r2, #12]
 800530c:	0a12      	lsrs	r2, r2, #8
 800530e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	617b      	str	r3, [r7, #20]
      break;
 8005318:	e00c      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800531a:	4a13      	ldr	r2, [pc, #76]	@ (8005368 <HAL_RCC_GetSysClockFreq+0xbc>)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	4a10      	ldr	r2, [pc, #64]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	0a12      	lsrs	r2, r2, #8
 8005328:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]
      break;
 8005332:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005334:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	0e5b      	lsrs	r3, r3, #25
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	3301      	adds	r3, #1
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	e001      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005354:	693b      	ldr	r3, [r7, #16]
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000
 8005368:	00f42400 	.word	0x00f42400
 800536c:	016e3600 	.word	0x016e3600

08005370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005374:	4b03      	ldr	r3, [pc, #12]	@ (8005384 <HAL_RCC_GetHCLKFreq+0x14>)
 8005376:	681b      	ldr	r3, [r3, #0]
}
 8005378:	4618      	mov	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000088 	.word	0x20000088

08005388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800538c:	f7ff fff0 	bl	8005370 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4904      	ldr	r1, [pc, #16]	@ (80053b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40021000 	.word	0x40021000
 80053b0:	08007b18 	.word	0x08007b18

080053b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053b8:	f7ff ffda 	bl	8005370 <HAL_RCC_GetHCLKFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	0adb      	lsrs	r3, r3, #11
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	4904      	ldr	r1, [pc, #16]	@ (80053dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40021000 	.word	0x40021000
 80053dc:	08007b18 	.word	0x08007b18

080053e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d10c      	bne.n	800541e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005404:	4a17      	ldr	r2, [pc, #92]	@ (8005464 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	4a14      	ldr	r2, [pc, #80]	@ (8005460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800540e:	68d2      	ldr	r2, [r2, #12]
 8005410:	0a12      	lsrs	r2, r2, #8
 8005412:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	617b      	str	r3, [r7, #20]
    break;
 800541c:	e00c      	b.n	8005438 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800541e:	4a12      	ldr	r2, [pc, #72]	@ (8005468 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	4a0e      	ldr	r2, [pc, #56]	@ (8005460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005428:	68d2      	ldr	r2, [r2, #12]
 800542a:	0a12      	lsrs	r2, r2, #8
 800542c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005430:	fb02 f303 	mul.w	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]
    break;
 8005436:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005438:	4b09      	ldr	r3, [pc, #36]	@ (8005460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	0e5b      	lsrs	r3, r3, #25
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	3301      	adds	r3, #1
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005452:	687b      	ldr	r3, [r7, #4]
}
 8005454:	4618      	mov	r0, r3
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40021000 	.word	0x40021000
 8005464:	016e3600 	.word	0x016e3600
 8005468:	00f42400 	.word	0x00f42400

0800546c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005474:	2300      	movs	r3, #0
 8005476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005478:	2300      	movs	r3, #0
 800547a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8098 	beq.w	80055ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800548a:	2300      	movs	r3, #0
 800548c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800548e:	4b43      	ldr	r3, [pc, #268]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10d      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800549a:	4b40      	ldr	r3, [pc, #256]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549e:	4a3f      	ldr	r2, [pc, #252]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80054a6:	4b3d      	ldr	r3, [pc, #244]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ae:	60bb      	str	r3, [r7, #8]
 80054b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054b2:	2301      	movs	r3, #1
 80054b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b6:	4b3a      	ldr	r3, [pc, #232]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a39      	ldr	r2, [pc, #228]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054c2:	f7fe ff45 	bl	8004350 <HAL_GetTick>
 80054c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054c8:	e009      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ca:	f7fe ff41 	bl	8004350 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d902      	bls.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	74fb      	strb	r3, [r7, #19]
        break;
 80054dc:	e005      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054de:	4b30      	ldr	r3, [pc, #192]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0ef      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054ea:	7cfb      	ldrb	r3, [r7, #19]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d159      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054f0:	4b2a      	ldr	r3, [pc, #168]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01e      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	429a      	cmp	r2, r3
 800550a:	d019      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800550c:	4b23      	ldr	r3, [pc, #140]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005516:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005518:	4b20      	ldr	r3, [pc, #128]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551e:	4a1f      	ldr	r2, [pc, #124]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005528:	4b1c      	ldr	r3, [pc, #112]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552e:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005538:	4a18      	ldr	r2, [pc, #96]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554a:	f7fe ff01 	bl	8004350 <HAL_GetTick>
 800554e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005550:	e00b      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fe fefd 	bl	8004350 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005560:	4293      	cmp	r3, r2
 8005562:	d902      	bls.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	74fb      	strb	r3, [r7, #19]
            break;
 8005568:	e006      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556a:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0ec      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005578:	7cfb      	ldrb	r3, [r7, #19]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800557e:	4b07      	ldr	r3, [pc, #28]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558c:	4903      	ldr	r1, [pc, #12]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005594:	e008      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005596:	7cfb      	ldrb	r3, [r7, #19]
 8005598:	74bb      	strb	r3, [r7, #18]
 800559a:	e005      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800559c:	40021000 	.word	0x40021000
 80055a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a4:	7cfb      	ldrb	r3, [r7, #19]
 80055a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055a8:	7c7b      	ldrb	r3, [r7, #17]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d105      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ae:	4ba7      	ldr	r3, [pc, #668]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b2:	4aa6      	ldr	r2, [pc, #664]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055c6:	4ba1      	ldr	r3, [pc, #644]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f023 0203 	bic.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	499d      	ldr	r1, [pc, #628]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055e8:	4b98      	ldr	r3, [pc, #608]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ee:	f023 020c 	bic.w	r2, r3, #12
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	4995      	ldr	r1, [pc, #596]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800560a:	4b90      	ldr	r3, [pc, #576]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	498c      	ldr	r1, [pc, #560]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800562c:	4b87      	ldr	r3, [pc, #540]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	4984      	ldr	r1, [pc, #528]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800564e:	4b7f      	ldr	r3, [pc, #508]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	497b      	ldr	r1, [pc, #492]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005670:	4b76      	ldr	r3, [pc, #472]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	4973      	ldr	r1, [pc, #460]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005692:	4b6e      	ldr	r3, [pc, #440]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	496a      	ldr	r1, [pc, #424]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b4:	4b65      	ldr	r3, [pc, #404]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	4962      	ldr	r1, [pc, #392]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d6:	4b5d      	ldr	r3, [pc, #372]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e4:	4959      	ldr	r1, [pc, #356]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056f8:	4b54      	ldr	r3, [pc, #336]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056fe:	f023 0203 	bic.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	4951      	ldr	r1, [pc, #324]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800571a:	4b4c      	ldr	r3, [pc, #304]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005720:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	4948      	ldr	r1, [pc, #288]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005738:	2b00      	cmp	r3, #0
 800573a:	d015      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800573c:	4b43      	ldr	r3, [pc, #268]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005742:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	4940      	ldr	r1, [pc, #256]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800575a:	d105      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575c:	4b3b      	ldr	r3, [pc, #236]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4a3a      	ldr	r2, [pc, #232]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005762:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005766:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005770:	2b00      	cmp	r3, #0
 8005772:	d015      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005774:	4b35      	ldr	r3, [pc, #212]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005782:	4932      	ldr	r1, [pc, #200]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800578e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005792:	d105      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005794:	4b2d      	ldr	r3, [pc, #180]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4a2c      	ldr	r2, [pc, #176]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800579e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d015      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057ac:	4b27      	ldr	r3, [pc, #156]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ba:	4924      	ldr	r1, [pc, #144]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057ca:	d105      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057cc:	4b1f      	ldr	r3, [pc, #124]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4a1e      	ldr	r2, [pc, #120]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d015      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057e4:	4b19      	ldr	r3, [pc, #100]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f2:	4916      	ldr	r1, [pc, #88]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005802:	d105      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005804:	4b11      	ldr	r3, [pc, #68]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4a10      	ldr	r2, [pc, #64]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800580e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d019      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800581c:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005822:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	4908      	ldr	r1, [pc, #32]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800583a:	d109      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800583c:	4b03      	ldr	r3, [pc, #12]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a02      	ldr	r2, [pc, #8]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005846:	60d3      	str	r3, [r2, #12]
 8005848:	e002      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d015      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800585c:	4b29      	ldr	r3, [pc, #164]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005862:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586a:	4926      	ldr	r1, [pc, #152]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800587a:	d105      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800587c:	4b21      	ldr	r3, [pc, #132]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a20      	ldr	r2, [pc, #128]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005886:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d015      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005894:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a2:	4918      	ldr	r1, [pc, #96]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b2:	d105      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058b4:	4b13      	ldr	r3, [pc, #76]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4a12      	ldr	r2, [pc, #72]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d015      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058da:	490a      	ldr	r1, [pc, #40]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058ea:	d105      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ec:	4b05      	ldr	r3, [pc, #20]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4a04      	ldr	r2, [pc, #16]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80058f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40021000 	.word	0x40021000

08005908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e09d      	b.n	8005a56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800592a:	d009      	beq.n	8005940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	61da      	str	r2, [r3, #28]
 8005932:	e005      	b.n	8005940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fb f8d4 	bl	8000b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005976:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005980:	d902      	bls.n	8005988 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	e002      	b.n	800598e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800598c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005996:	d007      	beq.n	80059a8 <HAL_SPI_Init+0xa0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ea:	ea42 0103 	orr.w	r1, r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	f003 0204 	and.w	r2, r3, #4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a24:	ea42 0103 	orr.w	r1, r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e042      	b.n	8005af6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fb f8a0 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2224      	movs	r2, #36	@ 0x24
 8005a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fb25 	bl	80060f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f826 	bl	8005b00 <UART_SetConfig>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e01b      	b.n	8005af6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005acc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005adc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fba4 	bl	800623c <UART_CheckIdleState>
 8005af4:	4603      	mov	r3, r0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b04:	b08c      	sub	sp, #48	@ 0x30
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4baa      	ldr	r3, [pc, #680]	@ (8005dd8 <UART_SetConfig+0x2d8>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a9f      	ldr	r2, [pc, #636]	@ (8005ddc <UART_SetConfig+0x2dc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005b76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b80:	430b      	orrs	r3, r1
 8005b82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	f023 010f 	bic.w	r1, r3, #15
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a90      	ldr	r2, [pc, #576]	@ (8005de0 <UART_SetConfig+0x2e0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d125      	bne.n	8005bf0 <UART_SetConfig+0xf0>
 8005ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8005de4 <UART_SetConfig+0x2e4>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d81a      	bhi.n	8005be8 <UART_SetConfig+0xe8>
 8005bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <UART_SetConfig+0xb8>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bc9 	.word	0x08005bc9
 8005bbc:	08005bd9 	.word	0x08005bd9
 8005bc0:	08005bd1 	.word	0x08005bd1
 8005bc4:	08005be1 	.word	0x08005be1
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bce:	e116      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd6:	e112      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bde:	e10e      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be6:	e10a      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bee:	e106      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a7c      	ldr	r2, [pc, #496]	@ (8005de8 <UART_SetConfig+0x2e8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d138      	bne.n	8005c6c <UART_SetConfig+0x16c>
 8005bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8005de4 <UART_SetConfig+0x2e4>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c00:	f003 030c 	and.w	r3, r3, #12
 8005c04:	2b0c      	cmp	r3, #12
 8005c06:	d82d      	bhi.n	8005c64 <UART_SetConfig+0x164>
 8005c08:	a201      	add	r2, pc, #4	@ (adr r2, 8005c10 <UART_SetConfig+0x110>)
 8005c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0e:	bf00      	nop
 8005c10:	08005c45 	.word	0x08005c45
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005c65 	.word	0x08005c65
 8005c20:	08005c55 	.word	0x08005c55
 8005c24:	08005c65 	.word	0x08005c65
 8005c28:	08005c65 	.word	0x08005c65
 8005c2c:	08005c65 	.word	0x08005c65
 8005c30:	08005c4d 	.word	0x08005c4d
 8005c34:	08005c65 	.word	0x08005c65
 8005c38:	08005c65 	.word	0x08005c65
 8005c3c:	08005c65 	.word	0x08005c65
 8005c40:	08005c5d 	.word	0x08005c5d
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4a:	e0d8      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c52:	e0d4      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005c54:	2304      	movs	r3, #4
 8005c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c5a:	e0d0      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c62:	e0cc      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005c64:	2310      	movs	r3, #16
 8005c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c6a:	e0c8      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a5e      	ldr	r2, [pc, #376]	@ (8005dec <UART_SetConfig+0x2ec>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d125      	bne.n	8005cc2 <UART_SetConfig+0x1c2>
 8005c76:	4b5b      	ldr	r3, [pc, #364]	@ (8005de4 <UART_SetConfig+0x2e4>)
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c80:	2b30      	cmp	r3, #48	@ 0x30
 8005c82:	d016      	beq.n	8005cb2 <UART_SetConfig+0x1b2>
 8005c84:	2b30      	cmp	r3, #48	@ 0x30
 8005c86:	d818      	bhi.n	8005cba <UART_SetConfig+0x1ba>
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d00a      	beq.n	8005ca2 <UART_SetConfig+0x1a2>
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d814      	bhi.n	8005cba <UART_SetConfig+0x1ba>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <UART_SetConfig+0x19a>
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d008      	beq.n	8005caa <UART_SetConfig+0x1aa>
 8005c98:	e00f      	b.n	8005cba <UART_SetConfig+0x1ba>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca0:	e0ad      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca8:	e0a9      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005caa:	2304      	movs	r3, #4
 8005cac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cb0:	e0a5      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cb8:	e0a1      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005cba:	2310      	movs	r3, #16
 8005cbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cc0:	e09d      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a4a      	ldr	r2, [pc, #296]	@ (8005df0 <UART_SetConfig+0x2f0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d125      	bne.n	8005d18 <UART_SetConfig+0x218>
 8005ccc:	4b45      	ldr	r3, [pc, #276]	@ (8005de4 <UART_SetConfig+0x2e4>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005cd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cd8:	d016      	beq.n	8005d08 <UART_SetConfig+0x208>
 8005cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cdc:	d818      	bhi.n	8005d10 <UART_SetConfig+0x210>
 8005cde:	2b80      	cmp	r3, #128	@ 0x80
 8005ce0:	d00a      	beq.n	8005cf8 <UART_SetConfig+0x1f8>
 8005ce2:	2b80      	cmp	r3, #128	@ 0x80
 8005ce4:	d814      	bhi.n	8005d10 <UART_SetConfig+0x210>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <UART_SetConfig+0x1f0>
 8005cea:	2b40      	cmp	r3, #64	@ 0x40
 8005cec:	d008      	beq.n	8005d00 <UART_SetConfig+0x200>
 8005cee:	e00f      	b.n	8005d10 <UART_SetConfig+0x210>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf6:	e082      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cfe:	e07e      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d06:	e07a      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d0e:	e076      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d16:	e072      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a35      	ldr	r2, [pc, #212]	@ (8005df4 <UART_SetConfig+0x2f4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d12a      	bne.n	8005d78 <UART_SetConfig+0x278>
 8005d22:	4b30      	ldr	r3, [pc, #192]	@ (8005de4 <UART_SetConfig+0x2e4>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d30:	d01a      	beq.n	8005d68 <UART_SetConfig+0x268>
 8005d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d36:	d81b      	bhi.n	8005d70 <UART_SetConfig+0x270>
 8005d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d3c:	d00c      	beq.n	8005d58 <UART_SetConfig+0x258>
 8005d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d42:	d815      	bhi.n	8005d70 <UART_SetConfig+0x270>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <UART_SetConfig+0x250>
 8005d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d4c:	d008      	beq.n	8005d60 <UART_SetConfig+0x260>
 8005d4e:	e00f      	b.n	8005d70 <UART_SetConfig+0x270>
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d56:	e052      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5e:	e04e      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d66:	e04a      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6e:	e046      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d76:	e042      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	@ (8005ddc <UART_SetConfig+0x2dc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d13a      	bne.n	8005df8 <UART_SetConfig+0x2f8>
 8005d82:	4b18      	ldr	r3, [pc, #96]	@ (8005de4 <UART_SetConfig+0x2e4>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d90:	d01a      	beq.n	8005dc8 <UART_SetConfig+0x2c8>
 8005d92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d96:	d81b      	bhi.n	8005dd0 <UART_SetConfig+0x2d0>
 8005d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d9c:	d00c      	beq.n	8005db8 <UART_SetConfig+0x2b8>
 8005d9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da2:	d815      	bhi.n	8005dd0 <UART_SetConfig+0x2d0>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <UART_SetConfig+0x2b0>
 8005da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dac:	d008      	beq.n	8005dc0 <UART_SetConfig+0x2c0>
 8005dae:	e00f      	b.n	8005dd0 <UART_SetConfig+0x2d0>
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db6:	e022      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005db8:	2302      	movs	r3, #2
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dbe:	e01e      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc6:	e01a      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005dc8:	2308      	movs	r3, #8
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dce:	e016      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd6:	e012      	b.n	8005dfe <UART_SetConfig+0x2fe>
 8005dd8:	cfff69f3 	.word	0xcfff69f3
 8005ddc:	40008000 	.word	0x40008000
 8005de0:	40013800 	.word	0x40013800
 8005de4:	40021000 	.word	0x40021000
 8005de8:	40004400 	.word	0x40004400
 8005dec:	40004800 	.word	0x40004800
 8005df0:	40004c00 	.word	0x40004c00
 8005df4:	40005000 	.word	0x40005000
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4aae      	ldr	r2, [pc, #696]	@ (80060bc <UART_SetConfig+0x5bc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	f040 8097 	bne.w	8005f38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d823      	bhi.n	8005e5a <UART_SetConfig+0x35a>
 8005e12:	a201      	add	r2, pc, #4	@ (adr r2, 8005e18 <UART_SetConfig+0x318>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e3d 	.word	0x08005e3d
 8005e1c:	08005e5b 	.word	0x08005e5b
 8005e20:	08005e45 	.word	0x08005e45
 8005e24:	08005e5b 	.word	0x08005e5b
 8005e28:	08005e4b 	.word	0x08005e4b
 8005e2c:	08005e5b 	.word	0x08005e5b
 8005e30:	08005e5b 	.word	0x08005e5b
 8005e34:	08005e5b 	.word	0x08005e5b
 8005e38:	08005e53 	.word	0x08005e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e3c:	f7ff faa4 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8005e40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e42:	e010      	b.n	8005e66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e44:	4b9e      	ldr	r3, [pc, #632]	@ (80060c0 <UART_SetConfig+0x5c0>)
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e48:	e00d      	b.n	8005e66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4a:	f7ff fa2f 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8005e4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e50:	e009      	b.n	8005e66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e58:	e005      	b.n	8005e66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8130 	beq.w	80060ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	4a94      	ldr	r2, [pc, #592]	@ (80060c4 <UART_SetConfig+0x5c4>)
 8005e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d305      	bcc.n	8005e9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d903      	bls.n	8005ea6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ea4:	e113      	b.n	80060ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	60fa      	str	r2, [r7, #12]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	4a84      	ldr	r2, [pc, #528]	@ (80060c4 <UART_SetConfig+0x5c4>)
 8005eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2200      	movs	r2, #0
 8005ebc:	603b      	str	r3, [r7, #0]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ec4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ec8:	f7fa fa02 	bl	80002d0 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	020b      	lsls	r3, r1, #8
 8005ede:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ee2:	0202      	lsls	r2, r0, #8
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	6849      	ldr	r1, [r1, #4]
 8005ee8:	0849      	lsrs	r1, r1, #1
 8005eea:	2000      	movs	r0, #0
 8005eec:	460c      	mov	r4, r1
 8005eee:	4605      	mov	r5, r0
 8005ef0:	eb12 0804 	adds.w	r8, r2, r4
 8005ef4:	eb43 0905 	adc.w	r9, r3, r5
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	469a      	mov	sl, r3
 8005f00:	4693      	mov	fp, r2
 8005f02:	4652      	mov	r2, sl
 8005f04:	465b      	mov	r3, fp
 8005f06:	4640      	mov	r0, r8
 8005f08:	4649      	mov	r1, r9
 8005f0a:	f7fa f9e1 	bl	80002d0 <__aeabi_uldivmod>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4613      	mov	r3, r2
 8005f14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f1c:	d308      	bcc.n	8005f30 <UART_SetConfig+0x430>
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f24:	d204      	bcs.n	8005f30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	60da      	str	r2, [r3, #12]
 8005f2e:	e0ce      	b.n	80060ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f36:	e0ca      	b.n	80060ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f40:	d166      	bne.n	8006010 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005f42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d827      	bhi.n	8005f9a <UART_SetConfig+0x49a>
 8005f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <UART_SetConfig+0x450>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	08005f9b 	.word	0x08005f9b
 8005f60:	08005f8b 	.word	0x08005f8b
 8005f64:	08005f9b 	.word	0x08005f9b
 8005f68:	08005f9b 	.word	0x08005f9b
 8005f6c:	08005f9b 	.word	0x08005f9b
 8005f70:	08005f93 	.word	0x08005f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f74:	f7ff fa08 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8005f78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f7a:	e014      	b.n	8005fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f7c:	f7ff fa1a 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 8005f80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f82:	e010      	b.n	8005fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f84:	4b4e      	ldr	r3, [pc, #312]	@ (80060c0 <UART_SetConfig+0x5c0>)
 8005f86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f88:	e00d      	b.n	8005fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8a:	f7ff f98f 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8005f8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f90:	e009      	b.n	8005fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f98:	e005      	b.n	8005fa6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8090 	beq.w	80060ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	4a44      	ldr	r2, [pc, #272]	@ (80060c4 <UART_SetConfig+0x5c4>)
 8005fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc0:	005a      	lsls	r2, r3, #1
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	441a      	add	r2, r3
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	d916      	bls.n	8006008 <UART_SetConfig+0x508>
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe0:	d212      	bcs.n	8006008 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f023 030f 	bic.w	r3, r3, #15
 8005fea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	8bfb      	ldrh	r3, [r7, #30]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	8bfa      	ldrh	r2, [r7, #30]
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	e062      	b.n	80060ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800600e:	e05e      	b.n	80060ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006010:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006014:	2b08      	cmp	r3, #8
 8006016:	d828      	bhi.n	800606a <UART_SetConfig+0x56a>
 8006018:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <UART_SetConfig+0x520>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006045 	.word	0x08006045
 8006024:	0800604d 	.word	0x0800604d
 8006028:	08006055 	.word	0x08006055
 800602c:	0800606b 	.word	0x0800606b
 8006030:	0800605b 	.word	0x0800605b
 8006034:	0800606b 	.word	0x0800606b
 8006038:	0800606b 	.word	0x0800606b
 800603c:	0800606b 	.word	0x0800606b
 8006040:	08006063 	.word	0x08006063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006044:	f7ff f9a0 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8006048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800604a:	e014      	b.n	8006076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800604c:	f7ff f9b2 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 8006050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006052:	e010      	b.n	8006076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006054:	4b1a      	ldr	r3, [pc, #104]	@ (80060c0 <UART_SetConfig+0x5c0>)
 8006056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006058:	e00d      	b.n	8006076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800605a:	f7ff f927 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 800605e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006060:	e009      	b.n	8006076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006068:	e005      	b.n	8006076 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006074:	bf00      	nop
    }

    if (pclk != 0U)
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	d028      	beq.n	80060ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	4a10      	ldr	r2, [pc, #64]	@ (80060c4 <UART_SetConfig+0x5c4>)
 8006082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006086:	461a      	mov	r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	fbb3 f2f2 	udiv	r2, r3, r2
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	441a      	add	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	2b0f      	cmp	r3, #15
 80060a4:	d910      	bls.n	80060c8 <UART_SetConfig+0x5c8>
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ac:	d20c      	bcs.n	80060c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60da      	str	r2, [r3, #12]
 80060b8:	e009      	b.n	80060ce <UART_SetConfig+0x5ce>
 80060ba:	bf00      	nop
 80060bc:	40008000 	.word	0x40008000
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	08007b20 	.word	0x08007b20
      }
      else
      {
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2201      	movs	r2, #1
 80060da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2200      	movs	r2, #0
 80060e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2200      	movs	r2, #0
 80060e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3730      	adds	r7, #48	@ 0x30
 80060f2:	46bd      	mov	sp, r7
 80060f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080060f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01a      	beq.n	800620e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061f6:	d10a      	bne.n	800620e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	605a      	str	r2, [r3, #4]
  }
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b098      	sub	sp, #96	@ 0x60
 8006240:	af02      	add	r7, sp, #8
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800624c:	f7fe f880 	bl	8004350 <HAL_GetTick>
 8006250:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b08      	cmp	r3, #8
 800625e:	d12f      	bne.n	80062c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006260:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006268:	2200      	movs	r2, #0
 800626a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f88e 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d022      	beq.n	80062c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800628e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006298:	647b      	str	r3, [r7, #68]	@ 0x44
 800629a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800629e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e6      	bne.n	800627a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e063      	b.n	8006388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d149      	bne.n	8006362 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d6:	2200      	movs	r2, #0
 80062d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f857 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d03c      	beq.n	8006362 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	623b      	str	r3, [r7, #32]
   return(result);
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006306:	633b      	str	r3, [r7, #48]	@ 0x30
 8006308:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800630c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e6      	bne.n	80062e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	60fb      	str	r3, [r7, #12]
   return(result);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800633a:	61fa      	str	r2, [r7, #28]
 800633c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	69b9      	ldr	r1, [r7, #24]
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	617b      	str	r3, [r7, #20]
   return(result);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e5      	bne.n	800631a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e012      	b.n	8006388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3758      	adds	r7, #88	@ 0x58
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	4613      	mov	r3, r2
 800639e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a0:	e04f      	b.n	8006442 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d04b      	beq.n	8006442 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063aa:	f7fd ffd1 	bl	8004350 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d302      	bcc.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e04e      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d037      	beq.n	8006442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b80      	cmp	r3, #128	@ 0x80
 80063d6:	d034      	beq.n	8006442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b40      	cmp	r3, #64	@ 0x40
 80063dc:	d031      	beq.n	8006442 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d110      	bne.n	800640e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2208      	movs	r2, #8
 80063f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f838 	bl	800646a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2208      	movs	r2, #8
 80063fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e029      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800641c:	d111      	bne.n	8006442 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f81e 	bl	800646a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e00f      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69da      	ldr	r2, [r3, #28]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4013      	ands	r3, r2
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	429a      	cmp	r2, r3
 8006450:	bf0c      	ite	eq
 8006452:	2301      	moveq	r3, #1
 8006454:	2300      	movne	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	429a      	cmp	r2, r3
 800645e:	d0a0      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800646a:	b480      	push	{r7}
 800646c:	b095      	sub	sp, #84	@ 0x54
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006490:	643b      	str	r3, [r7, #64]	@ 0x40
 8006492:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006496:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3308      	adds	r3, #8
 80064aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e3      	bne.n	80064a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d118      	bne.n	8006516 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f023 0310 	bic.w	r3, r3, #16
 80064f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6979      	ldr	r1, [r7, #20]
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	613b      	str	r3, [r7, #16]
   return(result);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e6      	bne.n	80064e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800652a:	bf00      	nop
 800652c:	3754      	adds	r7, #84	@ 0x54
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_UARTEx_DisableFifoMode+0x16>
 8006548:	2302      	movs	r3, #2
 800654a:	e027      	b.n	800659c <HAL_UARTEx_DisableFifoMode+0x66>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2224      	movs	r2, #36	@ 0x24
 8006558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0201 	bic.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800657a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065bc:	2302      	movs	r3, #2
 80065be:	e02d      	b.n	800661c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2224      	movs	r2, #36	@ 0x24
 80065cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f84f 	bl	80066a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006638:	2302      	movs	r3, #2
 800663a:	e02d      	b.n	8006698 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	@ 0x24
 8006648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0201 	bic.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f811 	bl	80066a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d108      	bne.n	80066c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066c0:	e031      	b.n	8006726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066c2:	2308      	movs	r3, #8
 80066c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066c6:	2308      	movs	r3, #8
 80066c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	0e5b      	lsrs	r3, r3, #25
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	0f5b      	lsrs	r3, r3, #29
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	7b3a      	ldrb	r2, [r7, #12]
 80066ee:	4911      	ldr	r1, [pc, #68]	@ (8006734 <UARTEx_SetNbDataToProcess+0x94>)
 80066f0:	5c8a      	ldrb	r2, [r1, r2]
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066f6:	7b3a      	ldrb	r2, [r7, #12]
 80066f8:	490f      	ldr	r1, [pc, #60]	@ (8006738 <UARTEx_SetNbDataToProcess+0x98>)
 80066fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	7b7a      	ldrb	r2, [r7, #13]
 800670c:	4909      	ldr	r1, [pc, #36]	@ (8006734 <UARTEx_SetNbDataToProcess+0x94>)
 800670e:	5c8a      	ldrb	r2, [r1, r2]
 8006710:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006714:	7b7a      	ldrb	r2, [r7, #13]
 8006716:	4908      	ldr	r1, [pc, #32]	@ (8006738 <UARTEx_SetNbDataToProcess+0x98>)
 8006718:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800671a:	fb93 f3f2 	sdiv	r3, r3, r2
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	08007b38 	.word	0x08007b38
 8006738:	08007b40 	.word	0x08007b40

0800673c <std>:
 800673c:	2300      	movs	r3, #0
 800673e:	b510      	push	{r4, lr}
 8006740:	4604      	mov	r4, r0
 8006742:	e9c0 3300 	strd	r3, r3, [r0]
 8006746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800674a:	6083      	str	r3, [r0, #8]
 800674c:	8181      	strh	r1, [r0, #12]
 800674e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006750:	81c2      	strh	r2, [r0, #14]
 8006752:	6183      	str	r3, [r0, #24]
 8006754:	4619      	mov	r1, r3
 8006756:	2208      	movs	r2, #8
 8006758:	305c      	adds	r0, #92	@ 0x5c
 800675a:	f000 fab5 	bl	8006cc8 <memset>
 800675e:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <std+0x58>)
 8006760:	6263      	str	r3, [r4, #36]	@ 0x24
 8006762:	4b0d      	ldr	r3, [pc, #52]	@ (8006798 <std+0x5c>)
 8006764:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006766:	4b0d      	ldr	r3, [pc, #52]	@ (800679c <std+0x60>)
 8006768:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800676a:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <std+0x64>)
 800676c:	6323      	str	r3, [r4, #48]	@ 0x30
 800676e:	4b0d      	ldr	r3, [pc, #52]	@ (80067a4 <std+0x68>)
 8006770:	6224      	str	r4, [r4, #32]
 8006772:	429c      	cmp	r4, r3
 8006774:	d006      	beq.n	8006784 <std+0x48>
 8006776:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800677a:	4294      	cmp	r4, r2
 800677c:	d002      	beq.n	8006784 <std+0x48>
 800677e:	33d0      	adds	r3, #208	@ 0xd0
 8006780:	429c      	cmp	r4, r3
 8006782:	d105      	bne.n	8006790 <std+0x54>
 8006784:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800678c:	f000 bb26 	b.w	8006ddc <__retarget_lock_init_recursive>
 8006790:	bd10      	pop	{r4, pc}
 8006792:	bf00      	nop
 8006794:	08006b19 	.word	0x08006b19
 8006798:	08006b3b 	.word	0x08006b3b
 800679c:	08006b73 	.word	0x08006b73
 80067a0:	08006b97 	.word	0x08006b97
 80067a4:	200004e0 	.word	0x200004e0

080067a8 <stdio_exit_handler>:
 80067a8:	4a02      	ldr	r2, [pc, #8]	@ (80067b4 <stdio_exit_handler+0xc>)
 80067aa:	4903      	ldr	r1, [pc, #12]	@ (80067b8 <stdio_exit_handler+0x10>)
 80067ac:	4803      	ldr	r0, [pc, #12]	@ (80067bc <stdio_exit_handler+0x14>)
 80067ae:	f000 b869 	b.w	8006884 <_fwalk_sglue>
 80067b2:	bf00      	nop
 80067b4:	200000c4 	.word	0x200000c4
 80067b8:	080076a9 	.word	0x080076a9
 80067bc:	200000d4 	.word	0x200000d4

080067c0 <cleanup_stdio>:
 80067c0:	6841      	ldr	r1, [r0, #4]
 80067c2:	4b0c      	ldr	r3, [pc, #48]	@ (80067f4 <cleanup_stdio+0x34>)
 80067c4:	4299      	cmp	r1, r3
 80067c6:	b510      	push	{r4, lr}
 80067c8:	4604      	mov	r4, r0
 80067ca:	d001      	beq.n	80067d0 <cleanup_stdio+0x10>
 80067cc:	f000 ff6c 	bl	80076a8 <_fflush_r>
 80067d0:	68a1      	ldr	r1, [r4, #8]
 80067d2:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <cleanup_stdio+0x38>)
 80067d4:	4299      	cmp	r1, r3
 80067d6:	d002      	beq.n	80067de <cleanup_stdio+0x1e>
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 ff65 	bl	80076a8 <_fflush_r>
 80067de:	68e1      	ldr	r1, [r4, #12]
 80067e0:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <cleanup_stdio+0x3c>)
 80067e2:	4299      	cmp	r1, r3
 80067e4:	d004      	beq.n	80067f0 <cleanup_stdio+0x30>
 80067e6:	4620      	mov	r0, r4
 80067e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ec:	f000 bf5c 	b.w	80076a8 <_fflush_r>
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	bf00      	nop
 80067f4:	200004e0 	.word	0x200004e0
 80067f8:	20000548 	.word	0x20000548
 80067fc:	200005b0 	.word	0x200005b0

08006800 <global_stdio_init.part.0>:
 8006800:	b510      	push	{r4, lr}
 8006802:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <global_stdio_init.part.0+0x30>)
 8006804:	4c0b      	ldr	r4, [pc, #44]	@ (8006834 <global_stdio_init.part.0+0x34>)
 8006806:	4a0c      	ldr	r2, [pc, #48]	@ (8006838 <global_stdio_init.part.0+0x38>)
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	4620      	mov	r0, r4
 800680c:	2200      	movs	r2, #0
 800680e:	2104      	movs	r1, #4
 8006810:	f7ff ff94 	bl	800673c <std>
 8006814:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006818:	2201      	movs	r2, #1
 800681a:	2109      	movs	r1, #9
 800681c:	f7ff ff8e 	bl	800673c <std>
 8006820:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006824:	2202      	movs	r2, #2
 8006826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682a:	2112      	movs	r1, #18
 800682c:	f7ff bf86 	b.w	800673c <std>
 8006830:	20000618 	.word	0x20000618
 8006834:	200004e0 	.word	0x200004e0
 8006838:	080067a9 	.word	0x080067a9

0800683c <__sfp_lock_acquire>:
 800683c:	4801      	ldr	r0, [pc, #4]	@ (8006844 <__sfp_lock_acquire+0x8>)
 800683e:	f000 bace 	b.w	8006dde <__retarget_lock_acquire_recursive>
 8006842:	bf00      	nop
 8006844:	20000621 	.word	0x20000621

08006848 <__sfp_lock_release>:
 8006848:	4801      	ldr	r0, [pc, #4]	@ (8006850 <__sfp_lock_release+0x8>)
 800684a:	f000 bac9 	b.w	8006de0 <__retarget_lock_release_recursive>
 800684e:	bf00      	nop
 8006850:	20000621 	.word	0x20000621

08006854 <__sinit>:
 8006854:	b510      	push	{r4, lr}
 8006856:	4604      	mov	r4, r0
 8006858:	f7ff fff0 	bl	800683c <__sfp_lock_acquire>
 800685c:	6a23      	ldr	r3, [r4, #32]
 800685e:	b11b      	cbz	r3, 8006868 <__sinit+0x14>
 8006860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006864:	f7ff bff0 	b.w	8006848 <__sfp_lock_release>
 8006868:	4b04      	ldr	r3, [pc, #16]	@ (800687c <__sinit+0x28>)
 800686a:	6223      	str	r3, [r4, #32]
 800686c:	4b04      	ldr	r3, [pc, #16]	@ (8006880 <__sinit+0x2c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1f5      	bne.n	8006860 <__sinit+0xc>
 8006874:	f7ff ffc4 	bl	8006800 <global_stdio_init.part.0>
 8006878:	e7f2      	b.n	8006860 <__sinit+0xc>
 800687a:	bf00      	nop
 800687c:	080067c1 	.word	0x080067c1
 8006880:	20000618 	.word	0x20000618

08006884 <_fwalk_sglue>:
 8006884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006888:	4607      	mov	r7, r0
 800688a:	4688      	mov	r8, r1
 800688c:	4614      	mov	r4, r2
 800688e:	2600      	movs	r6, #0
 8006890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006894:	f1b9 0901 	subs.w	r9, r9, #1
 8006898:	d505      	bpl.n	80068a6 <_fwalk_sglue+0x22>
 800689a:	6824      	ldr	r4, [r4, #0]
 800689c:	2c00      	cmp	r4, #0
 800689e:	d1f7      	bne.n	8006890 <_fwalk_sglue+0xc>
 80068a0:	4630      	mov	r0, r6
 80068a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068a6:	89ab      	ldrh	r3, [r5, #12]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d907      	bls.n	80068bc <_fwalk_sglue+0x38>
 80068ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068b0:	3301      	adds	r3, #1
 80068b2:	d003      	beq.n	80068bc <_fwalk_sglue+0x38>
 80068b4:	4629      	mov	r1, r5
 80068b6:	4638      	mov	r0, r7
 80068b8:	47c0      	blx	r8
 80068ba:	4306      	orrs	r6, r0
 80068bc:	3568      	adds	r5, #104	@ 0x68
 80068be:	e7e9      	b.n	8006894 <_fwalk_sglue+0x10>

080068c0 <iprintf>:
 80068c0:	b40f      	push	{r0, r1, r2, r3}
 80068c2:	b507      	push	{r0, r1, r2, lr}
 80068c4:	4906      	ldr	r1, [pc, #24]	@ (80068e0 <iprintf+0x20>)
 80068c6:	ab04      	add	r3, sp, #16
 80068c8:	6808      	ldr	r0, [r1, #0]
 80068ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ce:	6881      	ldr	r1, [r0, #8]
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	f000 fbbf 	bl	8007054 <_vfiprintf_r>
 80068d6:	b003      	add	sp, #12
 80068d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80068dc:	b004      	add	sp, #16
 80068de:	4770      	bx	lr
 80068e0:	200000d0 	.word	0x200000d0

080068e4 <_puts_r>:
 80068e4:	6a03      	ldr	r3, [r0, #32]
 80068e6:	b570      	push	{r4, r5, r6, lr}
 80068e8:	6884      	ldr	r4, [r0, #8]
 80068ea:	4605      	mov	r5, r0
 80068ec:	460e      	mov	r6, r1
 80068ee:	b90b      	cbnz	r3, 80068f4 <_puts_r+0x10>
 80068f0:	f7ff ffb0 	bl	8006854 <__sinit>
 80068f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068f6:	07db      	lsls	r3, r3, #31
 80068f8:	d405      	bmi.n	8006906 <_puts_r+0x22>
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	0598      	lsls	r0, r3, #22
 80068fe:	d402      	bmi.n	8006906 <_puts_r+0x22>
 8006900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006902:	f000 fa6c 	bl	8006dde <__retarget_lock_acquire_recursive>
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	0719      	lsls	r1, r3, #28
 800690a:	d502      	bpl.n	8006912 <_puts_r+0x2e>
 800690c:	6923      	ldr	r3, [r4, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d135      	bne.n	800697e <_puts_r+0x9a>
 8006912:	4621      	mov	r1, r4
 8006914:	4628      	mov	r0, r5
 8006916:	f000 f981 	bl	8006c1c <__swsetup_r>
 800691a:	b380      	cbz	r0, 800697e <_puts_r+0x9a>
 800691c:	f04f 35ff 	mov.w	r5, #4294967295
 8006920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006922:	07da      	lsls	r2, r3, #31
 8006924:	d405      	bmi.n	8006932 <_puts_r+0x4e>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	059b      	lsls	r3, r3, #22
 800692a:	d402      	bmi.n	8006932 <_puts_r+0x4e>
 800692c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800692e:	f000 fa57 	bl	8006de0 <__retarget_lock_release_recursive>
 8006932:	4628      	mov	r0, r5
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	2b00      	cmp	r3, #0
 8006938:	da04      	bge.n	8006944 <_puts_r+0x60>
 800693a:	69a2      	ldr	r2, [r4, #24]
 800693c:	429a      	cmp	r2, r3
 800693e:	dc17      	bgt.n	8006970 <_puts_r+0x8c>
 8006940:	290a      	cmp	r1, #10
 8006942:	d015      	beq.n	8006970 <_puts_r+0x8c>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	6022      	str	r2, [r4, #0]
 800694a:	7019      	strb	r1, [r3, #0]
 800694c:	68a3      	ldr	r3, [r4, #8]
 800694e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006952:	3b01      	subs	r3, #1
 8006954:	60a3      	str	r3, [r4, #8]
 8006956:	2900      	cmp	r1, #0
 8006958:	d1ed      	bne.n	8006936 <_puts_r+0x52>
 800695a:	2b00      	cmp	r3, #0
 800695c:	da11      	bge.n	8006982 <_puts_r+0x9e>
 800695e:	4622      	mov	r2, r4
 8006960:	210a      	movs	r1, #10
 8006962:	4628      	mov	r0, r5
 8006964:	f000 f91b 	bl	8006b9e <__swbuf_r>
 8006968:	3001      	adds	r0, #1
 800696a:	d0d7      	beq.n	800691c <_puts_r+0x38>
 800696c:	250a      	movs	r5, #10
 800696e:	e7d7      	b.n	8006920 <_puts_r+0x3c>
 8006970:	4622      	mov	r2, r4
 8006972:	4628      	mov	r0, r5
 8006974:	f000 f913 	bl	8006b9e <__swbuf_r>
 8006978:	3001      	adds	r0, #1
 800697a:	d1e7      	bne.n	800694c <_puts_r+0x68>
 800697c:	e7ce      	b.n	800691c <_puts_r+0x38>
 800697e:	3e01      	subs	r6, #1
 8006980:	e7e4      	b.n	800694c <_puts_r+0x68>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	6022      	str	r2, [r4, #0]
 8006988:	220a      	movs	r2, #10
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e7ee      	b.n	800696c <_puts_r+0x88>
	...

08006990 <puts>:
 8006990:	4b02      	ldr	r3, [pc, #8]	@ (800699c <puts+0xc>)
 8006992:	4601      	mov	r1, r0
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	f7ff bfa5 	b.w	80068e4 <_puts_r>
 800699a:	bf00      	nop
 800699c:	200000d0 	.word	0x200000d0

080069a0 <setbuf>:
 80069a0:	fab1 f281 	clz	r2, r1
 80069a4:	0952      	lsrs	r2, r2, #5
 80069a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069aa:	0052      	lsls	r2, r2, #1
 80069ac:	f000 b800 	b.w	80069b0 <setvbuf>

080069b0 <setvbuf>:
 80069b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	461d      	mov	r5, r3
 80069b6:	4b57      	ldr	r3, [pc, #348]	@ (8006b14 <setvbuf+0x164>)
 80069b8:	681f      	ldr	r7, [r3, #0]
 80069ba:	4604      	mov	r4, r0
 80069bc:	460e      	mov	r6, r1
 80069be:	4690      	mov	r8, r2
 80069c0:	b127      	cbz	r7, 80069cc <setvbuf+0x1c>
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	b913      	cbnz	r3, 80069cc <setvbuf+0x1c>
 80069c6:	4638      	mov	r0, r7
 80069c8:	f7ff ff44 	bl	8006854 <__sinit>
 80069cc:	f1b8 0f02 	cmp.w	r8, #2
 80069d0:	d006      	beq.n	80069e0 <setvbuf+0x30>
 80069d2:	f1b8 0f01 	cmp.w	r8, #1
 80069d6:	f200 809a 	bhi.w	8006b0e <setvbuf+0x15e>
 80069da:	2d00      	cmp	r5, #0
 80069dc:	f2c0 8097 	blt.w	8006b0e <setvbuf+0x15e>
 80069e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069e2:	07d9      	lsls	r1, r3, #31
 80069e4:	d405      	bmi.n	80069f2 <setvbuf+0x42>
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	059a      	lsls	r2, r3, #22
 80069ea:	d402      	bmi.n	80069f2 <setvbuf+0x42>
 80069ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ee:	f000 f9f6 	bl	8006dde <__retarget_lock_acquire_recursive>
 80069f2:	4621      	mov	r1, r4
 80069f4:	4638      	mov	r0, r7
 80069f6:	f000 fe57 	bl	80076a8 <_fflush_r>
 80069fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069fc:	b141      	cbz	r1, 8006a10 <setvbuf+0x60>
 80069fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a02:	4299      	cmp	r1, r3
 8006a04:	d002      	beq.n	8006a0c <setvbuf+0x5c>
 8006a06:	4638      	mov	r0, r7
 8006a08:	f000 f9fa 	bl	8006e00 <_free_r>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a10:	2300      	movs	r3, #0
 8006a12:	61a3      	str	r3, [r4, #24]
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	061b      	lsls	r3, r3, #24
 8006a1a:	d503      	bpl.n	8006a24 <setvbuf+0x74>
 8006a1c:	6921      	ldr	r1, [r4, #16]
 8006a1e:	4638      	mov	r0, r7
 8006a20:	f000 f9ee 	bl	8006e00 <_free_r>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006a2a:	f023 0303 	bic.w	r3, r3, #3
 8006a2e:	f1b8 0f02 	cmp.w	r8, #2
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	d061      	beq.n	8006afa <setvbuf+0x14a>
 8006a36:	ab01      	add	r3, sp, #4
 8006a38:	466a      	mov	r2, sp
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f000 fe5b 	bl	80076f8 <__swhatbuf_r>
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	4318      	orrs	r0, r3
 8006a46:	81a0      	strh	r0, [r4, #12]
 8006a48:	bb2d      	cbnz	r5, 8006a96 <setvbuf+0xe6>
 8006a4a:	9d00      	ldr	r5, [sp, #0]
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 fa21 	bl	8006e94 <malloc>
 8006a52:	4606      	mov	r6, r0
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d152      	bne.n	8006afe <setvbuf+0x14e>
 8006a58:	f8dd 9000 	ldr.w	r9, [sp]
 8006a5c:	45a9      	cmp	r9, r5
 8006a5e:	d140      	bne.n	8006ae2 <setvbuf+0x132>
 8006a60:	f04f 35ff 	mov.w	r5, #4294967295
 8006a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a68:	f043 0202 	orr.w	r2, r3, #2
 8006a6c:	81a2      	strh	r2, [r4, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	60a2      	str	r2, [r4, #8]
 8006a72:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	6122      	str	r2, [r4, #16]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	6162      	str	r2, [r4, #20]
 8006a7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a80:	07d6      	lsls	r6, r2, #31
 8006a82:	d404      	bmi.n	8006a8e <setvbuf+0xde>
 8006a84:	0598      	lsls	r0, r3, #22
 8006a86:	d402      	bmi.n	8006a8e <setvbuf+0xde>
 8006a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a8a:	f000 f9a9 	bl	8006de0 <__retarget_lock_release_recursive>
 8006a8e:	4628      	mov	r0, r5
 8006a90:	b003      	add	sp, #12
 8006a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	d0d8      	beq.n	8006a4c <setvbuf+0x9c>
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	b913      	cbnz	r3, 8006aa4 <setvbuf+0xf4>
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	f7ff fed8 	bl	8006854 <__sinit>
 8006aa4:	f1b8 0f01 	cmp.w	r8, #1
 8006aa8:	bf08      	it	eq
 8006aaa:	89a3      	ldrheq	r3, [r4, #12]
 8006aac:	6026      	str	r6, [r4, #0]
 8006aae:	bf04      	itt	eq
 8006ab0:	f043 0301 	orreq.w	r3, r3, #1
 8006ab4:	81a3      	strheq	r3, [r4, #12]
 8006ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aba:	f013 0208 	ands.w	r2, r3, #8
 8006abe:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006ac2:	d01e      	beq.n	8006b02 <setvbuf+0x152>
 8006ac4:	07d9      	lsls	r1, r3, #31
 8006ac6:	bf41      	itttt	mi
 8006ac8:	2200      	movmi	r2, #0
 8006aca:	426d      	negmi	r5, r5
 8006acc:	60a2      	strmi	r2, [r4, #8]
 8006ace:	61a5      	strmi	r5, [r4, #24]
 8006ad0:	bf58      	it	pl
 8006ad2:	60a5      	strpl	r5, [r4, #8]
 8006ad4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ad6:	07d2      	lsls	r2, r2, #31
 8006ad8:	d401      	bmi.n	8006ade <setvbuf+0x12e>
 8006ada:	059b      	lsls	r3, r3, #22
 8006adc:	d513      	bpl.n	8006b06 <setvbuf+0x156>
 8006ade:	2500      	movs	r5, #0
 8006ae0:	e7d5      	b.n	8006a8e <setvbuf+0xde>
 8006ae2:	4648      	mov	r0, r9
 8006ae4:	f000 f9d6 	bl	8006e94 <malloc>
 8006ae8:	4606      	mov	r6, r0
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d0b8      	beq.n	8006a60 <setvbuf+0xb0>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af4:	81a3      	strh	r3, [r4, #12]
 8006af6:	464d      	mov	r5, r9
 8006af8:	e7cf      	b.n	8006a9a <setvbuf+0xea>
 8006afa:	2500      	movs	r5, #0
 8006afc:	e7b2      	b.n	8006a64 <setvbuf+0xb4>
 8006afe:	46a9      	mov	r9, r5
 8006b00:	e7f5      	b.n	8006aee <setvbuf+0x13e>
 8006b02:	60a2      	str	r2, [r4, #8]
 8006b04:	e7e6      	b.n	8006ad4 <setvbuf+0x124>
 8006b06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b08:	f000 f96a 	bl	8006de0 <__retarget_lock_release_recursive>
 8006b0c:	e7e7      	b.n	8006ade <setvbuf+0x12e>
 8006b0e:	f04f 35ff 	mov.w	r5, #4294967295
 8006b12:	e7bc      	b.n	8006a8e <setvbuf+0xde>
 8006b14:	200000d0 	.word	0x200000d0

08006b18 <__sread>:
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b20:	f000 f90e 	bl	8006d40 <_read_r>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	bfab      	itete	ge
 8006b28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b2c:	181b      	addge	r3, r3, r0
 8006b2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b32:	bfac      	ite	ge
 8006b34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b36:	81a3      	strhlt	r3, [r4, #12]
 8006b38:	bd10      	pop	{r4, pc}

08006b3a <__swrite>:
 8006b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3e:	461f      	mov	r7, r3
 8006b40:	898b      	ldrh	r3, [r1, #12]
 8006b42:	05db      	lsls	r3, r3, #23
 8006b44:	4605      	mov	r5, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	4616      	mov	r6, r2
 8006b4a:	d505      	bpl.n	8006b58 <__swrite+0x1e>
 8006b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b50:	2302      	movs	r3, #2
 8006b52:	2200      	movs	r2, #0
 8006b54:	f000 f8e2 	bl	8006d1c <_lseek_r>
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	4632      	mov	r2, r6
 8006b66:	463b      	mov	r3, r7
 8006b68:	4628      	mov	r0, r5
 8006b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6e:	f000 b8f9 	b.w	8006d64 <_write_r>

08006b72 <__sseek>:
 8006b72:	b510      	push	{r4, lr}
 8006b74:	460c      	mov	r4, r1
 8006b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b7a:	f000 f8cf 	bl	8006d1c <_lseek_r>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	bf15      	itete	ne
 8006b84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b8e:	81a3      	strheq	r3, [r4, #12]
 8006b90:	bf18      	it	ne
 8006b92:	81a3      	strhne	r3, [r4, #12]
 8006b94:	bd10      	pop	{r4, pc}

08006b96 <__sclose>:
 8006b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9a:	f000 b8af 	b.w	8006cfc <_close_r>

08006b9e <__swbuf_r>:
 8006b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba0:	460e      	mov	r6, r1
 8006ba2:	4614      	mov	r4, r2
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	b118      	cbz	r0, 8006bb0 <__swbuf_r+0x12>
 8006ba8:	6a03      	ldr	r3, [r0, #32]
 8006baa:	b90b      	cbnz	r3, 8006bb0 <__swbuf_r+0x12>
 8006bac:	f7ff fe52 	bl	8006854 <__sinit>
 8006bb0:	69a3      	ldr	r3, [r4, #24]
 8006bb2:	60a3      	str	r3, [r4, #8]
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	071a      	lsls	r2, r3, #28
 8006bb8:	d501      	bpl.n	8006bbe <__swbuf_r+0x20>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	b943      	cbnz	r3, 8006bd0 <__swbuf_r+0x32>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 f82b 	bl	8006c1c <__swsetup_r>
 8006bc6:	b118      	cbz	r0, 8006bd0 <__swbuf_r+0x32>
 8006bc8:	f04f 37ff 	mov.w	r7, #4294967295
 8006bcc:	4638      	mov	r0, r7
 8006bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	6922      	ldr	r2, [r4, #16]
 8006bd4:	1a98      	subs	r0, r3, r2
 8006bd6:	6963      	ldr	r3, [r4, #20]
 8006bd8:	b2f6      	uxtb	r6, r6
 8006bda:	4283      	cmp	r3, r0
 8006bdc:	4637      	mov	r7, r6
 8006bde:	dc05      	bgt.n	8006bec <__swbuf_r+0x4e>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 fd60 	bl	80076a8 <_fflush_r>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d1ed      	bne.n	8006bc8 <__swbuf_r+0x2a>
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	60a3      	str	r3, [r4, #8]
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	701e      	strb	r6, [r3, #0]
 8006bfa:	6962      	ldr	r2, [r4, #20]
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d004      	beq.n	8006c0c <__swbuf_r+0x6e>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	07db      	lsls	r3, r3, #31
 8006c06:	d5e1      	bpl.n	8006bcc <__swbuf_r+0x2e>
 8006c08:	2e0a      	cmp	r6, #10
 8006c0a:	d1df      	bne.n	8006bcc <__swbuf_r+0x2e>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fd4a 	bl	80076a8 <_fflush_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d0d9      	beq.n	8006bcc <__swbuf_r+0x2e>
 8006c18:	e7d6      	b.n	8006bc8 <__swbuf_r+0x2a>
	...

08006c1c <__swsetup_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4b29      	ldr	r3, [pc, #164]	@ (8006cc4 <__swsetup_r+0xa8>)
 8006c20:	4605      	mov	r5, r0
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	460c      	mov	r4, r1
 8006c26:	b118      	cbz	r0, 8006c30 <__swsetup_r+0x14>
 8006c28:	6a03      	ldr	r3, [r0, #32]
 8006c2a:	b90b      	cbnz	r3, 8006c30 <__swsetup_r+0x14>
 8006c2c:	f7ff fe12 	bl	8006854 <__sinit>
 8006c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c34:	0719      	lsls	r1, r3, #28
 8006c36:	d422      	bmi.n	8006c7e <__swsetup_r+0x62>
 8006c38:	06da      	lsls	r2, r3, #27
 8006c3a:	d407      	bmi.n	8006c4c <__swsetup_r+0x30>
 8006c3c:	2209      	movs	r2, #9
 8006c3e:	602a      	str	r2, [r5, #0]
 8006c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c44:	81a3      	strh	r3, [r4, #12]
 8006c46:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4a:	e033      	b.n	8006cb4 <__swsetup_r+0x98>
 8006c4c:	0758      	lsls	r0, r3, #29
 8006c4e:	d512      	bpl.n	8006c76 <__swsetup_r+0x5a>
 8006c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c52:	b141      	cbz	r1, 8006c66 <__swsetup_r+0x4a>
 8006c54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c58:	4299      	cmp	r1, r3
 8006c5a:	d002      	beq.n	8006c62 <__swsetup_r+0x46>
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 f8cf 	bl	8006e00 <_free_r>
 8006c62:	2300      	movs	r3, #0
 8006c64:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6063      	str	r3, [r4, #4]
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f043 0308 	orr.w	r3, r3, #8
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	b94b      	cbnz	r3, 8006c96 <__swsetup_r+0x7a>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c8c:	d003      	beq.n	8006c96 <__swsetup_r+0x7a>
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4628      	mov	r0, r5
 8006c92:	f000 fd57 	bl	8007744 <__smakebuf_r>
 8006c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c9a:	f013 0201 	ands.w	r2, r3, #1
 8006c9e:	d00a      	beq.n	8006cb6 <__swsetup_r+0x9a>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	60a2      	str	r2, [r4, #8]
 8006ca4:	6962      	ldr	r2, [r4, #20]
 8006ca6:	4252      	negs	r2, r2
 8006ca8:	61a2      	str	r2, [r4, #24]
 8006caa:	6922      	ldr	r2, [r4, #16]
 8006cac:	b942      	cbnz	r2, 8006cc0 <__swsetup_r+0xa4>
 8006cae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cb2:	d1c5      	bne.n	8006c40 <__swsetup_r+0x24>
 8006cb4:	bd38      	pop	{r3, r4, r5, pc}
 8006cb6:	0799      	lsls	r1, r3, #30
 8006cb8:	bf58      	it	pl
 8006cba:	6962      	ldrpl	r2, [r4, #20]
 8006cbc:	60a2      	str	r2, [r4, #8]
 8006cbe:	e7f4      	b.n	8006caa <__swsetup_r+0x8e>
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	e7f7      	b.n	8006cb4 <__swsetup_r+0x98>
 8006cc4:	200000d0 	.word	0x200000d0

08006cc8 <memset>:
 8006cc8:	4402      	add	r2, r0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d100      	bne.n	8006cd2 <memset+0xa>
 8006cd0:	4770      	bx	lr
 8006cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cd6:	e7f9      	b.n	8006ccc <memset+0x4>

08006cd8 <strncmp>:
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	b16a      	cbz	r2, 8006cf8 <strncmp+0x20>
 8006cdc:	3901      	subs	r1, #1
 8006cde:	1884      	adds	r4, r0, r2
 8006ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ce4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d103      	bne.n	8006cf4 <strncmp+0x1c>
 8006cec:	42a0      	cmp	r0, r4
 8006cee:	d001      	beq.n	8006cf4 <strncmp+0x1c>
 8006cf0:	2a00      	cmp	r2, #0
 8006cf2:	d1f5      	bne.n	8006ce0 <strncmp+0x8>
 8006cf4:	1ad0      	subs	r0, r2, r3
 8006cf6:	bd10      	pop	{r4, pc}
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	e7fc      	b.n	8006cf6 <strncmp+0x1e>

08006cfc <_close_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d06      	ldr	r5, [pc, #24]	@ (8006d18 <_close_r+0x1c>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	4608      	mov	r0, r1
 8006d06:	602b      	str	r3, [r5, #0]
 8006d08:	f7fa f827 	bl	8000d5a <_close>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_close_r+0x1a>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_close_r+0x1a>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	2000061c 	.word	0x2000061c

08006d1c <_lseek_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d07      	ldr	r5, [pc, #28]	@ (8006d3c <_lseek_r+0x20>)
 8006d20:	4604      	mov	r4, r0
 8006d22:	4608      	mov	r0, r1
 8006d24:	4611      	mov	r1, r2
 8006d26:	2200      	movs	r2, #0
 8006d28:	602a      	str	r2, [r5, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f7fa f83c 	bl	8000da8 <_lseek>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_lseek_r+0x1e>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_lseek_r+0x1e>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	2000061c 	.word	0x2000061c

08006d40 <_read_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d07      	ldr	r5, [pc, #28]	@ (8006d60 <_read_r+0x20>)
 8006d44:	4604      	mov	r4, r0
 8006d46:	4608      	mov	r0, r1
 8006d48:	4611      	mov	r1, r2
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	602a      	str	r2, [r5, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f7f9 ffca 	bl	8000ce8 <_read>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_read_r+0x1e>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_read_r+0x1e>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	2000061c 	.word	0x2000061c

08006d64 <_write_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4d07      	ldr	r5, [pc, #28]	@ (8006d84 <_write_r+0x20>)
 8006d68:	4604      	mov	r4, r0
 8006d6a:	4608      	mov	r0, r1
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	2200      	movs	r2, #0
 8006d70:	602a      	str	r2, [r5, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f7f9 ffd5 	bl	8000d22 <_write>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d102      	bne.n	8006d82 <_write_r+0x1e>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	b103      	cbz	r3, 8006d82 <_write_r+0x1e>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	2000061c 	.word	0x2000061c

08006d88 <__errno>:
 8006d88:	4b01      	ldr	r3, [pc, #4]	@ (8006d90 <__errno+0x8>)
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	200000d0 	.word	0x200000d0

08006d94 <__libc_init_array>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	4d0d      	ldr	r5, [pc, #52]	@ (8006dcc <__libc_init_array+0x38>)
 8006d98:	4c0d      	ldr	r4, [pc, #52]	@ (8006dd0 <__libc_init_array+0x3c>)
 8006d9a:	1b64      	subs	r4, r4, r5
 8006d9c:	10a4      	asrs	r4, r4, #2
 8006d9e:	2600      	movs	r6, #0
 8006da0:	42a6      	cmp	r6, r4
 8006da2:	d109      	bne.n	8006db8 <__libc_init_array+0x24>
 8006da4:	4d0b      	ldr	r5, [pc, #44]	@ (8006dd4 <__libc_init_array+0x40>)
 8006da6:	4c0c      	ldr	r4, [pc, #48]	@ (8006dd8 <__libc_init_array+0x44>)
 8006da8:	f000 fd3a 	bl	8007820 <_init>
 8006dac:	1b64      	subs	r4, r4, r5
 8006dae:	10a4      	asrs	r4, r4, #2
 8006db0:	2600      	movs	r6, #0
 8006db2:	42a6      	cmp	r6, r4
 8006db4:	d105      	bne.n	8006dc2 <__libc_init_array+0x2e>
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dbc:	4798      	blx	r3
 8006dbe:	3601      	adds	r6, #1
 8006dc0:	e7ee      	b.n	8006da0 <__libc_init_array+0xc>
 8006dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc6:	4798      	blx	r3
 8006dc8:	3601      	adds	r6, #1
 8006dca:	e7f2      	b.n	8006db2 <__libc_init_array+0x1e>
 8006dcc:	08007b84 	.word	0x08007b84
 8006dd0:	08007b84 	.word	0x08007b84
 8006dd4:	08007b84 	.word	0x08007b84
 8006dd8:	08007b88 	.word	0x08007b88

08006ddc <__retarget_lock_init_recursive>:
 8006ddc:	4770      	bx	lr

08006dde <__retarget_lock_acquire_recursive>:
 8006dde:	4770      	bx	lr

08006de0 <__retarget_lock_release_recursive>:
 8006de0:	4770      	bx	lr

08006de2 <memcpy>:
 8006de2:	440a      	add	r2, r1
 8006de4:	4291      	cmp	r1, r2
 8006de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dea:	d100      	bne.n	8006dee <memcpy+0xc>
 8006dec:	4770      	bx	lr
 8006dee:	b510      	push	{r4, lr}
 8006df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006df8:	4291      	cmp	r1, r2
 8006dfa:	d1f9      	bne.n	8006df0 <memcpy+0xe>
 8006dfc:	bd10      	pop	{r4, pc}
	...

08006e00 <_free_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4605      	mov	r5, r0
 8006e04:	2900      	cmp	r1, #0
 8006e06:	d041      	beq.n	8006e8c <_free_r+0x8c>
 8006e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0c:	1f0c      	subs	r4, r1, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfb8      	it	lt
 8006e12:	18e4      	addlt	r4, r4, r3
 8006e14:	f000 f8e8 	bl	8006fe8 <__malloc_lock>
 8006e18:	4a1d      	ldr	r2, [pc, #116]	@ (8006e90 <_free_r+0x90>)
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	b933      	cbnz	r3, 8006e2c <_free_r+0x2c>
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	6014      	str	r4, [r2, #0]
 8006e22:	4628      	mov	r0, r5
 8006e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e28:	f000 b8e4 	b.w	8006ff4 <__malloc_unlock>
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	d908      	bls.n	8006e42 <_free_r+0x42>
 8006e30:	6820      	ldr	r0, [r4, #0]
 8006e32:	1821      	adds	r1, r4, r0
 8006e34:	428b      	cmp	r3, r1
 8006e36:	bf01      	itttt	eq
 8006e38:	6819      	ldreq	r1, [r3, #0]
 8006e3a:	685b      	ldreq	r3, [r3, #4]
 8006e3c:	1809      	addeq	r1, r1, r0
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	e7ed      	b.n	8006e1e <_free_r+0x1e>
 8006e42:	461a      	mov	r2, r3
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b10b      	cbz	r3, 8006e4c <_free_r+0x4c>
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x42>
 8006e4c:	6811      	ldr	r1, [r2, #0]
 8006e4e:	1850      	adds	r0, r2, r1
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x6c>
 8006e54:	6820      	ldr	r0, [r4, #0]
 8006e56:	4401      	add	r1, r0
 8006e58:	1850      	adds	r0, r2, r1
 8006e5a:	4283      	cmp	r3, r0
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	d1e0      	bne.n	8006e22 <_free_r+0x22>
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	6053      	str	r3, [r2, #4]
 8006e66:	4408      	add	r0, r1
 8006e68:	6010      	str	r0, [r2, #0]
 8006e6a:	e7da      	b.n	8006e22 <_free_r+0x22>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x74>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	e7d6      	b.n	8006e22 <_free_r+0x22>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	1821      	adds	r1, r4, r0
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1809      	addeq	r1, r1, r0
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	6054      	str	r4, [r2, #4]
 8006e8a:	e7ca      	b.n	8006e22 <_free_r+0x22>
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000628 	.word	0x20000628

08006e94 <malloc>:
 8006e94:	4b02      	ldr	r3, [pc, #8]	@ (8006ea0 <malloc+0xc>)
 8006e96:	4601      	mov	r1, r0
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f000 b825 	b.w	8006ee8 <_malloc_r>
 8006e9e:	bf00      	nop
 8006ea0:	200000d0 	.word	0x200000d0

08006ea4 <sbrk_aligned>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	4e0f      	ldr	r6, [pc, #60]	@ (8006ee4 <sbrk_aligned+0x40>)
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	6831      	ldr	r1, [r6, #0]
 8006eac:	4605      	mov	r5, r0
 8006eae:	b911      	cbnz	r1, 8006eb6 <sbrk_aligned+0x12>
 8006eb0:	f000 fca6 	bl	8007800 <_sbrk_r>
 8006eb4:	6030      	str	r0, [r6, #0]
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 fca1 	bl	8007800 <_sbrk_r>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	d103      	bne.n	8006eca <sbrk_aligned+0x26>
 8006ec2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	bd70      	pop	{r4, r5, r6, pc}
 8006eca:	1cc4      	adds	r4, r0, #3
 8006ecc:	f024 0403 	bic.w	r4, r4, #3
 8006ed0:	42a0      	cmp	r0, r4
 8006ed2:	d0f8      	beq.n	8006ec6 <sbrk_aligned+0x22>
 8006ed4:	1a21      	subs	r1, r4, r0
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 fc92 	bl	8007800 <_sbrk_r>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d1f2      	bne.n	8006ec6 <sbrk_aligned+0x22>
 8006ee0:	e7ef      	b.n	8006ec2 <sbrk_aligned+0x1e>
 8006ee2:	bf00      	nop
 8006ee4:	20000624 	.word	0x20000624

08006ee8 <_malloc_r>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	1ccd      	adds	r5, r1, #3
 8006eee:	f025 0503 	bic.w	r5, r5, #3
 8006ef2:	3508      	adds	r5, #8
 8006ef4:	2d0c      	cmp	r5, #12
 8006ef6:	bf38      	it	cc
 8006ef8:	250c      	movcc	r5, #12
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	4606      	mov	r6, r0
 8006efe:	db01      	blt.n	8006f04 <_malloc_r+0x1c>
 8006f00:	42a9      	cmp	r1, r5
 8006f02:	d904      	bls.n	8006f0e <_malloc_r+0x26>
 8006f04:	230c      	movs	r3, #12
 8006f06:	6033      	str	r3, [r6, #0]
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fe4 <_malloc_r+0xfc>
 8006f12:	f000 f869 	bl	8006fe8 <__malloc_lock>
 8006f16:	f8d8 3000 	ldr.w	r3, [r8]
 8006f1a:	461c      	mov	r4, r3
 8006f1c:	bb44      	cbnz	r4, 8006f70 <_malloc_r+0x88>
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff ffbf 	bl	8006ea4 <sbrk_aligned>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	4604      	mov	r4, r0
 8006f2a:	d158      	bne.n	8006fde <_malloc_r+0xf6>
 8006f2c:	f8d8 4000 	ldr.w	r4, [r8]
 8006f30:	4627      	mov	r7, r4
 8006f32:	2f00      	cmp	r7, #0
 8006f34:	d143      	bne.n	8006fbe <_malloc_r+0xd6>
 8006f36:	2c00      	cmp	r4, #0
 8006f38:	d04b      	beq.n	8006fd2 <_malloc_r+0xea>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	4630      	mov	r0, r6
 8006f40:	eb04 0903 	add.w	r9, r4, r3
 8006f44:	f000 fc5c 	bl	8007800 <_sbrk_r>
 8006f48:	4581      	cmp	r9, r0
 8006f4a:	d142      	bne.n	8006fd2 <_malloc_r+0xea>
 8006f4c:	6821      	ldr	r1, [r4, #0]
 8006f4e:	1a6d      	subs	r5, r5, r1
 8006f50:	4629      	mov	r1, r5
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7ff ffa6 	bl	8006ea4 <sbrk_aligned>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d03a      	beq.n	8006fd2 <_malloc_r+0xea>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	442b      	add	r3, r5
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	f8d8 3000 	ldr.w	r3, [r8]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	bb62      	cbnz	r2, 8006fc4 <_malloc_r+0xdc>
 8006f6a:	f8c8 7000 	str.w	r7, [r8]
 8006f6e:	e00f      	b.n	8006f90 <_malloc_r+0xa8>
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	1b52      	subs	r2, r2, r5
 8006f74:	d420      	bmi.n	8006fb8 <_malloc_r+0xd0>
 8006f76:	2a0b      	cmp	r2, #11
 8006f78:	d917      	bls.n	8006faa <_malloc_r+0xc2>
 8006f7a:	1961      	adds	r1, r4, r5
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	6025      	str	r5, [r4, #0]
 8006f80:	bf18      	it	ne
 8006f82:	6059      	strne	r1, [r3, #4]
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	bf08      	it	eq
 8006f88:	f8c8 1000 	streq.w	r1, [r8]
 8006f8c:	5162      	str	r2, [r4, r5]
 8006f8e:	604b      	str	r3, [r1, #4]
 8006f90:	4630      	mov	r0, r6
 8006f92:	f000 f82f 	bl	8006ff4 <__malloc_unlock>
 8006f96:	f104 000b 	add.w	r0, r4, #11
 8006f9a:	1d23      	adds	r3, r4, #4
 8006f9c:	f020 0007 	bic.w	r0, r0, #7
 8006fa0:	1ac2      	subs	r2, r0, r3
 8006fa2:	bf1c      	itt	ne
 8006fa4:	1a1b      	subne	r3, r3, r0
 8006fa6:	50a3      	strne	r3, [r4, r2]
 8006fa8:	e7af      	b.n	8006f0a <_malloc_r+0x22>
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	42a3      	cmp	r3, r4
 8006fae:	bf0c      	ite	eq
 8006fb0:	f8c8 2000 	streq.w	r2, [r8]
 8006fb4:	605a      	strne	r2, [r3, #4]
 8006fb6:	e7eb      	b.n	8006f90 <_malloc_r+0xa8>
 8006fb8:	4623      	mov	r3, r4
 8006fba:	6864      	ldr	r4, [r4, #4]
 8006fbc:	e7ae      	b.n	8006f1c <_malloc_r+0x34>
 8006fbe:	463c      	mov	r4, r7
 8006fc0:	687f      	ldr	r7, [r7, #4]
 8006fc2:	e7b6      	b.n	8006f32 <_malloc_r+0x4a>
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	d1fb      	bne.n	8006fc4 <_malloc_r+0xdc>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6053      	str	r3, [r2, #4]
 8006fd0:	e7de      	b.n	8006f90 <_malloc_r+0xa8>
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	6033      	str	r3, [r6, #0]
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f000 f80c 	bl	8006ff4 <__malloc_unlock>
 8006fdc:	e794      	b.n	8006f08 <_malloc_r+0x20>
 8006fde:	6005      	str	r5, [r0, #0]
 8006fe0:	e7d6      	b.n	8006f90 <_malloc_r+0xa8>
 8006fe2:	bf00      	nop
 8006fe4:	20000628 	.word	0x20000628

08006fe8 <__malloc_lock>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	@ (8006ff0 <__malloc_lock+0x8>)
 8006fea:	f7ff bef8 	b.w	8006dde <__retarget_lock_acquire_recursive>
 8006fee:	bf00      	nop
 8006ff0:	20000620 	.word	0x20000620

08006ff4 <__malloc_unlock>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	@ (8006ffc <__malloc_unlock+0x8>)
 8006ff6:	f7ff bef3 	b.w	8006de0 <__retarget_lock_release_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	20000620 	.word	0x20000620

08007000 <__sfputc_r>:
 8007000:	6893      	ldr	r3, [r2, #8]
 8007002:	3b01      	subs	r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	b410      	push	{r4}
 8007008:	6093      	str	r3, [r2, #8]
 800700a:	da08      	bge.n	800701e <__sfputc_r+0x1e>
 800700c:	6994      	ldr	r4, [r2, #24]
 800700e:	42a3      	cmp	r3, r4
 8007010:	db01      	blt.n	8007016 <__sfputc_r+0x16>
 8007012:	290a      	cmp	r1, #10
 8007014:	d103      	bne.n	800701e <__sfputc_r+0x1e>
 8007016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800701a:	f7ff bdc0 	b.w	8006b9e <__swbuf_r>
 800701e:	6813      	ldr	r3, [r2, #0]
 8007020:	1c58      	adds	r0, r3, #1
 8007022:	6010      	str	r0, [r2, #0]
 8007024:	7019      	strb	r1, [r3, #0]
 8007026:	4608      	mov	r0, r1
 8007028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800702c:	4770      	bx	lr

0800702e <__sfputs_r>:
 800702e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007030:	4606      	mov	r6, r0
 8007032:	460f      	mov	r7, r1
 8007034:	4614      	mov	r4, r2
 8007036:	18d5      	adds	r5, r2, r3
 8007038:	42ac      	cmp	r4, r5
 800703a:	d101      	bne.n	8007040 <__sfputs_r+0x12>
 800703c:	2000      	movs	r0, #0
 800703e:	e007      	b.n	8007050 <__sfputs_r+0x22>
 8007040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007044:	463a      	mov	r2, r7
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff ffda 	bl	8007000 <__sfputc_r>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d1f3      	bne.n	8007038 <__sfputs_r+0xa>
 8007050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007054 <_vfiprintf_r>:
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	460d      	mov	r5, r1
 800705a:	b09d      	sub	sp, #116	@ 0x74
 800705c:	4614      	mov	r4, r2
 800705e:	4698      	mov	r8, r3
 8007060:	4606      	mov	r6, r0
 8007062:	b118      	cbz	r0, 800706c <_vfiprintf_r+0x18>
 8007064:	6a03      	ldr	r3, [r0, #32]
 8007066:	b90b      	cbnz	r3, 800706c <_vfiprintf_r+0x18>
 8007068:	f7ff fbf4 	bl	8006854 <__sinit>
 800706c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800706e:	07d9      	lsls	r1, r3, #31
 8007070:	d405      	bmi.n	800707e <_vfiprintf_r+0x2a>
 8007072:	89ab      	ldrh	r3, [r5, #12]
 8007074:	059a      	lsls	r2, r3, #22
 8007076:	d402      	bmi.n	800707e <_vfiprintf_r+0x2a>
 8007078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800707a:	f7ff feb0 	bl	8006dde <__retarget_lock_acquire_recursive>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	071b      	lsls	r3, r3, #28
 8007082:	d501      	bpl.n	8007088 <_vfiprintf_r+0x34>
 8007084:	692b      	ldr	r3, [r5, #16]
 8007086:	b99b      	cbnz	r3, 80070b0 <_vfiprintf_r+0x5c>
 8007088:	4629      	mov	r1, r5
 800708a:	4630      	mov	r0, r6
 800708c:	f7ff fdc6 	bl	8006c1c <__swsetup_r>
 8007090:	b170      	cbz	r0, 80070b0 <_vfiprintf_r+0x5c>
 8007092:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007094:	07dc      	lsls	r4, r3, #31
 8007096:	d504      	bpl.n	80070a2 <_vfiprintf_r+0x4e>
 8007098:	f04f 30ff 	mov.w	r0, #4294967295
 800709c:	b01d      	add	sp, #116	@ 0x74
 800709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	0598      	lsls	r0, r3, #22
 80070a6:	d4f7      	bmi.n	8007098 <_vfiprintf_r+0x44>
 80070a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070aa:	f7ff fe99 	bl	8006de0 <__retarget_lock_release_recursive>
 80070ae:	e7f3      	b.n	8007098 <_vfiprintf_r+0x44>
 80070b0:	2300      	movs	r3, #0
 80070b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070b4:	2320      	movs	r3, #32
 80070b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80070be:	2330      	movs	r3, #48	@ 0x30
 80070c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007270 <_vfiprintf_r+0x21c>
 80070c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070c8:	f04f 0901 	mov.w	r9, #1
 80070cc:	4623      	mov	r3, r4
 80070ce:	469a      	mov	sl, r3
 80070d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070d4:	b10a      	cbz	r2, 80070da <_vfiprintf_r+0x86>
 80070d6:	2a25      	cmp	r2, #37	@ 0x25
 80070d8:	d1f9      	bne.n	80070ce <_vfiprintf_r+0x7a>
 80070da:	ebba 0b04 	subs.w	fp, sl, r4
 80070de:	d00b      	beq.n	80070f8 <_vfiprintf_r+0xa4>
 80070e0:	465b      	mov	r3, fp
 80070e2:	4622      	mov	r2, r4
 80070e4:	4629      	mov	r1, r5
 80070e6:	4630      	mov	r0, r6
 80070e8:	f7ff ffa1 	bl	800702e <__sfputs_r>
 80070ec:	3001      	adds	r0, #1
 80070ee:	f000 80a7 	beq.w	8007240 <_vfiprintf_r+0x1ec>
 80070f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070f4:	445a      	add	r2, fp
 80070f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80070f8:	f89a 3000 	ldrb.w	r3, [sl]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 809f 	beq.w	8007240 <_vfiprintf_r+0x1ec>
 8007102:	2300      	movs	r3, #0
 8007104:	f04f 32ff 	mov.w	r2, #4294967295
 8007108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800710c:	f10a 0a01 	add.w	sl, sl, #1
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	9307      	str	r3, [sp, #28]
 8007114:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007118:	931a      	str	r3, [sp, #104]	@ 0x68
 800711a:	4654      	mov	r4, sl
 800711c:	2205      	movs	r2, #5
 800711e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007122:	4853      	ldr	r0, [pc, #332]	@ (8007270 <_vfiprintf_r+0x21c>)
 8007124:	f7f9 f884 	bl	8000230 <memchr>
 8007128:	9a04      	ldr	r2, [sp, #16]
 800712a:	b9d8      	cbnz	r0, 8007164 <_vfiprintf_r+0x110>
 800712c:	06d1      	lsls	r1, r2, #27
 800712e:	bf44      	itt	mi
 8007130:	2320      	movmi	r3, #32
 8007132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007136:	0713      	lsls	r3, r2, #28
 8007138:	bf44      	itt	mi
 800713a:	232b      	movmi	r3, #43	@ 0x2b
 800713c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007140:	f89a 3000 	ldrb.w	r3, [sl]
 8007144:	2b2a      	cmp	r3, #42	@ 0x2a
 8007146:	d015      	beq.n	8007174 <_vfiprintf_r+0x120>
 8007148:	9a07      	ldr	r2, [sp, #28]
 800714a:	4654      	mov	r4, sl
 800714c:	2000      	movs	r0, #0
 800714e:	f04f 0c0a 	mov.w	ip, #10
 8007152:	4621      	mov	r1, r4
 8007154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007158:	3b30      	subs	r3, #48	@ 0x30
 800715a:	2b09      	cmp	r3, #9
 800715c:	d94b      	bls.n	80071f6 <_vfiprintf_r+0x1a2>
 800715e:	b1b0      	cbz	r0, 800718e <_vfiprintf_r+0x13a>
 8007160:	9207      	str	r2, [sp, #28]
 8007162:	e014      	b.n	800718e <_vfiprintf_r+0x13a>
 8007164:	eba0 0308 	sub.w	r3, r0, r8
 8007168:	fa09 f303 	lsl.w	r3, r9, r3
 800716c:	4313      	orrs	r3, r2
 800716e:	9304      	str	r3, [sp, #16]
 8007170:	46a2      	mov	sl, r4
 8007172:	e7d2      	b.n	800711a <_vfiprintf_r+0xc6>
 8007174:	9b03      	ldr	r3, [sp, #12]
 8007176:	1d19      	adds	r1, r3, #4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	9103      	str	r1, [sp, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	bfbb      	ittet	lt
 8007180:	425b      	neglt	r3, r3
 8007182:	f042 0202 	orrlt.w	r2, r2, #2
 8007186:	9307      	strge	r3, [sp, #28]
 8007188:	9307      	strlt	r3, [sp, #28]
 800718a:	bfb8      	it	lt
 800718c:	9204      	strlt	r2, [sp, #16]
 800718e:	7823      	ldrb	r3, [r4, #0]
 8007190:	2b2e      	cmp	r3, #46	@ 0x2e
 8007192:	d10a      	bne.n	80071aa <_vfiprintf_r+0x156>
 8007194:	7863      	ldrb	r3, [r4, #1]
 8007196:	2b2a      	cmp	r3, #42	@ 0x2a
 8007198:	d132      	bne.n	8007200 <_vfiprintf_r+0x1ac>
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	1d1a      	adds	r2, r3, #4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	9203      	str	r2, [sp, #12]
 80071a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071a6:	3402      	adds	r4, #2
 80071a8:	9305      	str	r3, [sp, #20]
 80071aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007280 <_vfiprintf_r+0x22c>
 80071ae:	7821      	ldrb	r1, [r4, #0]
 80071b0:	2203      	movs	r2, #3
 80071b2:	4650      	mov	r0, sl
 80071b4:	f7f9 f83c 	bl	8000230 <memchr>
 80071b8:	b138      	cbz	r0, 80071ca <_vfiprintf_r+0x176>
 80071ba:	9b04      	ldr	r3, [sp, #16]
 80071bc:	eba0 000a 	sub.w	r0, r0, sl
 80071c0:	2240      	movs	r2, #64	@ 0x40
 80071c2:	4082      	lsls	r2, r0
 80071c4:	4313      	orrs	r3, r2
 80071c6:	3401      	adds	r4, #1
 80071c8:	9304      	str	r3, [sp, #16]
 80071ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ce:	4829      	ldr	r0, [pc, #164]	@ (8007274 <_vfiprintf_r+0x220>)
 80071d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071d4:	2206      	movs	r2, #6
 80071d6:	f7f9 f82b 	bl	8000230 <memchr>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d03f      	beq.n	800725e <_vfiprintf_r+0x20a>
 80071de:	4b26      	ldr	r3, [pc, #152]	@ (8007278 <_vfiprintf_r+0x224>)
 80071e0:	bb1b      	cbnz	r3, 800722a <_vfiprintf_r+0x1d6>
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	3307      	adds	r3, #7
 80071e6:	f023 0307 	bic.w	r3, r3, #7
 80071ea:	3308      	adds	r3, #8
 80071ec:	9303      	str	r3, [sp, #12]
 80071ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f0:	443b      	add	r3, r7
 80071f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f4:	e76a      	b.n	80070cc <_vfiprintf_r+0x78>
 80071f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80071fa:	460c      	mov	r4, r1
 80071fc:	2001      	movs	r0, #1
 80071fe:	e7a8      	b.n	8007152 <_vfiprintf_r+0xfe>
 8007200:	2300      	movs	r3, #0
 8007202:	3401      	adds	r4, #1
 8007204:	9305      	str	r3, [sp, #20]
 8007206:	4619      	mov	r1, r3
 8007208:	f04f 0c0a 	mov.w	ip, #10
 800720c:	4620      	mov	r0, r4
 800720e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007212:	3a30      	subs	r2, #48	@ 0x30
 8007214:	2a09      	cmp	r2, #9
 8007216:	d903      	bls.n	8007220 <_vfiprintf_r+0x1cc>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0c6      	beq.n	80071aa <_vfiprintf_r+0x156>
 800721c:	9105      	str	r1, [sp, #20]
 800721e:	e7c4      	b.n	80071aa <_vfiprintf_r+0x156>
 8007220:	fb0c 2101 	mla	r1, ip, r1, r2
 8007224:	4604      	mov	r4, r0
 8007226:	2301      	movs	r3, #1
 8007228:	e7f0      	b.n	800720c <_vfiprintf_r+0x1b8>
 800722a:	ab03      	add	r3, sp, #12
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	462a      	mov	r2, r5
 8007230:	4b12      	ldr	r3, [pc, #72]	@ (800727c <_vfiprintf_r+0x228>)
 8007232:	a904      	add	r1, sp, #16
 8007234:	4630      	mov	r0, r6
 8007236:	f3af 8000 	nop.w
 800723a:	4607      	mov	r7, r0
 800723c:	1c78      	adds	r0, r7, #1
 800723e:	d1d6      	bne.n	80071ee <_vfiprintf_r+0x19a>
 8007240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007242:	07d9      	lsls	r1, r3, #31
 8007244:	d405      	bmi.n	8007252 <_vfiprintf_r+0x1fe>
 8007246:	89ab      	ldrh	r3, [r5, #12]
 8007248:	059a      	lsls	r2, r3, #22
 800724a:	d402      	bmi.n	8007252 <_vfiprintf_r+0x1fe>
 800724c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800724e:	f7ff fdc7 	bl	8006de0 <__retarget_lock_release_recursive>
 8007252:	89ab      	ldrh	r3, [r5, #12]
 8007254:	065b      	lsls	r3, r3, #25
 8007256:	f53f af1f 	bmi.w	8007098 <_vfiprintf_r+0x44>
 800725a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800725c:	e71e      	b.n	800709c <_vfiprintf_r+0x48>
 800725e:	ab03      	add	r3, sp, #12
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	462a      	mov	r2, r5
 8007264:	4b05      	ldr	r3, [pc, #20]	@ (800727c <_vfiprintf_r+0x228>)
 8007266:	a904      	add	r1, sp, #16
 8007268:	4630      	mov	r0, r6
 800726a:	f000 f879 	bl	8007360 <_printf_i>
 800726e:	e7e4      	b.n	800723a <_vfiprintf_r+0x1e6>
 8007270:	08007b48 	.word	0x08007b48
 8007274:	08007b52 	.word	0x08007b52
 8007278:	00000000 	.word	0x00000000
 800727c:	0800702f 	.word	0x0800702f
 8007280:	08007b4e 	.word	0x08007b4e

08007284 <_printf_common>:
 8007284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007288:	4616      	mov	r6, r2
 800728a:	4698      	mov	r8, r3
 800728c:	688a      	ldr	r2, [r1, #8]
 800728e:	690b      	ldr	r3, [r1, #16]
 8007290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007294:	4293      	cmp	r3, r2
 8007296:	bfb8      	it	lt
 8007298:	4613      	movlt	r3, r2
 800729a:	6033      	str	r3, [r6, #0]
 800729c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072a0:	4607      	mov	r7, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	b10a      	cbz	r2, 80072aa <_printf_common+0x26>
 80072a6:	3301      	adds	r3, #1
 80072a8:	6033      	str	r3, [r6, #0]
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	0699      	lsls	r1, r3, #26
 80072ae:	bf42      	ittt	mi
 80072b0:	6833      	ldrmi	r3, [r6, #0]
 80072b2:	3302      	addmi	r3, #2
 80072b4:	6033      	strmi	r3, [r6, #0]
 80072b6:	6825      	ldr	r5, [r4, #0]
 80072b8:	f015 0506 	ands.w	r5, r5, #6
 80072bc:	d106      	bne.n	80072cc <_printf_common+0x48>
 80072be:	f104 0a19 	add.w	sl, r4, #25
 80072c2:	68e3      	ldr	r3, [r4, #12]
 80072c4:	6832      	ldr	r2, [r6, #0]
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	42ab      	cmp	r3, r5
 80072ca:	dc26      	bgt.n	800731a <_printf_common+0x96>
 80072cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	3b00      	subs	r3, #0
 80072d4:	bf18      	it	ne
 80072d6:	2301      	movne	r3, #1
 80072d8:	0692      	lsls	r2, r2, #26
 80072da:	d42b      	bmi.n	8007334 <_printf_common+0xb0>
 80072dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80072e0:	4641      	mov	r1, r8
 80072e2:	4638      	mov	r0, r7
 80072e4:	47c8      	blx	r9
 80072e6:	3001      	adds	r0, #1
 80072e8:	d01e      	beq.n	8007328 <_printf_common+0xa4>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	6922      	ldr	r2, [r4, #16]
 80072ee:	f003 0306 	and.w	r3, r3, #6
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	bf02      	ittt	eq
 80072f6:	68e5      	ldreq	r5, [r4, #12]
 80072f8:	6833      	ldreq	r3, [r6, #0]
 80072fa:	1aed      	subeq	r5, r5, r3
 80072fc:	68a3      	ldr	r3, [r4, #8]
 80072fe:	bf0c      	ite	eq
 8007300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007304:	2500      	movne	r5, #0
 8007306:	4293      	cmp	r3, r2
 8007308:	bfc4      	itt	gt
 800730a:	1a9b      	subgt	r3, r3, r2
 800730c:	18ed      	addgt	r5, r5, r3
 800730e:	2600      	movs	r6, #0
 8007310:	341a      	adds	r4, #26
 8007312:	42b5      	cmp	r5, r6
 8007314:	d11a      	bne.n	800734c <_printf_common+0xc8>
 8007316:	2000      	movs	r0, #0
 8007318:	e008      	b.n	800732c <_printf_common+0xa8>
 800731a:	2301      	movs	r3, #1
 800731c:	4652      	mov	r2, sl
 800731e:	4641      	mov	r1, r8
 8007320:	4638      	mov	r0, r7
 8007322:	47c8      	blx	r9
 8007324:	3001      	adds	r0, #1
 8007326:	d103      	bne.n	8007330 <_printf_common+0xac>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007330:	3501      	adds	r5, #1
 8007332:	e7c6      	b.n	80072c2 <_printf_common+0x3e>
 8007334:	18e1      	adds	r1, r4, r3
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	2030      	movs	r0, #48	@ 0x30
 800733a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800733e:	4422      	add	r2, r4
 8007340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007348:	3302      	adds	r3, #2
 800734a:	e7c7      	b.n	80072dc <_printf_common+0x58>
 800734c:	2301      	movs	r3, #1
 800734e:	4622      	mov	r2, r4
 8007350:	4641      	mov	r1, r8
 8007352:	4638      	mov	r0, r7
 8007354:	47c8      	blx	r9
 8007356:	3001      	adds	r0, #1
 8007358:	d0e6      	beq.n	8007328 <_printf_common+0xa4>
 800735a:	3601      	adds	r6, #1
 800735c:	e7d9      	b.n	8007312 <_printf_common+0x8e>
	...

08007360 <_printf_i>:
 8007360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007364:	7e0f      	ldrb	r7, [r1, #24]
 8007366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007368:	2f78      	cmp	r7, #120	@ 0x78
 800736a:	4691      	mov	r9, r2
 800736c:	4680      	mov	r8, r0
 800736e:	460c      	mov	r4, r1
 8007370:	469a      	mov	sl, r3
 8007372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007376:	d807      	bhi.n	8007388 <_printf_i+0x28>
 8007378:	2f62      	cmp	r7, #98	@ 0x62
 800737a:	d80a      	bhi.n	8007392 <_printf_i+0x32>
 800737c:	2f00      	cmp	r7, #0
 800737e:	f000 80d2 	beq.w	8007526 <_printf_i+0x1c6>
 8007382:	2f58      	cmp	r7, #88	@ 0x58
 8007384:	f000 80b9 	beq.w	80074fa <_printf_i+0x19a>
 8007388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800738c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007390:	e03a      	b.n	8007408 <_printf_i+0xa8>
 8007392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007396:	2b15      	cmp	r3, #21
 8007398:	d8f6      	bhi.n	8007388 <_printf_i+0x28>
 800739a:	a101      	add	r1, pc, #4	@ (adr r1, 80073a0 <_printf_i+0x40>)
 800739c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073a0:	080073f9 	.word	0x080073f9
 80073a4:	0800740d 	.word	0x0800740d
 80073a8:	08007389 	.word	0x08007389
 80073ac:	08007389 	.word	0x08007389
 80073b0:	08007389 	.word	0x08007389
 80073b4:	08007389 	.word	0x08007389
 80073b8:	0800740d 	.word	0x0800740d
 80073bc:	08007389 	.word	0x08007389
 80073c0:	08007389 	.word	0x08007389
 80073c4:	08007389 	.word	0x08007389
 80073c8:	08007389 	.word	0x08007389
 80073cc:	0800750d 	.word	0x0800750d
 80073d0:	08007437 	.word	0x08007437
 80073d4:	080074c7 	.word	0x080074c7
 80073d8:	08007389 	.word	0x08007389
 80073dc:	08007389 	.word	0x08007389
 80073e0:	0800752f 	.word	0x0800752f
 80073e4:	08007389 	.word	0x08007389
 80073e8:	08007437 	.word	0x08007437
 80073ec:	08007389 	.word	0x08007389
 80073f0:	08007389 	.word	0x08007389
 80073f4:	080074cf 	.word	0x080074cf
 80073f8:	6833      	ldr	r3, [r6, #0]
 80073fa:	1d1a      	adds	r2, r3, #4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6032      	str	r2, [r6, #0]
 8007400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007408:	2301      	movs	r3, #1
 800740a:	e09d      	b.n	8007548 <_printf_i+0x1e8>
 800740c:	6833      	ldr	r3, [r6, #0]
 800740e:	6820      	ldr	r0, [r4, #0]
 8007410:	1d19      	adds	r1, r3, #4
 8007412:	6031      	str	r1, [r6, #0]
 8007414:	0606      	lsls	r6, r0, #24
 8007416:	d501      	bpl.n	800741c <_printf_i+0xbc>
 8007418:	681d      	ldr	r5, [r3, #0]
 800741a:	e003      	b.n	8007424 <_printf_i+0xc4>
 800741c:	0645      	lsls	r5, r0, #25
 800741e:	d5fb      	bpl.n	8007418 <_printf_i+0xb8>
 8007420:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007424:	2d00      	cmp	r5, #0
 8007426:	da03      	bge.n	8007430 <_printf_i+0xd0>
 8007428:	232d      	movs	r3, #45	@ 0x2d
 800742a:	426d      	negs	r5, r5
 800742c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007430:	4859      	ldr	r0, [pc, #356]	@ (8007598 <_printf_i+0x238>)
 8007432:	230a      	movs	r3, #10
 8007434:	e011      	b.n	800745a <_printf_i+0xfa>
 8007436:	6821      	ldr	r1, [r4, #0]
 8007438:	6833      	ldr	r3, [r6, #0]
 800743a:	0608      	lsls	r0, r1, #24
 800743c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007440:	d402      	bmi.n	8007448 <_printf_i+0xe8>
 8007442:	0649      	lsls	r1, r1, #25
 8007444:	bf48      	it	mi
 8007446:	b2ad      	uxthmi	r5, r5
 8007448:	2f6f      	cmp	r7, #111	@ 0x6f
 800744a:	4853      	ldr	r0, [pc, #332]	@ (8007598 <_printf_i+0x238>)
 800744c:	6033      	str	r3, [r6, #0]
 800744e:	bf14      	ite	ne
 8007450:	230a      	movne	r3, #10
 8007452:	2308      	moveq	r3, #8
 8007454:	2100      	movs	r1, #0
 8007456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800745a:	6866      	ldr	r6, [r4, #4]
 800745c:	60a6      	str	r6, [r4, #8]
 800745e:	2e00      	cmp	r6, #0
 8007460:	bfa2      	ittt	ge
 8007462:	6821      	ldrge	r1, [r4, #0]
 8007464:	f021 0104 	bicge.w	r1, r1, #4
 8007468:	6021      	strge	r1, [r4, #0]
 800746a:	b90d      	cbnz	r5, 8007470 <_printf_i+0x110>
 800746c:	2e00      	cmp	r6, #0
 800746e:	d04b      	beq.n	8007508 <_printf_i+0x1a8>
 8007470:	4616      	mov	r6, r2
 8007472:	fbb5 f1f3 	udiv	r1, r5, r3
 8007476:	fb03 5711 	mls	r7, r3, r1, r5
 800747a:	5dc7      	ldrb	r7, [r0, r7]
 800747c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007480:	462f      	mov	r7, r5
 8007482:	42bb      	cmp	r3, r7
 8007484:	460d      	mov	r5, r1
 8007486:	d9f4      	bls.n	8007472 <_printf_i+0x112>
 8007488:	2b08      	cmp	r3, #8
 800748a:	d10b      	bne.n	80074a4 <_printf_i+0x144>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	07df      	lsls	r7, r3, #31
 8007490:	d508      	bpl.n	80074a4 <_printf_i+0x144>
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	6861      	ldr	r1, [r4, #4]
 8007496:	4299      	cmp	r1, r3
 8007498:	bfde      	ittt	le
 800749a:	2330      	movle	r3, #48	@ 0x30
 800749c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074a4:	1b92      	subs	r2, r2, r6
 80074a6:	6122      	str	r2, [r4, #16]
 80074a8:	f8cd a000 	str.w	sl, [sp]
 80074ac:	464b      	mov	r3, r9
 80074ae:	aa03      	add	r2, sp, #12
 80074b0:	4621      	mov	r1, r4
 80074b2:	4640      	mov	r0, r8
 80074b4:	f7ff fee6 	bl	8007284 <_printf_common>
 80074b8:	3001      	adds	r0, #1
 80074ba:	d14a      	bne.n	8007552 <_printf_i+0x1f2>
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	b004      	add	sp, #16
 80074c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f043 0320 	orr.w	r3, r3, #32
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	4833      	ldr	r0, [pc, #204]	@ (800759c <_printf_i+0x23c>)
 80074d0:	2778      	movs	r7, #120	@ 0x78
 80074d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	6831      	ldr	r1, [r6, #0]
 80074da:	061f      	lsls	r7, r3, #24
 80074dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80074e0:	d402      	bmi.n	80074e8 <_printf_i+0x188>
 80074e2:	065f      	lsls	r7, r3, #25
 80074e4:	bf48      	it	mi
 80074e6:	b2ad      	uxthmi	r5, r5
 80074e8:	6031      	str	r1, [r6, #0]
 80074ea:	07d9      	lsls	r1, r3, #31
 80074ec:	bf44      	itt	mi
 80074ee:	f043 0320 	orrmi.w	r3, r3, #32
 80074f2:	6023      	strmi	r3, [r4, #0]
 80074f4:	b11d      	cbz	r5, 80074fe <_printf_i+0x19e>
 80074f6:	2310      	movs	r3, #16
 80074f8:	e7ac      	b.n	8007454 <_printf_i+0xf4>
 80074fa:	4827      	ldr	r0, [pc, #156]	@ (8007598 <_printf_i+0x238>)
 80074fc:	e7e9      	b.n	80074d2 <_printf_i+0x172>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	f023 0320 	bic.w	r3, r3, #32
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	e7f6      	b.n	80074f6 <_printf_i+0x196>
 8007508:	4616      	mov	r6, r2
 800750a:	e7bd      	b.n	8007488 <_printf_i+0x128>
 800750c:	6833      	ldr	r3, [r6, #0]
 800750e:	6825      	ldr	r5, [r4, #0]
 8007510:	6961      	ldr	r1, [r4, #20]
 8007512:	1d18      	adds	r0, r3, #4
 8007514:	6030      	str	r0, [r6, #0]
 8007516:	062e      	lsls	r6, r5, #24
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	d501      	bpl.n	8007520 <_printf_i+0x1c0>
 800751c:	6019      	str	r1, [r3, #0]
 800751e:	e002      	b.n	8007526 <_printf_i+0x1c6>
 8007520:	0668      	lsls	r0, r5, #25
 8007522:	d5fb      	bpl.n	800751c <_printf_i+0x1bc>
 8007524:	8019      	strh	r1, [r3, #0]
 8007526:	2300      	movs	r3, #0
 8007528:	6123      	str	r3, [r4, #16]
 800752a:	4616      	mov	r6, r2
 800752c:	e7bc      	b.n	80074a8 <_printf_i+0x148>
 800752e:	6833      	ldr	r3, [r6, #0]
 8007530:	1d1a      	adds	r2, r3, #4
 8007532:	6032      	str	r2, [r6, #0]
 8007534:	681e      	ldr	r6, [r3, #0]
 8007536:	6862      	ldr	r2, [r4, #4]
 8007538:	2100      	movs	r1, #0
 800753a:	4630      	mov	r0, r6
 800753c:	f7f8 fe78 	bl	8000230 <memchr>
 8007540:	b108      	cbz	r0, 8007546 <_printf_i+0x1e6>
 8007542:	1b80      	subs	r0, r0, r6
 8007544:	6060      	str	r0, [r4, #4]
 8007546:	6863      	ldr	r3, [r4, #4]
 8007548:	6123      	str	r3, [r4, #16]
 800754a:	2300      	movs	r3, #0
 800754c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007550:	e7aa      	b.n	80074a8 <_printf_i+0x148>
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	4632      	mov	r2, r6
 8007556:	4649      	mov	r1, r9
 8007558:	4640      	mov	r0, r8
 800755a:	47d0      	blx	sl
 800755c:	3001      	adds	r0, #1
 800755e:	d0ad      	beq.n	80074bc <_printf_i+0x15c>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	079b      	lsls	r3, r3, #30
 8007564:	d413      	bmi.n	800758e <_printf_i+0x22e>
 8007566:	68e0      	ldr	r0, [r4, #12]
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	4298      	cmp	r0, r3
 800756c:	bfb8      	it	lt
 800756e:	4618      	movlt	r0, r3
 8007570:	e7a6      	b.n	80074c0 <_printf_i+0x160>
 8007572:	2301      	movs	r3, #1
 8007574:	4632      	mov	r2, r6
 8007576:	4649      	mov	r1, r9
 8007578:	4640      	mov	r0, r8
 800757a:	47d0      	blx	sl
 800757c:	3001      	adds	r0, #1
 800757e:	d09d      	beq.n	80074bc <_printf_i+0x15c>
 8007580:	3501      	adds	r5, #1
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	9903      	ldr	r1, [sp, #12]
 8007586:	1a5b      	subs	r3, r3, r1
 8007588:	42ab      	cmp	r3, r5
 800758a:	dcf2      	bgt.n	8007572 <_printf_i+0x212>
 800758c:	e7eb      	b.n	8007566 <_printf_i+0x206>
 800758e:	2500      	movs	r5, #0
 8007590:	f104 0619 	add.w	r6, r4, #25
 8007594:	e7f5      	b.n	8007582 <_printf_i+0x222>
 8007596:	bf00      	nop
 8007598:	08007b59 	.word	0x08007b59
 800759c:	08007b6a 	.word	0x08007b6a

080075a0 <__sflush_r>:
 80075a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a8:	0716      	lsls	r6, r2, #28
 80075aa:	4605      	mov	r5, r0
 80075ac:	460c      	mov	r4, r1
 80075ae:	d454      	bmi.n	800765a <__sflush_r+0xba>
 80075b0:	684b      	ldr	r3, [r1, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc02      	bgt.n	80075bc <__sflush_r+0x1c>
 80075b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dd48      	ble.n	800764e <__sflush_r+0xae>
 80075bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075be:	2e00      	cmp	r6, #0
 80075c0:	d045      	beq.n	800764e <__sflush_r+0xae>
 80075c2:	2300      	movs	r3, #0
 80075c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075c8:	682f      	ldr	r7, [r5, #0]
 80075ca:	6a21      	ldr	r1, [r4, #32]
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	d030      	beq.n	8007632 <__sflush_r+0x92>
 80075d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	0759      	lsls	r1, r3, #29
 80075d6:	d505      	bpl.n	80075e4 <__sflush_r+0x44>
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	1ad2      	subs	r2, r2, r3
 80075dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075de:	b10b      	cbz	r3, 80075e4 <__sflush_r+0x44>
 80075e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075e2:	1ad2      	subs	r2, r2, r3
 80075e4:	2300      	movs	r3, #0
 80075e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075e8:	6a21      	ldr	r1, [r4, #32]
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b0      	blx	r6
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	d106      	bne.n	8007602 <__sflush_r+0x62>
 80075f4:	6829      	ldr	r1, [r5, #0]
 80075f6:	291d      	cmp	r1, #29
 80075f8:	d82b      	bhi.n	8007652 <__sflush_r+0xb2>
 80075fa:	4a2a      	ldr	r2, [pc, #168]	@ (80076a4 <__sflush_r+0x104>)
 80075fc:	410a      	asrs	r2, r1
 80075fe:	07d6      	lsls	r6, r2, #31
 8007600:	d427      	bmi.n	8007652 <__sflush_r+0xb2>
 8007602:	2200      	movs	r2, #0
 8007604:	6062      	str	r2, [r4, #4]
 8007606:	04d9      	lsls	r1, r3, #19
 8007608:	6922      	ldr	r2, [r4, #16]
 800760a:	6022      	str	r2, [r4, #0]
 800760c:	d504      	bpl.n	8007618 <__sflush_r+0x78>
 800760e:	1c42      	adds	r2, r0, #1
 8007610:	d101      	bne.n	8007616 <__sflush_r+0x76>
 8007612:	682b      	ldr	r3, [r5, #0]
 8007614:	b903      	cbnz	r3, 8007618 <__sflush_r+0x78>
 8007616:	6560      	str	r0, [r4, #84]	@ 0x54
 8007618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800761a:	602f      	str	r7, [r5, #0]
 800761c:	b1b9      	cbz	r1, 800764e <__sflush_r+0xae>
 800761e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007622:	4299      	cmp	r1, r3
 8007624:	d002      	beq.n	800762c <__sflush_r+0x8c>
 8007626:	4628      	mov	r0, r5
 8007628:	f7ff fbea 	bl	8006e00 <_free_r>
 800762c:	2300      	movs	r3, #0
 800762e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007630:	e00d      	b.n	800764e <__sflush_r+0xae>
 8007632:	2301      	movs	r3, #1
 8007634:	4628      	mov	r0, r5
 8007636:	47b0      	blx	r6
 8007638:	4602      	mov	r2, r0
 800763a:	1c50      	adds	r0, r2, #1
 800763c:	d1c9      	bne.n	80075d2 <__sflush_r+0x32>
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0c6      	beq.n	80075d2 <__sflush_r+0x32>
 8007644:	2b1d      	cmp	r3, #29
 8007646:	d001      	beq.n	800764c <__sflush_r+0xac>
 8007648:	2b16      	cmp	r3, #22
 800764a:	d11e      	bne.n	800768a <__sflush_r+0xea>
 800764c:	602f      	str	r7, [r5, #0]
 800764e:	2000      	movs	r0, #0
 8007650:	e022      	b.n	8007698 <__sflush_r+0xf8>
 8007652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007656:	b21b      	sxth	r3, r3
 8007658:	e01b      	b.n	8007692 <__sflush_r+0xf2>
 800765a:	690f      	ldr	r7, [r1, #16]
 800765c:	2f00      	cmp	r7, #0
 800765e:	d0f6      	beq.n	800764e <__sflush_r+0xae>
 8007660:	0793      	lsls	r3, r2, #30
 8007662:	680e      	ldr	r6, [r1, #0]
 8007664:	bf08      	it	eq
 8007666:	694b      	ldreq	r3, [r1, #20]
 8007668:	600f      	str	r7, [r1, #0]
 800766a:	bf18      	it	ne
 800766c:	2300      	movne	r3, #0
 800766e:	eba6 0807 	sub.w	r8, r6, r7
 8007672:	608b      	str	r3, [r1, #8]
 8007674:	f1b8 0f00 	cmp.w	r8, #0
 8007678:	dde9      	ble.n	800764e <__sflush_r+0xae>
 800767a:	6a21      	ldr	r1, [r4, #32]
 800767c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800767e:	4643      	mov	r3, r8
 8007680:	463a      	mov	r2, r7
 8007682:	4628      	mov	r0, r5
 8007684:	47b0      	blx	r6
 8007686:	2800      	cmp	r0, #0
 8007688:	dc08      	bgt.n	800769c <__sflush_r+0xfc>
 800768a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	f04f 30ff 	mov.w	r0, #4294967295
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	4407      	add	r7, r0
 800769e:	eba8 0800 	sub.w	r8, r8, r0
 80076a2:	e7e7      	b.n	8007674 <__sflush_r+0xd4>
 80076a4:	dfbffffe 	.word	0xdfbffffe

080076a8 <_fflush_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	690b      	ldr	r3, [r1, #16]
 80076ac:	4605      	mov	r5, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	b913      	cbnz	r3, 80076b8 <_fflush_r+0x10>
 80076b2:	2500      	movs	r5, #0
 80076b4:	4628      	mov	r0, r5
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	b118      	cbz	r0, 80076c2 <_fflush_r+0x1a>
 80076ba:	6a03      	ldr	r3, [r0, #32]
 80076bc:	b90b      	cbnz	r3, 80076c2 <_fflush_r+0x1a>
 80076be:	f7ff f8c9 	bl	8006854 <__sinit>
 80076c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0f3      	beq.n	80076b2 <_fflush_r+0xa>
 80076ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076cc:	07d0      	lsls	r0, r2, #31
 80076ce:	d404      	bmi.n	80076da <_fflush_r+0x32>
 80076d0:	0599      	lsls	r1, r3, #22
 80076d2:	d402      	bmi.n	80076da <_fflush_r+0x32>
 80076d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076d6:	f7ff fb82 	bl	8006dde <__retarget_lock_acquire_recursive>
 80076da:	4628      	mov	r0, r5
 80076dc:	4621      	mov	r1, r4
 80076de:	f7ff ff5f 	bl	80075a0 <__sflush_r>
 80076e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076e4:	07da      	lsls	r2, r3, #31
 80076e6:	4605      	mov	r5, r0
 80076e8:	d4e4      	bmi.n	80076b4 <_fflush_r+0xc>
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	059b      	lsls	r3, r3, #22
 80076ee:	d4e1      	bmi.n	80076b4 <_fflush_r+0xc>
 80076f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076f2:	f7ff fb75 	bl	8006de0 <__retarget_lock_release_recursive>
 80076f6:	e7dd      	b.n	80076b4 <_fflush_r+0xc>

080076f8 <__swhatbuf_r>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	460c      	mov	r4, r1
 80076fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007700:	2900      	cmp	r1, #0
 8007702:	b096      	sub	sp, #88	@ 0x58
 8007704:	4615      	mov	r5, r2
 8007706:	461e      	mov	r6, r3
 8007708:	da0d      	bge.n	8007726 <__swhatbuf_r+0x2e>
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007710:	f04f 0100 	mov.w	r1, #0
 8007714:	bf14      	ite	ne
 8007716:	2340      	movne	r3, #64	@ 0x40
 8007718:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800771c:	2000      	movs	r0, #0
 800771e:	6031      	str	r1, [r6, #0]
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	b016      	add	sp, #88	@ 0x58
 8007724:	bd70      	pop	{r4, r5, r6, pc}
 8007726:	466a      	mov	r2, sp
 8007728:	f000 f848 	bl	80077bc <_fstat_r>
 800772c:	2800      	cmp	r0, #0
 800772e:	dbec      	blt.n	800770a <__swhatbuf_r+0x12>
 8007730:	9901      	ldr	r1, [sp, #4]
 8007732:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007736:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800773a:	4259      	negs	r1, r3
 800773c:	4159      	adcs	r1, r3
 800773e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007742:	e7eb      	b.n	800771c <__swhatbuf_r+0x24>

08007744 <__smakebuf_r>:
 8007744:	898b      	ldrh	r3, [r1, #12]
 8007746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007748:	079d      	lsls	r5, r3, #30
 800774a:	4606      	mov	r6, r0
 800774c:	460c      	mov	r4, r1
 800774e:	d507      	bpl.n	8007760 <__smakebuf_r+0x1c>
 8007750:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	6123      	str	r3, [r4, #16]
 8007758:	2301      	movs	r3, #1
 800775a:	6163      	str	r3, [r4, #20]
 800775c:	b003      	add	sp, #12
 800775e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007760:	ab01      	add	r3, sp, #4
 8007762:	466a      	mov	r2, sp
 8007764:	f7ff ffc8 	bl	80076f8 <__swhatbuf_r>
 8007768:	9f00      	ldr	r7, [sp, #0]
 800776a:	4605      	mov	r5, r0
 800776c:	4639      	mov	r1, r7
 800776e:	4630      	mov	r0, r6
 8007770:	f7ff fbba 	bl	8006ee8 <_malloc_r>
 8007774:	b948      	cbnz	r0, 800778a <__smakebuf_r+0x46>
 8007776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800777a:	059a      	lsls	r2, r3, #22
 800777c:	d4ee      	bmi.n	800775c <__smakebuf_r+0x18>
 800777e:	f023 0303 	bic.w	r3, r3, #3
 8007782:	f043 0302 	orr.w	r3, r3, #2
 8007786:	81a3      	strh	r3, [r4, #12]
 8007788:	e7e2      	b.n	8007750 <__smakebuf_r+0xc>
 800778a:	89a3      	ldrh	r3, [r4, #12]
 800778c:	6020      	str	r0, [r4, #0]
 800778e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	9b01      	ldr	r3, [sp, #4]
 8007796:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800779a:	b15b      	cbz	r3, 80077b4 <__smakebuf_r+0x70>
 800779c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077a0:	4630      	mov	r0, r6
 80077a2:	f000 f81d 	bl	80077e0 <_isatty_r>
 80077a6:	b128      	cbz	r0, 80077b4 <__smakebuf_r+0x70>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	f043 0301 	orr.w	r3, r3, #1
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	431d      	orrs	r5, r3
 80077b8:	81a5      	strh	r5, [r4, #12]
 80077ba:	e7cf      	b.n	800775c <__smakebuf_r+0x18>

080077bc <_fstat_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d07      	ldr	r5, [pc, #28]	@ (80077dc <_fstat_r+0x20>)
 80077c0:	2300      	movs	r3, #0
 80077c2:	4604      	mov	r4, r0
 80077c4:	4608      	mov	r0, r1
 80077c6:	4611      	mov	r1, r2
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	f7f9 fad2 	bl	8000d72 <_fstat>
 80077ce:	1c43      	adds	r3, r0, #1
 80077d0:	d102      	bne.n	80077d8 <_fstat_r+0x1c>
 80077d2:	682b      	ldr	r3, [r5, #0]
 80077d4:	b103      	cbz	r3, 80077d8 <_fstat_r+0x1c>
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	bd38      	pop	{r3, r4, r5, pc}
 80077da:	bf00      	nop
 80077dc:	2000061c 	.word	0x2000061c

080077e0 <_isatty_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d06      	ldr	r5, [pc, #24]	@ (80077fc <_isatty_r+0x1c>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7f9 fad1 	bl	8000d92 <_isatty>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_isatty_r+0x1a>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_isatty_r+0x1a>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	2000061c 	.word	0x2000061c

08007800 <_sbrk_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d06      	ldr	r5, [pc, #24]	@ (800781c <_sbrk_r+0x1c>)
 8007804:	2300      	movs	r3, #0
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	602b      	str	r3, [r5, #0]
 800780c:	f7f9 fada 	bl	8000dc4 <_sbrk>
 8007810:	1c43      	adds	r3, r0, #1
 8007812:	d102      	bne.n	800781a <_sbrk_r+0x1a>
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	b103      	cbz	r3, 800781a <_sbrk_r+0x1a>
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	2000061c 	.word	0x2000061c

08007820 <_init>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr

0800782c <_fini>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr
