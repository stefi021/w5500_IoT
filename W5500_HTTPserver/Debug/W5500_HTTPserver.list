
W5500_HTTPserver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007980  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c8  08007b60  08007b60  00008b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e28  08008e28  0000a0c0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e28  08008e28  00009e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e30  08008e30  0000a0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e30  08008e30  00009e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e34  08008e34  00009e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08008e38  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001040  200000c0  08008ef8  0000a0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001100  08008ef8  0000a100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001279e  00000000  00000000  0000a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003095  00000000  00000000  0001c88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001f928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c54  00000000  00000000  00020930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027706  00000000  00000000  00021584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cc1  00000000  00000000  00048c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2519  00000000  00000000  0005c94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ee64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de0  00000000  00000000  0014eea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00153c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000c0 	.word	0x200000c0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007b48 	.word	0x08007b48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000c4 	.word	0x200000c4
 800021c:	08007b48 	.word	0x08007b48

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e6:	f003 fd14 	bl	8004012 <HAL_Init>

	/* USER CODE BEGIN Init */
	setbuf(stdout, NULL);
 80005ea:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <main+0x98>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f006 f950 	bl	8006898 <setbuf>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f8:	f000 f84e 	bl	8000698 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fc:	f000 f928 	bl	8000850 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000600:	f000 f894 	bl	800072c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000604:	f000 f8d8 	bl	80007b8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	W5500Init();
 8000608:	f002 feda 	bl	80033c0 <W5500Init>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO2);
 800060c:	491b      	ldr	r1, [pc, #108]	@ (800067c <main+0x9c>)
 800060e:	2000      	movs	r0, #0
 8000610:	f003 f8f0 	bl	80037f4 <ctlnetwork>

	wiz_PhyConf phyconf;

	phyconf.by = PHY_CONFBY_SW;
 8000614:	2301      	movs	r3, #1
 8000616:	703b      	strb	r3, [r7, #0]
	phyconf.duplex = PHY_DUPLEX_FULL;
 8000618:	2301      	movs	r3, #1
 800061a:	70fb      	strb	r3, [r7, #3]
	phyconf.speed = PHY_SPEED_10;
 800061c:	2300      	movs	r3, #0
 800061e:	70bb      	strb	r3, [r7, #2]
	phyconf.mode = PHY_MODE_AUTONEGO;
 8000620:	2301      	movs	r3, #1
 8000622:	707b      	strb	r3, [r7, #1]

	ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	200a      	movs	r0, #10
 800062a:	f003 f803 	bl	8003634 <ctlwizchip>

	PHYStatusCheck();
 800062e:	f000 f981 	bl	8000934 <PHYStatusCheck>
	PrintPHYConf();
 8000632:	f000 f9a5 	bl	8000980 <PrintPHYConf>
	/* USER CODE END 2 */

	printf("\r\n*****************SIMPLE HTTP Server******************\r\n");
 8000636:	4812      	ldr	r0, [pc, #72]	@ (8000680 <main+0xa0>)
 8000638:	f006 f926 	bl	8006888 <puts>

	httpServer_init(http_tx_buff, http_rx_buff, MAX_HTTPSOCK , socknumlist);
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <main+0xa4>)
 800063e:	2206      	movs	r2, #6
 8000640:	4911      	ldr	r1, [pc, #68]	@ (8000688 <main+0xa8>)
 8000642:	4812      	ldr	r0, [pc, #72]	@ (800068c <main+0xac>)
 8000644:	f000 ff3c 	bl	80014c0 <httpServer_init>
	reg_httpServer_cbfunc(NULL, NULL);
 8000648:	2100      	movs	r1, #0
 800064a:	2000      	movs	r0, #0
 800064c:	f000 ff54 	bl	80014f8 <reg_httpServer_cbfunc>

	reg_httpServer_webContent((uint8_t *)"index.html", (uint8_t *)index_page);
 8000650:	490f      	ldr	r1, [pc, #60]	@ (8000690 <main+0xb0>)
 8000652:	4810      	ldr	r0, [pc, #64]	@ (8000694 <main+0xb4>)
 8000654:	f001 fdf8 	bl	8002248 <reg_httpServer_webContent>


	while(1)
	{
	  for(uint16_t i = 0; i < MAX_HTTPSOCK; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	80fb      	strh	r3, [r7, #6]
 800065c:	e007      	b.n	800066e <main+0x8e>
	  {
		  httpServer_run(i);
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 ff64 	bl	8001530 <httpServer_run>
	  for(uint16_t i = 0; i < MAX_HTTPSOCK; i++)
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	3301      	adds	r3, #1
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	2b05      	cmp	r3, #5
 8000672:	d9f4      	bls.n	800065e <main+0x7e>
 8000674:	e7f0      	b.n	8000658 <main+0x78>
 8000676:	bf00      	nop
 8000678:	20000070 	.word	0x20000070
 800067c:	20000000 	.word	0x20000000
 8000680:	08007b60 	.word	0x08007b60
 8000684:	20000018 	.word	0x20000018
 8000688:	200001d4 	.word	0x200001d4
 800068c:	200005d4 	.word	0x200005d4
 8000690:	08007b9c 	.word	0x08007b9c
 8000694:	08007c94 	.word	0x08007c94

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2238      	movs	r2, #56	@ 0x38
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 faaa 	bl	8006c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006be:	f003 ffb9 	bl	8004634 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	2303      	movs	r3, #3
 80006d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f855 	bl	800479c <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80006f8:	f000 f986 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2101      	movs	r1, #1
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fb53 	bl	8004dc0 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000720:	f000 f972 	bl	8000a08 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	@ 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000732:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <MX_SPI1_Init+0x88>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000746:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800074a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_SPI1_Init+0x84>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_SPI1_Init+0x84>)
 800075a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000762:	2208      	movs	r2, #8
 8000764:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076c:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_SPI1_Init+0x84>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_SPI1_Init+0x84>)
 800077a:	2207      	movs	r2, #7
 800077c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000780:	2200      	movs	r2, #0
 8000782:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_SPI1_Init+0x84>)
 8000786:	2208      	movs	r2, #8
 8000788:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078a:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <MX_SPI1_Init+0x84>)
 800078c:	f004 ff82 	bl	8005694 <HAL_SPI_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f937 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800079a:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <MX_SPI1_Init+0x84>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b03      	ldr	r3, [pc, #12]	@ (80007b0 <MX_SPI1_Init+0x84>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007a8:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000dc 	.word	0x200000dc
 80007b4:	40013000 	.word	0x40013000

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007be:	4a23      	ldr	r2, [pc, #140]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007c2:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000800:	4811      	ldr	r0, [pc, #68]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 8000802:	f004 fff2 	bl	80057ea <HAL_UART_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800080c:	f000 f8fc 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	480d      	ldr	r0, [pc, #52]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 8000814:	f005 fd8e 	bl	8006334 <HAL_UARTEx_SetTxFifoThreshold>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800081e:	f000 f8f3 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4808      	ldr	r0, [pc, #32]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 8000826:	f005 fdc3 	bl	80063b0 <HAL_UARTEx_SetRxFifoThreshold>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000830:	f000 f8ea 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_USART2_UART_Init+0x90>)
 8000836:	f005 fd44 	bl	80062c2 <HAL_UARTEx_DisableFifoMode>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000840:	f000 f8e2 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000140 	.word	0x20000140
 800084c:	40004400 	.word	0x40004400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a1d      	ldr	r2, [pc, #116]	@ (80008e0 <MX_GPIO_Init+0x90>)
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0320 	and.w	r3, r3, #32
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_GPIO_Init+0x90>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a11      	ldr	r2, [pc, #68]	@ (80008e0 <MX_GPIO_Init+0x90>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_GPIO_Init+0x90>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2103      	movs	r1, #3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f003 fea5 	bl	8004604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ba:	2303      	movs	r3, #3
 80008bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d4:	f003 fd14 	bl	8004300 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000

080008e4 <UWriteData>:

/* USER CODE BEGIN 4 */
void UWriteData(const char data)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 80008ee:	bf00      	nop
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <UWriteData+0x30>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	2b80      	cmp	r3, #128	@ 0x80
 80008fc:	d1f8      	bne.n	80008f0 <UWriteData+0xc>

	huart2.Instance->TDR=data;
 80008fe:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <UWriteData+0x30>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000140 	.word	0x20000140

08000918 <__io_putchar>:

int __io_putchar(int ch)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ffdd 	bl	80008e4 <UWriteData>
	return ch;
 800092a:	687b      	ldr	r3, [r7, #4]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	uint8_t tmp;


	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 800093a:	480e      	ldr	r0, [pc, #56]	@ (8000974 <PHYStatusCheck+0x40>)
 800093c:	f005 ff3c 	bl	80067b8 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	4619      	mov	r1, r3
 8000944:	200f      	movs	r0, #15
 8000946:	f002 fe75 	bl	8003634 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d106      	bne.n	800095e <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <PHYStatusCheck+0x44>)
 8000952:	f005 ff31 	bl	80067b8 <iprintf>
			HAL_Delay(1500);
 8000956:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800095a:	f003 fbcb 	bl	80040f4 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0ea      	beq.n	800093a <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <PHYStatusCheck+0x48>)
 8000966:	f005 ff27 	bl	80067b8 <iprintf>

}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	08007ca0 	.word	0x08007ca0
 8000978:	08007cc8 	.word	0x08007cc8
 800097c:	08007cdc 	.word	0x08007cdc

08000980 <PrintPHYConf>:

void PrintPHYConf(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	200b      	movs	r0, #11
 800098c:	f002 fe52 	bl	8003634 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000990:	793b      	ldrb	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 8000996:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <PrintPHYConf+0x68>)
 8000998:	f005 ff0e 	bl	80067b8 <iprintf>
 800099c:	e002      	b.n	80009a4 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 800099e:	4813      	ldr	r0, [pc, #76]	@ (80009ec <PrintPHYConf+0x6c>)
 80009a0:	f005 ff0a 	bl	80067b8 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 80009a4:	797b      	ldrb	r3, [r7, #5]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d103      	bne.n	80009b2 <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 80009aa:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <PrintPHYConf+0x70>)
 80009ac:	f005 ff04 	bl	80067b8 <iprintf>
 80009b0:	e002      	b.n	80009b8 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 80009b2:	4810      	ldr	r0, [pc, #64]	@ (80009f4 <PrintPHYConf+0x74>)
 80009b4:	f005 ff00 	bl	80067b8 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d103      	bne.n	80009c6 <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 80009be:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <PrintPHYConf+0x78>)
 80009c0:	f005 fefa 	bl	80067b8 <iprintf>
 80009c4:	e002      	b.n	80009cc <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <PrintPHYConf+0x7c>)
 80009c8:	f005 fef6 	bl	80067b8 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 80009cc:	79bb      	ldrb	r3, [r7, #6]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d103      	bne.n	80009da <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 80009d2:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <PrintPHYConf+0x80>)
 80009d4:	f005 fef0 	bl	80067b8 <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 80009d8:	e002      	b.n	80009e0 <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 80009da:	480a      	ldr	r0, [pc, #40]	@ (8000a04 <PrintPHYConf+0x84>)
 80009dc:	f005 feec 	bl	80067b8 <iprintf>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	08007cf8 	.word	0x08007cf8
 80009ec:	08007d1c 	.word	0x08007d1c
 80009f0:	08007d3c 	.word	0x08007d3c
 80009f4:	08007d58 	.word	0x08007d58
 80009f8:	08007d78 	.word	0x08007d78
 80009fc:	08007d8c 	.word	0x08007d8c
 8000a00:	08007da0 	.word	0x08007da0
 8000a04:	08007db0 	.word	0x08007db0

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a4a:	f003 fe97 	bl	800477c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a25      	ldr	r2, [pc, #148]	@ (8000b10 <HAL_SPI_MspInit+0xb4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d144      	bne.n	8000b08 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7e:	4b25      	ldr	r3, [pc, #148]	@ (8000b14 <HAL_SPI_MspInit+0xb8>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a82:	4a24      	ldr	r2, [pc, #144]	@ (8000b14 <HAL_SPI_MspInit+0xb8>)
 8000a84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a8a:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <HAL_SPI_MspInit+0xb8>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <HAL_SPI_MspInit+0xb8>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b14 <HAL_SPI_MspInit+0xb8>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_SPI_MspInit+0xb8>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_SPI_MspInit+0xb8>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a18      	ldr	r2, [pc, #96]	@ (8000b14 <HAL_SPI_MspInit+0xb8>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <HAL_SPI_MspInit+0xb8>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ac6:	23c0      	movs	r3, #192	@ 0xc0
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae4:	f003 fc0c 	bl	8004300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af8:	2305      	movs	r3, #5
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <HAL_SPI_MspInit+0xbc>)
 8000b04:	f003 fbfc 	bl	8004300 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	@ 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40013000 	.word	0x40013000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b09e      	sub	sp, #120	@ 0x78
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	2254      	movs	r2, #84	@ 0x54
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f006 f85f 	bl	8006c00 <memset>
  if(huart->Instance==USART2)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc4 <HAL_UART_MspInit+0xa8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d136      	bne.n	8000bba <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 fb4d 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f7ff ff50 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b68:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6c:	4a16      	ldr	r2, [pc, #88]	@ (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b84:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb6:	f003 fba3 	bl	8004300 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bba:	bf00      	nop
 8000bbc:	3778      	adds	r7, #120	@ 0x78
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40021000 	.word	0x40021000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f003 fa49 	bl	80040b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI15_10_IRQn 0 */
//  BSP_PB_IRQHandler(BUTTON_USER);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return 1;
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_kill>:

int _kill(int pid, int sig)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c52:	f006 f8c7 	bl	8006de4 <__errno>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2216      	movs	r2, #22
 8000c5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_exit>:

void _exit (int status)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffe7 	bl	8000c48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c7a:	bf00      	nop
 8000c7c:	e7fd      	b.n	8000c7a <_exit+0x12>

08000c7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e00a      	b.n	8000ca6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c90:	f3af 8000 	nop.w
 8000c94:	4601      	mov	r1, r0
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	60ba      	str	r2, [r7, #8]
 8000c9c:	b2ca      	uxtb	r2, r1
 8000c9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	dbf0      	blt.n	8000c90 <_read+0x12>
  }

  return len;
 8000cae:	687b      	ldr	r3, [r7, #4]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e009      	b.n	8000cde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	60ba      	str	r2, [r7, #8]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fe20 	bl	8000918 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dbf1      	blt.n	8000cca <_write+0x12>
  }
  return len;
 8000ce6:	687b      	ldr	r3, [r7, #4]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_close>:

int _close(int file)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d18:	605a      	str	r2, [r3, #4]
  return 0;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_isatty>:

int _isatty(int file)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d30:	2301      	movs	r3, #1
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b085      	sub	sp, #20
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f006 f82c 	bl	8006de4 <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20020000 	.word	0x20020000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	200009d4 	.word	0x200009d4
 8000dc0:	20001100 	.word	0x20001100

08000dc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	460b      	mov	r3, r1
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d102      	bne.n	8000e02 <make_http_response_head+0x1a>
 8000dfc:	4b42      	ldr	r3, [pc, #264]	@ (8000f08 <make_http_response_head+0x120>)
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e061      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 8000e02:	7afb      	ldrb	r3, [r7, #11]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d102      	bne.n	8000e0e <make_http_response_head+0x26>
 8000e08:	4b40      	ldr	r3, [pc, #256]	@ (8000f0c <make_http_response_head+0x124>)
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	e05b      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 8000e0e:	7afb      	ldrb	r3, [r7, #11]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d102      	bne.n	8000e1a <make_http_response_head+0x32>
 8000e14:	4b3e      	ldr	r3, [pc, #248]	@ (8000f10 <make_http_response_head+0x128>)
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	e055      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 8000e1a:	7afb      	ldrb	r3, [r7, #11]
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d102      	bne.n	8000e26 <make_http_response_head+0x3e>
 8000e20:	4b3c      	ldr	r3, [pc, #240]	@ (8000f14 <make_http_response_head+0x12c>)
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	e04f      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 8000e26:	7afb      	ldrb	r3, [r7, #11]
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	d102      	bne.n	8000e32 <make_http_response_head+0x4a>
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f18 <make_http_response_head+0x130>)
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	e049      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 8000e32:	7afb      	ldrb	r3, [r7, #11]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d102      	bne.n	8000e3e <make_http_response_head+0x56>
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <make_http_response_head+0x134>)
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	e043      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 8000e3e:	7afb      	ldrb	r3, [r7, #11]
 8000e40:	2b0a      	cmp	r3, #10
 8000e42:	d102      	bne.n	8000e4a <make_http_response_head+0x62>
 8000e44:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <make_http_response_head+0x138>)
 8000e46:	61fb      	str	r3, [r7, #28]
 8000e48:	e03d      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 8000e4a:	7afb      	ldrb	r3, [r7, #11]
 8000e4c:	2b0c      	cmp	r3, #12
 8000e4e:	d102      	bne.n	8000e56 <make_http_response_head+0x6e>
 8000e50:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <make_http_response_head+0x13c>)
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	e037      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 8000e56:	7afb      	ldrb	r3, [r7, #11]
 8000e58:	2b0b      	cmp	r3, #11
 8000e5a:	d102      	bne.n	8000e62 <make_http_response_head+0x7a>
 8000e5c:	4b32      	ldr	r3, [pc, #200]	@ (8000f28 <make_http_response_head+0x140>)
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	e031      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d102      	bne.n	8000e6e <make_http_response_head+0x86>
 8000e68:	4b30      	ldr	r3, [pc, #192]	@ (8000f2c <make_http_response_head+0x144>)
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	e02b      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 8000e6e:	7afb      	ldrb	r3, [r7, #11]
 8000e70:	2b0d      	cmp	r3, #13
 8000e72:	d102      	bne.n	8000e7a <make_http_response_head+0x92>
 8000e74:	4b2e      	ldr	r3, [pc, #184]	@ (8000f30 <make_http_response_head+0x148>)
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	e025      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 8000e7a:	7afb      	ldrb	r3, [r7, #11]
 8000e7c:	2b0e      	cmp	r3, #14
 8000e7e:	d102      	bne.n	8000e86 <make_http_response_head+0x9e>
 8000e80:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <make_http_response_head+0x14c>)
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	e01f      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 8000e86:	7afb      	ldrb	r3, [r7, #11]
 8000e88:	2b14      	cmp	r3, #20
 8000e8a:	d102      	bne.n	8000e92 <make_http_response_head+0xaa>
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <make_http_response_head+0x150>)
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	e019      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 8000e92:	7afb      	ldrb	r3, [r7, #11]
 8000e94:	2b15      	cmp	r3, #21
 8000e96:	d102      	bne.n	8000e9e <make_http_response_head+0xb6>
 8000e98:	4b28      	ldr	r3, [pc, #160]	@ (8000f3c <make_http_response_head+0x154>)
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	e013      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	2b16      	cmp	r3, #22
 8000ea2:	d102      	bne.n	8000eaa <make_http_response_head+0xc2>
 8000ea4:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <make_http_response_head+0x158>)
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	e00d      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	2b17      	cmp	r3, #23
 8000eae:	d102      	bne.n	8000eb6 <make_http_response_head+0xce>
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <make_http_response_head+0x15c>)
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	e007      	b.n	8000ec6 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 8000eb6:	7afb      	ldrb	r3, [r7, #11]
 8000eb8:	2b18      	cmp	r3, #24
 8000eba:	d102      	bne.n	8000ec2 <make_http_response_head+0xda>
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <make_http_response_head+0x160>)
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	e001      	b.n	8000ec6 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	491f      	ldr	r1, [pc, #124]	@ (8000f4c <make_http_response_head+0x164>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 fd9e 	bl	8006a10 <siprintf>
	strcpy(buf, head);
 8000ed4:	69f9      	ldr	r1, [r7, #28]
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f005 ffb1 	bl	8006e3e <strcpy>
	strcat(buf, tmp);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f005 fe94 	bl	8006c10 <strcat>
	strcat(buf, "\r\n\r\n");
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f7ff f9a3 	bl	8000234 <strlen>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a16      	ldr	r2, [pc, #88]	@ (8000f50 <make_http_response_head+0x168>)
 8000ef8:	6810      	ldr	r0, [r2, #0]
 8000efa:	6018      	str	r0, [r3, #0]
 8000efc:	7912      	ldrb	r2, [r2, #4]
 8000efe:	711a      	strb	r2, [r3, #4]
}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08007dc4 	.word	0x08007dc4
 8000f0c:	08007e18 	.word	0x08007e18
 8000f10:	08007e54 	.word	0x08007e54
 8000f14:	08007e90 	.word	0x08007e90
 8000f18:	08007ecc 	.word	0x08007ecc
 8000f1c:	08007f1c 	.word	0x08007f1c
 8000f20:	08007f70 	.word	0x08007f70
 8000f24:	08007fac 	.word	0x08007fac
 8000f28:	08007ff0 	.word	0x08007ff0
 8000f2c:	08008038 	.word	0x08008038
 8000f30:	08008074 	.word	0x08008074
 8000f34:	080080b0 	.word	0x080080b0
 8000f38:	080080f0 	.word	0x080080f0
 8000f3c:	08008140 	.word	0x08008140
 8000f40:	08008190 	.word	0x08008190
 8000f44:	080081d8 	.word	0x080081d8
 8000f48:	08008228 	.word	0x08008228
 8000f4c:	08008268 	.word	0x08008268
 8000f50:	0800826c 	.word	0x0800826c

08000f54 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 8000f62:	499f      	ldr	r1, [pc, #636]	@ (80011e0 <find_http_uri_type+0x28c>)
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f005 fed1 	bl	8006d0c <strstr>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d106      	bne.n	8000f7e <find_http_uri_type+0x2a>
 8000f70:	499c      	ldr	r1, [pc, #624]	@ (80011e4 <find_http_uri_type+0x290>)
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f005 feca 	bl	8006d0c <strstr>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <find_http_uri_type+0x32>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
 8000f84:	e127      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 8000f86:	4998      	ldr	r1, [pc, #608]	@ (80011e8 <find_http_uri_type+0x294>)
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f005 febf 	bl	8006d0c <strstr>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <find_http_uri_type+0x48>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 8000f9a:	e11c      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 8000f9c:	4993      	ldr	r1, [pc, #588]	@ (80011ec <find_http_uri_type+0x298>)
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f005 feb4 	bl	8006d0c <strstr>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <find_http_uri_type+0x64>
 8000faa:	4991      	ldr	r1, [pc, #580]	@ (80011f0 <find_http_uri_type+0x29c>)
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f005 fead 	bl	8006d0c <strstr>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <find_http_uri_type+0x6c>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2203      	movs	r2, #3
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e10a      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 8000fc0:	498c      	ldr	r1, [pc, #560]	@ (80011f4 <find_http_uri_type+0x2a0>)
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f005 fea2 	bl	8006d0c <strstr>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <find_http_uri_type+0x88>
 8000fce:	498a      	ldr	r1, [pc, #552]	@ (80011f8 <find_http_uri_type+0x2a4>)
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f005 fe9b 	bl	8006d0c <strstr>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <find_http_uri_type+0x90>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2204      	movs	r2, #4
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e0f8      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 8000fe4:	4985      	ldr	r1, [pc, #532]	@ (80011fc <find_http_uri_type+0x2a8>)
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f005 fe90 	bl	8006d0c <strstr>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <find_http_uri_type+0xa6>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2205      	movs	r2, #5
 8000ff6:	701a      	strb	r2, [r3, #0]
}
 8000ff8:	e0ed      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 8000ffa:	4981      	ldr	r1, [pc, #516]	@ (8001200 <find_http_uri_type+0x2ac>)
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f005 fe85 	bl	8006d0c <strstr>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d106      	bne.n	8001016 <find_http_uri_type+0xc2>
 8001008:	497e      	ldr	r1, [pc, #504]	@ (8001204 <find_http_uri_type+0x2b0>)
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f005 fe7e 	bl	8006d0c <strstr>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <find_http_uri_type+0xca>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2208      	movs	r2, #8
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	e0db      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 800101e:	497a      	ldr	r1, [pc, #488]	@ (8001208 <find_http_uri_type+0x2b4>)
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f005 fe73 	bl	8006d0c <strstr>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d106      	bne.n	800103a <find_http_uri_type+0xe6>
 800102c:	4977      	ldr	r1, [pc, #476]	@ (800120c <find_http_uri_type+0x2b8>)
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f005 fe6c 	bl	8006d0c <strstr>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <find_http_uri_type+0xee>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	220c      	movs	r2, #12
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e0c9      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 8001042:	4973      	ldr	r1, [pc, #460]	@ (8001210 <find_http_uri_type+0x2bc>)
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f005 fe61 	bl	8006d0c <strstr>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d106      	bne.n	800105e <find_http_uri_type+0x10a>
 8001050:	4970      	ldr	r1, [pc, #448]	@ (8001214 <find_http_uri_type+0x2c0>)
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f005 fe5a 	bl	8006d0c <strstr>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <find_http_uri_type+0x112>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	220b      	movs	r2, #11
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	e0b7      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 8001066:	4967      	ldr	r1, [pc, #412]	@ (8001204 <find_http_uri_type+0x2b0>)
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f005 fe4f 	bl	8006d0c <strstr>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <find_http_uri_type+0x12e>
 8001074:	4962      	ldr	r1, [pc, #392]	@ (8001200 <find_http_uri_type+0x2ac>)
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f005 fe48 	bl	8006d0c <strstr>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <find_http_uri_type+0x136>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2208      	movs	r2, #8
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e0a5      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 800108a:	4963      	ldr	r1, [pc, #396]	@ (8001218 <find_http_uri_type+0x2c4>)
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f005 fe3d 	bl	8006d0c <strstr>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d106      	bne.n	80010a6 <find_http_uri_type+0x152>
 8001098:	4960      	ldr	r1, [pc, #384]	@ (800121c <find_http_uri_type+0x2c8>)
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f005 fe36 	bl	8006d0c <strstr>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <find_http_uri_type+0x15a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2209      	movs	r2, #9
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e093      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 80010ae:	495c      	ldr	r1, [pc, #368]	@ (8001220 <find_http_uri_type+0x2cc>)
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f005 fe2b 	bl	8006d0c <strstr>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <find_http_uri_type+0x176>
 80010bc:	4959      	ldr	r1, [pc, #356]	@ (8001224 <find_http_uri_type+0x2d0>)
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f005 fe24 	bl	8006d0c <strstr>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <find_http_uri_type+0x17e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	220a      	movs	r2, #10
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e081      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 80010d2:	4955      	ldr	r1, [pc, #340]	@ (8001228 <find_http_uri_type+0x2d4>)
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f005 fe19 	bl	8006d0c <strstr>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d106      	bne.n	80010ee <find_http_uri_type+0x19a>
 80010e0:	4952      	ldr	r1, [pc, #328]	@ (800122c <find_http_uri_type+0x2d8>)
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f005 fe12 	bl	8006d0c <strstr>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <find_http_uri_type+0x1a2>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	220d      	movs	r2, #13
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e06f      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 80010f6:	494e      	ldr	r1, [pc, #312]	@ (8001230 <find_http_uri_type+0x2dc>)
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f005 fe07 	bl	8006d0c <strstr>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <find_http_uri_type+0x1be>
 8001104:	494b      	ldr	r1, [pc, #300]	@ (8001234 <find_http_uri_type+0x2e0>)
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f005 fe00 	bl	8006d0c <strstr>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <find_http_uri_type+0x1c6>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	220e      	movs	r2, #14
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e05d      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 800111a:	4947      	ldr	r1, [pc, #284]	@ (8001238 <find_http_uri_type+0x2e4>)
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f005 fdf5 	bl	8006d0c <strstr>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <find_http_uri_type+0x1e2>
 8001128:	4944      	ldr	r1, [pc, #272]	@ (800123c <find_http_uri_type+0x2e8>)
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f005 fdee 	bl	8006d0c <strstr>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <find_http_uri_type+0x1ea>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2214      	movs	r2, #20
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e04b      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 800113e:	4940      	ldr	r1, [pc, #256]	@ (8001240 <find_http_uri_type+0x2ec>)
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f005 fde3 	bl	8006d0c <strstr>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d106      	bne.n	800115a <find_http_uri_type+0x206>
 800114c:	493d      	ldr	r1, [pc, #244]	@ (8001244 <find_http_uri_type+0x2f0>)
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f005 fddc 	bl	8006d0c <strstr>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <find_http_uri_type+0x20e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2215      	movs	r2, #21
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e039      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 8001162:	4939      	ldr	r1, [pc, #228]	@ (8001248 <find_http_uri_type+0x2f4>)
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f005 fdd1 	bl	8006d0c <strstr>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d106      	bne.n	800117e <find_http_uri_type+0x22a>
 8001170:	4936      	ldr	r1, [pc, #216]	@ (800124c <find_http_uri_type+0x2f8>)
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f005 fdca 	bl	8006d0c <strstr>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <find_http_uri_type+0x232>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2216      	movs	r2, #22
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e027      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 8001186:	4932      	ldr	r1, [pc, #200]	@ (8001250 <find_http_uri_type+0x2fc>)
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f005 fdbf 	bl	8006d0c <strstr>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d106      	bne.n	80011a2 <find_http_uri_type+0x24e>
 8001194:	492f      	ldr	r1, [pc, #188]	@ (8001254 <find_http_uri_type+0x300>)
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f005 fdb8 	bl	8006d0c <strstr>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <find_http_uri_type+0x256>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2217      	movs	r2, #23
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e015      	b.n	80011d6 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 80011aa:	492b      	ldr	r1, [pc, #172]	@ (8001258 <find_http_uri_type+0x304>)
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f005 fdad 	bl	8006d0c <strstr>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <find_http_uri_type+0x272>
 80011b8:	4928      	ldr	r1, [pc, #160]	@ (800125c <find_http_uri_type+0x308>)
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f005 fda6 	bl	8006d0c <strstr>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <find_http_uri_type+0x27a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2218      	movs	r2, #24
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e003      	b.n	80011d6 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
}
 80011d4:	e7ff      	b.n	80011d6 <find_http_uri_type+0x282>
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	08008274 	.word	0x08008274
 80011e4:	0800827c 	.word	0x0800827c
 80011e8:	08008284 	.word	0x08008284
 80011ec:	0800828c 	.word	0x0800828c
 80011f0:	08008294 	.word	0x08008294
 80011f4:	0800829c 	.word	0x0800829c
 80011f8:	080082a4 	.word	0x080082a4
 80011fc:	080082ac 	.word	0x080082ac
 8001200:	080082b4 	.word	0x080082b4
 8001204:	080082bc 	.word	0x080082bc
 8001208:	080082c4 	.word	0x080082c4
 800120c:	080082cc 	.word	0x080082cc
 8001210:	080082d4 	.word	0x080082d4
 8001214:	080082d8 	.word	0x080082d8
 8001218:	080082dc 	.word	0x080082dc
 800121c:	080082e4 	.word	0x080082e4
 8001220:	080082ec 	.word	0x080082ec
 8001224:	080082f4 	.word	0x080082f4
 8001228:	080082fc 	.word	0x080082fc
 800122c:	08008304 	.word	0x08008304
 8001230:	0800830c 	.word	0x0800830c
 8001234:	08008314 	.word	0x08008314
 8001238:	0800831c 	.word	0x0800831c
 800123c:	08008324 	.word	0x08008324
 8001240:	0800832c 	.word	0x0800832c
 8001244:	08008334 	.word	0x08008334
 8001248:	0800833c 	.word	0x0800833c
 800124c:	08008344 	.word	0x08008344
 8001250:	0800834c 	.word	0x0800834c
 8001254:	08008354 	.word	0x08008354
 8001258:	0800835c 	.word	0x0800835c
 800125c:	08008364 	.word	0x08008364

08001260 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 800126a:	4932      	ldr	r1, [pc, #200]	@ (8001334 <parse_http_request+0xd4>)
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f005 fcf1 	bl	8006c54 <strtok>
 8001272:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
    return;
 8001280:	e054      	b.n	800132c <parse_http_request+0xcc>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 8001282:	492d      	ldr	r1, [pc, #180]	@ (8001338 <parse_http_request+0xd8>)
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f7fe ffcb 	bl	8000220 <strcmp>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <parse_http_request+0x3e>
 8001290:	492a      	ldr	r1, [pc, #168]	@ (800133c <parse_http_request+0xdc>)
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7fe ffc4 	bl	8000220 <strcmp>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <parse_http_request+0x50>
  {
    request->METHOD = METHOD_GET;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 80012a4:	4923      	ldr	r1, [pc, #140]	@ (8001334 <parse_http_request+0xd4>)
 80012a6:	2000      	movs	r0, #0
 80012a8:	f005 fcd4 	bl	8006c54 <strtok>
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	e030      	b.n	8001312 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 80012b0:	4923      	ldr	r1, [pc, #140]	@ (8001340 <parse_http_request+0xe0>)
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7fe ffb4 	bl	8000220 <strcmp>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <parse_http_request+0x6c>
 80012be:	4921      	ldr	r1, [pc, #132]	@ (8001344 <parse_http_request+0xe4>)
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7fe ffad 	bl	8000220 <strcmp>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d108      	bne.n	80012de <parse_http_request+0x7e>
  {
    request->METHOD = METHOD_HEAD;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2202      	movs	r2, #2
 80012d0:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 80012d2:	4918      	ldr	r1, [pc, #96]	@ (8001334 <parse_http_request+0xd4>)
 80012d4:	2000      	movs	r0, #0
 80012d6:	f005 fcbd 	bl	8006c54 <strtok>
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	e019      	b.n	8001312 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 80012de:	491a      	ldr	r1, [pc, #104]	@ (8001348 <parse_http_request+0xe8>)
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7fe ff9d 	bl	8000220 <strcmp>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <parse_http_request+0x9a>
 80012ec:	4917      	ldr	r1, [pc, #92]	@ (800134c <parse_http_request+0xec>)
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f7fe ff96 	bl	8000220 <strcmp>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d108      	bne.n	800130c <parse_http_request+0xac>
  {
    nexttok = strtok(NULL,"\0");
 80012fa:	4915      	ldr	r1, [pc, #84]	@ (8001350 <parse_http_request+0xf0>)
 80012fc:	2000      	movs	r0, #0
 80012fe:	f005 fca9 	bl	8006c54 <strtok>
 8001302:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2203      	movs	r2, #3
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	e002      	b.n	8001312 <parse_http_request+0xb2>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d103      	bne.n	8001320 <parse_http_request+0xc0>
  {
    request->METHOD = METHOD_ERR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
    return;
 800131e:	e005      	b.n	800132c <parse_http_request+0xcc>
  }
  strcpy((char *)request->URI, nexttok);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3302      	adds	r3, #2
 8001324:	68f9      	ldr	r1, [r7, #12]
 8001326:	4618      	mov	r0, r3
 8001328:	f005 fd89 	bl	8006e3e <strcpy>
}
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	0800836c 	.word	0x0800836c
 8001338:	08008370 	.word	0x08008370
 800133c:	08008374 	.word	0x08008374
 8001340:	08008378 	.word	0x08008378
 8001344:	08008380 	.word	0x08008380
 8001348:	08008388 	.word	0x08008388
 800134c:	08008390 	.word	0x08008390
 8001350:	08008398 	.word	0x08008398

08001354 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <get_http_uri_name+0x14>
 8001364:	2300      	movs	r3, #0
 8001366:	e017      	b.n	8001398 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	6838      	ldr	r0, [r7, #0]
 800136c:	f005 fd67 	bl	8006e3e <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 8001370:	490b      	ldr	r1, [pc, #44]	@ (80013a0 <get_http_uri_name+0x4c>)
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f005 fc6e 	bl	8006c54 <strtok>
 8001378:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 800137a:	490a      	ldr	r1, [pc, #40]	@ (80013a4 <get_http_uri_name+0x50>)
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f7fe ff4f 	bl	8000220 <strcmp>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <get_http_uri_name+0x3a>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f005 fd54 	bl	8006e3e <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	080083b4 	.word	0x080083b4
 80013a4:	080083b8 	.word	0x080083b8

080013a8 <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
void mid(char* src, char* s1, char* s2, char* sub)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f005 fca7 	bl	8006d0c <strstr>
 80013be:	61f8      	str	r0, [r7, #28]
	sub1+=strlen((char*)s1);
 80013c0:	68b8      	ldr	r0, [r7, #8]
 80013c2:	f7fe ff37 	bl	8000234 <strlen>
 80013c6:	4602      	mov	r2, r0
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	4413      	add	r3, r2
 80013cc:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	69f8      	ldr	r0, [r7, #28]
 80013d2:	f005 fc9b 	bl	8006d0c <strstr>
 80013d6:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 80013e0:	8afb      	ldrh	r3, [r7, #22]
 80013e2:	461a      	mov	r2, r3
 80013e4:	69f9      	ldr	r1, [r7, #28]
 80013e6:	6838      	ldr	r0, [r7, #0]
 80013e8:	f005 fc21 	bl	8006c2e <strncpy>
	sub[n]='\0';
 80013ec:	8afb      	ldrh	r3, [r7, #22]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <default_wdt_reset>:
void default_wdt_reset(void) {;}
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <httpServer_Sockinit>:
void (*HTTPServer_ReStart)(void) = default_mcu_reset;
void (*HTTPServer_WDT_Reset)(void) = default_wdt_reset;

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e009      	b.n	8001442 <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	441a      	add	r2, r3
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	7811      	ldrb	r1, [r2, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <httpServer_Sockinit+0x3c>)
 800143a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	3301      	adds	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	429a      	cmp	r2, r3
 8001448:	d3f1      	bcc.n	800142e <httpServer_Sockinit+0x12>
	}
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	200009d8 	.word	0x200009d8

0800145c <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4a03      	ldr	r2, [pc, #12]	@ (8001478 <getHTTPSocketNum+0x1c>)
 800146a:	5cd3      	ldrb	r3, [r2, r3]
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	200009d8 	.word	0x200009d8

0800147c <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e00b      	b.n	80014a4 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <getHTTPSequenceNum+0x40>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	429a      	cmp	r2, r3
 8001496:	d102      	bne.n	800149e <getHTTPSequenceNum+0x22>
 8001498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149c:	e007      	b.n	80014ae <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	3301      	adds	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b07      	cmp	r3, #7
 80014a8:	d9f0      	bls.n	800148c <getHTTPSequenceNum+0x10>

	return -1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200009d8 	.word	0x200009d8

080014c0 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <httpServer_init+0x30>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 80014d6:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <httpServer_init+0x34>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	6839      	ldr	r1, [r7, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff9b 	bl	800141c <httpServer_Sockinit>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200009f0 	.word	0x200009f0
 80014f4:	200009f4 	.word	0x200009f4

080014f8 <reg_httpServer_cbfunc>:


/* Register the call back functions for HTTP Server */
void reg_httpServer_cbfunc(void(*mcu_reset)(void), void(*wdt_reset)(void))
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	// Callback: HW Reset and WDT reset function for each MCU platforms
	if(mcu_reset) HTTPServer_ReStart = mcu_reset;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <reg_httpServer_cbfunc+0x16>
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <reg_httpServer_cbfunc+0x30>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <reg_httpServer_cbfunc+0x22>
 8001514:	4a05      	ldr	r2, [pc, #20]	@ (800152c <reg_httpServer_cbfunc+0x34>)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6013      	str	r3, [r2, #0]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000024 	.word	0x20000024
 800152c:	20000028 	.word	0x20000028

08001530 <httpServer_run>:


void httpServer_run(uint8_t seqnum)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]

#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	81fb      	strh	r3, [r7, #14]
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 8001546:	4bc2      	ldr	r3, [pc, #776]	@ (8001850 <httpServer_run+0x320>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4ac2      	ldr	r2, [pc, #776]	@ (8001854 <httpServer_run+0x324>)
 800154c:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 800154e:	4bc2      	ldr	r3, [pc, #776]	@ (8001858 <httpServer_run+0x328>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4ac2      	ldr	r2, [pc, #776]	@ (800185c <httpServer_run+0x32c>)
 8001554:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff7f 	bl	800145c <getHTTPSocketNum>
 800155e:	4603      	mov	r3, r0
 8001560:	737b      	strb	r3, [r7, #13]

	/* HTTP Service Start */
	switch(getSn_SR(s))
 8001562:	7b7b      	ldrb	r3, [r7, #13]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	3301      	adds	r3, #1
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800156e:	4618      	mov	r0, r3
 8001570:	f000 ffcc 	bl	800250c <WIZCHIP_READ>
 8001574:	4603      	mov	r3, r0
 8001576:	2b1c      	cmp	r3, #28
 8001578:	f200 81ad 	bhi.w	80018d6 <httpServer_run+0x3a6>
 800157c:	a201      	add	r2, pc, #4	@ (adr r2, 8001584 <httpServer_run+0x54>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	080018a1 	.word	0x080018a1
 8001588:	080018d7 	.word	0x080018d7
 800158c:	080018d7 	.word	0x080018d7
 8001590:	080018d7 	.word	0x080018d7
 8001594:	080018d7 	.word	0x080018d7
 8001598:	080018d7 	.word	0x080018d7
 800159c:	080018d7 	.word	0x080018d7
 80015a0:	080018d7 	.word	0x080018d7
 80015a4:	080018d7 	.word	0x080018d7
 80015a8:	080018d7 	.word	0x080018d7
 80015ac:	080018d7 	.word	0x080018d7
 80015b0:	080018d7 	.word	0x080018d7
 80015b4:	080018d7 	.word	0x080018d7
 80015b8:	080018d7 	.word	0x080018d7
 80015bc:	080018d7 	.word	0x080018d7
 80015c0:	080018d7 	.word	0x080018d7
 80015c4:	080018d7 	.word	0x080018d7
 80015c8:	080018d7 	.word	0x080018d7
 80015cc:	080018d7 	.word	0x080018d7
 80015d0:	080018cd 	.word	0x080018cd
 80015d4:	080018d7 	.word	0x080018d7
 80015d8:	080018d7 	.word	0x080018d7
 80015dc:	080018d7 	.word	0x080018d7
 80015e0:	080015f9 	.word	0x080015f9
 80015e4:	080018d7 	.word	0x080018d7
 80015e8:	080018d7 	.word	0x080018d7
 80015ec:	080018d7 	.word	0x080018d7
 80015f0:	080018d7 	.word	0x080018d7
 80015f4:	0800188d 	.word	0x0800188d
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	3301      	adds	r3, #1
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001604:	4618      	mov	r0, r3
 8001606:	f000 ff81 	bl	800250c <WIZCHIP_READ>
 800160a:	4603      	mov	r3, r0
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d009      	beq.n	8001628 <httpServer_run+0xf8>
			{
				setSn_IR(s, Sn_IR_CON);
 8001614:	7b7b      	ldrb	r3, [r7, #13]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	3301      	adds	r3, #1
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001620:	2101      	movs	r1, #1
 8001622:	4618      	mov	r0, r3
 8001624:	f000 ffbe 	bl	80025a4 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4a8d      	ldr	r2, [pc, #564]	@ (8001860 <httpServer_run+0x330>)
 800162c:	2194      	movs	r1, #148	@ 0x94
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b04      	cmp	r3, #4
 8001638:	f000 80db 	beq.w	80017f2 <httpServer_run+0x2c2>
 800163c:	2b04      	cmp	r3, #4
 800163e:	f300 8105 	bgt.w	800184c <httpServer_run+0x31c>
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <httpServer_run+0x11e>
 8001646:	2b03      	cmp	r3, #3
 8001648:	f000 80b2 	beq.w	80017b0 <httpServer_run+0x280>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 800164c:	e0fe      	b.n	800184c <httpServer_run+0x31c>
					if ((len = getSn_RX_RSR(s)) > 0)
 800164e:	7b7b      	ldrb	r3, [r7, #13]
 8001650:	4618      	mov	r0, r3
 8001652:	f001 f8fe 	bl	8002852 <getSn_RX_RSR>
 8001656:	4603      	mov	r3, r0
 8001658:	82fb      	strh	r3, [r7, #22]
 800165a:	8afb      	ldrh	r3, [r7, #22]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8111 	beq.w	8001884 <httpServer_run+0x354>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 8001662:	8afb      	ldrh	r3, [r7, #22]
 8001664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001668:	d902      	bls.n	8001670 <httpServer_run+0x140>
 800166a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800166e:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 8001670:	4b78      	ldr	r3, [pc, #480]	@ (8001854 <httpServer_run+0x324>)
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	8afa      	ldrh	r2, [r7, #22]
 8001676:	7b7b      	ldrb	r3, [r7, #13]
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fd31 	bl	80030e0 <recv>
 800167e:	4603      	mov	r3, r0
 8001680:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 8001682:	4b74      	ldr	r3, [pc, #464]	@ (8001854 <httpServer_run+0x324>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	8afb      	ldrh	r3, [r7, #22]
 8001688:	4413      	add	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 800168e:	4b73      	ldr	r3, [pc, #460]	@ (800185c <httpServer_run+0x32c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a70      	ldr	r2, [pc, #448]	@ (8001854 <httpServer_run+0x324>)
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fde1 	bl	8001260 <parse_http_request>
						getSn_DIPR(s, destip);
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	3301      	adds	r3, #1
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80016aa:	4618      	mov	r0, r3
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	2204      	movs	r2, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	f000 ffc4 	bl	8002640 <WIZCHIP_READ_BUF>
						destport = getSn_DPORT(s);
 80016b8:	7b7b      	ldrb	r3, [r7, #13]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	3301      	adds	r3, #1
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 ff21 	bl	800250c <WIZCHIP_READ>
 80016ca:	4603      	mov	r3, r0
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b29c      	uxth	r4, r3
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	3301      	adds	r3, #1
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 ff15 	bl	800250c <WIZCHIP_READ>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4423      	add	r3, r4
 80016e6:	81fb      	strh	r3, [r7, #14]
						printf("\r\n");
 80016e8:	485e      	ldr	r0, [pc, #376]	@ (8001864 <httpServer_run+0x334>)
 80016ea:	f005 f8cd 	bl	8006888 <puts>
						printf("> HTTPSocket[%d] : HTTP Request received ", s);
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	4619      	mov	r1, r3
 80016f2:	485d      	ldr	r0, [pc, #372]	@ (8001868 <httpServer_run+0x338>)
 80016f4:	f005 f860 	bl	80067b8 <iprintf>
						printf("from %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 80016f8:	7a3b      	ldrb	r3, [r7, #8]
 80016fa:	4619      	mov	r1, r3
 80016fc:	7a7b      	ldrb	r3, [r7, #9]
 80016fe:	4618      	mov	r0, r3
 8001700:	7abb      	ldrb	r3, [r7, #10]
 8001702:	461c      	mov	r4, r3
 8001704:	7afb      	ldrb	r3, [r7, #11]
 8001706:	461a      	mov	r2, r3
 8001708:	89fb      	ldrh	r3, [r7, #14]
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9200      	str	r2, [sp, #0]
 800170e:	4623      	mov	r3, r4
 8001710:	4602      	mov	r2, r0
 8001712:	4856      	ldr	r0, [pc, #344]	@ (800186c <httpServer_run+0x33c>)
 8001714:	f005 f850 	bl	80067b8 <iprintf>
						printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE\r\n", s);
 8001718:	7b7b      	ldrb	r3, [r7, #13]
 800171a:	4619      	mov	r1, r3
 800171c:	4854      	ldr	r0, [pc, #336]	@ (8001870 <httpServer_run+0x340>)
 800171e:	f005 f84b 	bl	80067b8 <iprintf>
						http_process_handler(s, parsed_http_request);
 8001722:	4b4e      	ldr	r3, [pc, #312]	@ (800185c <httpServer_run+0x32c>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	7b7b      	ldrb	r3, [r7, #13]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fafe 	bl	8001d2c <http_process_handler>
						gettime = get_httpServer_timecount();
 8001730:	f000 fd7e 	bl	8002230 <get_httpServer_timecount>
 8001734:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 8001736:	e00c      	b.n	8001752 <httpServer_run+0x222>
							if((get_httpServer_timecount() - gettime) > 3)
 8001738:	f000 fd7a 	bl	8002230 <get_httpServer_timecount>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b03      	cmp	r3, #3
 8001744:	d905      	bls.n	8001752 <httpServer_run+0x222>
								printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE: TX Buffer clear timeout\r\n", s);
 8001746:	7b7b      	ldrb	r3, [r7, #13]
 8001748:	4619      	mov	r1, r3
 800174a:	484a      	ldr	r0, [pc, #296]	@ (8001874 <httpServer_run+0x344>)
 800174c:	f005 f834 	bl	80067b8 <iprintf>
								break;
 8001750:	e012      	b.n	8001778 <httpServer_run+0x248>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 8001752:	7b7b      	ldrb	r3, [r7, #13]
 8001754:	4618      	mov	r0, r3
 8001756:	f001 f833 	bl	80027c0 <getSn_TX_FSR>
 800175a:	4603      	mov	r3, r0
 800175c:	461c      	mov	r4, r3
 800175e:	7b7b      	ldrb	r3, [r7, #13]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	3301      	adds	r3, #1
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fece 	bl	800250c <WIZCHIP_READ>
 8001770:	4603      	mov	r3, r0
 8001772:	029b      	lsls	r3, r3, #10
 8001774:	429c      	cmp	r4, r3
 8001776:	d1df      	bne.n	8001738 <httpServer_run+0x208>
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4a39      	ldr	r2, [pc, #228]	@ (8001860 <httpServer_run+0x330>)
 800177c:	2194      	movs	r1, #148	@ 0x94
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	4413      	add	r3, r2
 8001784:	3388      	adds	r3, #136	@ 0x88
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <httpServer_run+0x26e>
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4a34      	ldr	r2, [pc, #208]	@ (8001860 <httpServer_run+0x330>)
 8001790:	2194      	movs	r1, #148	@ 0x94
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	2203      	movs	r2, #3
 800179a:	701a      	strb	r2, [r3, #0]
					break;
 800179c:	e072      	b.n	8001884 <httpServer_run+0x354>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001860 <httpServer_run+0x330>)
 80017a2:	2194      	movs	r1, #148	@ 0x94
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	2204      	movs	r2, #4
 80017ac:	701a      	strb	r2, [r3, #0]
					break;
 80017ae:	e069      	b.n	8001884 <httpServer_run+0x354>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_INPROC\r\n", s);
 80017b0:	7b7b      	ldrb	r3, [r7, #13]
 80017b2:	4619      	mov	r1, r3
 80017b4:	4830      	ldr	r0, [pc, #192]	@ (8001878 <httpServer_run+0x348>)
 80017b6:	f004 ffff 	bl	80067b8 <iprintf>
					send_http_response_body(s, 0, http_response, 0, 0);
 80017ba:	4b30      	ldr	r3, [pc, #192]	@ (800187c <httpServer_run+0x34c>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	7b78      	ldrb	r0, [r7, #13]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2300      	movs	r3, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	f000 f916 	bl	80019f8 <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4a24      	ldr	r2, [pc, #144]	@ (8001860 <httpServer_run+0x330>)
 80017d0:	2194      	movs	r1, #148	@ 0x94
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3388      	adds	r3, #136	@ 0x88
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d153      	bne.n	8001888 <httpServer_run+0x358>
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001860 <httpServer_run+0x330>)
 80017e4:	2194      	movs	r1, #148	@ 0x94
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	2204      	movs	r2, #4
 80017ee:	701a      	strb	r2, [r3, #0]
					break;
 80017f0:	e04a      	b.n	8001888 <httpServer_run+0x358>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_DONE\r\n", s);
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4822      	ldr	r0, [pc, #136]	@ (8001880 <httpServer_run+0x350>)
 80017f8:	f004 ffde 	bl	80067b8 <iprintf>
					HTTPSock_Status[seqnum].file_len = 0;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a18      	ldr	r2, [pc, #96]	@ (8001860 <httpServer_run+0x330>)
 8001800:	2194      	movs	r1, #148	@ 0x94
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3388      	adds	r3, #136	@ 0x88
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <httpServer_run+0x330>)
 8001812:	2194      	movs	r1, #148	@ 0x94
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	338c      	adds	r3, #140	@ 0x8c
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a0f      	ldr	r2, [pc, #60]	@ (8001860 <httpServer_run+0x330>)
 8001824:	2194      	movs	r1, #148	@ 0x94
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	3384      	adds	r3, #132	@ 0x84
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <httpServer_run+0x330>)
 8001836:	2194      	movs	r1, #148	@ 0x94
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 8001842:	7b7b      	ldrb	r3, [r7, #13]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fa4f 	bl	8001ce8 <http_disconnect>
					break;
 800184a:	e01e      	b.n	800188a <httpServer_run+0x35a>
					break;
 800184c:	bf00      	nop
 800184e:	e045      	b.n	80018dc <httpServer_run+0x3ac>
 8001850:	200009f4 	.word	0x200009f4
 8001854:	200009e0 	.word	0x200009e0
 8001858:	200009f0 	.word	0x200009f0
 800185c:	200009e4 	.word	0x200009e4
 8001860:	200009fc 	.word	0x200009fc
 8001864:	080083c0 	.word	0x080083c0
 8001868:	080083c4 	.word	0x080083c4
 800186c:	080083f0 	.word	0x080083f0
 8001870:	08008408 	.word	0x08008408
 8001874:	0800843c 	.word	0x0800843c
 8001878:	08008488 	.word	0x08008488
 800187c:	200009e8 	.word	0x200009e8
 8001880:	080084bc 	.word	0x080084bc
					break;
 8001884:	bf00      	nop
 8001886:	e029      	b.n	80018dc <httpServer_run+0x3ac>
					break;
 8001888:	bf00      	nop
			}
			break;
 800188a:	e027      	b.n	80018dc <httpServer_run+0x3ac>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
 800188c:	7b7b      	ldrb	r3, [r7, #13]
 800188e:	4619      	mov	r1, r3
 8001890:	4814      	ldr	r0, [pc, #80]	@ (80018e4 <httpServer_run+0x3b4>)
 8001892:	f004 ff91 	bl	80067b8 <iprintf>
#endif
			disconnect(s);
 8001896:	7b7b      	ldrb	r3, [r7, #13]
 8001898:	4618      	mov	r0, r3
 800189a:	f001 fab3 	bl	8002e04 <disconnect>
			break;
 800189e:	e01d      	b.n	80018dc <httpServer_run+0x3ac>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
 80018a0:	7b7b      	ldrb	r3, [r7, #13]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4810      	ldr	r0, [pc, #64]	@ (80018e8 <httpServer_run+0x3b8>)
 80018a6:	f004 ff87 	bl	80067b8 <iprintf>
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 80018aa:	7b78      	ldrb	r0, [r7, #13]
 80018ac:	2300      	movs	r3, #0
 80018ae:	2250      	movs	r2, #80	@ 0x50
 80018b0:	2101      	movs	r1, #1
 80018b2:	f001 f8cb 	bl	8002a4c <socket>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	7b7b      	ldrb	r3, [r7, #13]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d10c      	bne.n	80018da <httpServer_run+0x3aa>
			{
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
 80018c0:	7b7b      	ldrb	r3, [r7, #13]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4809      	ldr	r0, [pc, #36]	@ (80018ec <httpServer_run+0x3bc>)
 80018c6:	f004 ff77 	bl	80067b8 <iprintf>
#endif
			}
			break;
 80018ca:	e006      	b.n	80018da <httpServer_run+0x3aa>

		case SOCK_INIT:
			listen(s);
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fa3e 	bl	8002d50 <listen>
			break;
 80018d4:	e002      	b.n	80018dc <httpServer_run+0x3ac>

		case SOCK_LISTEN:
			break;

		default :
			break;
 80018d6:	bf00      	nop
 80018d8:	e000      	b.n	80018dc <httpServer_run+0x3ac>
			break;
 80018da:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 80018dc:	bf00      	nop
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	080084f0 	.word	0x080084f0
 80018e8:	08008510 	.word	0x08008510
 80018ec:	0800852c 	.word	0x0800852c

080018f0 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	603a      	str	r2, [r7, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	460b      	mov	r3, r1
 8001900:	71bb      	strb	r3, [r7, #6]
 8001902:	4613      	mov	r3, r2
 8001904:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 8001906:	88bb      	ldrh	r3, [r7, #4]
 8001908:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 800190c:	d032      	beq.n	8001974 <send_http_response_header+0x84>
 800190e:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 8001912:	dc3e      	bgt.n	8001992 <send_http_response_header+0xa2>
 8001914:	2bc8      	cmp	r3, #200	@ 0xc8
 8001916:	d003      	beq.n	8001920 <send_http_response_header+0x30>
 8001918:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800191c:	d01b      	beq.n	8001956 <send_http_response_header+0x66>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
#endif
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
			break;
		default:
			break;
 800191e:	e038      	b.n	8001992 <send_http_response_header+0xa2>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	2b08      	cmp	r3, #8
 8001924:	d00f      	beq.n	8001946 <send_http_response_header+0x56>
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	2b09      	cmp	r3, #9
 800192a:	d00c      	beq.n	8001946 <send_http_response_header+0x56>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_OK\r\n", s);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4619      	mov	r1, r3
 8001930:	4829      	ldr	r0, [pc, #164]	@ (80019d8 <send_http_response_header+0xe8>)
 8001932:	f004 ff41 	bl	80067b8 <iprintf>
				make_http_response_head((char*)http_response, content_type, body_len);
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <send_http_response_header+0xec>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	79b9      	ldrb	r1, [r7, #6]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fa52 	bl	8000de8 <make_http_response_head>
			break;
 8001944:	e026      	b.n	8001994 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - NONE / CGI or XML\r\n", s);
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4619      	mov	r1, r3
 800194a:	4825      	ldr	r0, [pc, #148]	@ (80019e0 <send_http_response_header+0xf0>)
 800194c:	f004 ff34 	bl	80067b8 <iprintf>
				http_status = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	80bb      	strh	r3, [r7, #4]
			break;
 8001954:	e01e      	b.n	8001994 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_BAD_REQ\r\n", s);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4619      	mov	r1, r3
 800195a:	4822      	ldr	r0, [pc, #136]	@ (80019e4 <send_http_response_header+0xf4>)
 800195c:	f004 ff2c 	bl	80067b8 <iprintf>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <send_http_response_header+0xec>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a20      	ldr	r2, [pc, #128]	@ (80019e8 <send_http_response_header+0xf8>)
 8001966:	4618      	mov	r0, r3
 8001968:	4611      	mov	r1, r2
 800196a:	2376      	movs	r3, #118	@ 0x76
 800196c:	461a      	mov	r2, r3
 800196e:	f005 fa6e 	bl	8006e4e <memcpy>
			break;
 8001972:	e00f      	b.n	8001994 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4619      	mov	r1, r3
 8001978:	481c      	ldr	r0, [pc, #112]	@ (80019ec <send_http_response_header+0xfc>)
 800197a:	f004 ff1d 	bl	80067b8 <iprintf>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <send_http_response_header+0xec>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <send_http_response_header+0x100>)
 8001984:	4618      	mov	r0, r3
 8001986:	4611      	mov	r1, r2
 8001988:	2399      	movs	r3, #153	@ 0x99
 800198a:	461a      	mov	r2, r3
 800198c:	f005 fa5f 	bl	8006e4e <memcpy>
			break;
 8001990:	e000      	b.n	8001994 <send_http_response_header+0xa4>
			break;
 8001992:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 8001994:	88bb      	ldrh	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01a      	beq.n	80019d0 <send_http_response_header+0xe0>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
 800199a:	79fc      	ldrb	r4, [r7, #7]
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <send_http_response_header+0xec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fc47 	bl	8000234 <strlen>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	4621      	mov	r1, r4
 80019ae:	4811      	ldr	r0, [pc, #68]	@ (80019f4 <send_http_response_header+0x104>)
 80019b0:	f004 ff02 	bl	80067b8 <iprintf>
#endif
		send(s, http_response, strlen((char *)http_response));
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <send_http_response_header+0xec>)
 80019b6:	681c      	ldr	r4, [r3, #0]
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <send_http_response_header+0xec>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fc39 	bl	8000234 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4621      	mov	r1, r4
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fa90 	bl	8002ef0 <send>
	}
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd90      	pop	{r4, r7, pc}
 80019d8:	08008548 	.word	0x08008548
 80019dc:	200009e8 	.word	0x200009e8
 80019e0:	08008580 	.word	0x08008580
 80019e4:	080085c0 	.word	0x080085c0
 80019e8:	08008ca8 	.word	0x08008ca8
 80019ec:	080085fc 	.word	0x080085fc
 80019f0:	08008c0c 	.word	0x08008c0c
 80019f4:	0800863c 	.word	0x0800863c

080019f8 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	4603      	mov	r3, r0
 8001a06:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	74fb      	strb	r3, [r7, #19]
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fd34 	bl	800147c <getHTTPSequenceNum>
 8001a14:	4603      	mov	r3, r0
 8001a16:	74bb      	strb	r3, [r7, #18]
 8001a18:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	f000 811b 	beq.w	8001c5a <send_http_response_body+0x262>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 8001a24:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001a28:	4a8e      	ldr	r2, [pc, #568]	@ (8001c64 <send_http_response_body+0x26c>)
 8001a2a:	2194      	movs	r1, #148	@ 0x94
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3388      	adds	r3, #136	@ 0x88
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d150      	bne.n	8001adc <send_http_response_body+0xe4>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a40:	d343      	bcc.n	8001aca <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 8001a42:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001a46:	4a87      	ldr	r2, [pc, #540]	@ (8001c64 <send_http_response_body+0x26c>)
 8001a48:	2194      	movs	r1, #148	@ 0x94
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3384      	adds	r3, #132	@ 0x84
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 8001a56:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001a5a:	4a82      	ldr	r2, [pc, #520]	@ (8001c64 <send_http_response_body+0x26c>)
 8001a5c:	2194      	movs	r1, #148	@ 0x94
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3388      	adds	r3, #136	@ 0x88
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 8001a6a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001a6e:	617b      	str	r3, [r7, #20]

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 8001a70:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001a74:	2294      	movs	r2, #148	@ 0x94
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c64 <send_http_response_body+0x26c>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3301      	adds	r3, #1
 8001a80:	2280      	movs	r2, #128	@ 0x80
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f005 f8bb 	bl	8006c00 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 8001a8a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001a8e:	2294      	movs	r2, #148	@ 0x94
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	4a73      	ldr	r2, [pc, #460]	@ (8001c64 <send_http_response_body+0x26c>)
 8001a96:	4413      	add	r3, r2
 8001a98:	3301      	adds	r3, #1
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f005 f9ce 	bl	8006e3e <strcpy>
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file name [ %s ]\r\n", s, HTTPSock_Status[get_seqnum].file_name);
 8001aa2:	7bf9      	ldrb	r1, [r7, #15]
 8001aa4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001aa8:	2294      	movs	r2, #148	@ 0x94
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	4a6d      	ldr	r2, [pc, #436]	@ (8001c64 <send_http_response_body+0x26c>)
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	486c      	ldr	r0, [pc, #432]	@ (8001c68 <send_http_response_body+0x270>)
 8001ab8:	f004 fe7e 	bl	80067b8 <iprintf>
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file len [ %ld ]byte\r\n", s, file_len);
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	6a3a      	ldr	r2, [r7, #32]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	486a      	ldr	r0, [pc, #424]	@ (8001c6c <send_http_response_body+0x274>)
 8001ac4:	f004 fe78 	bl	80067b8 <iprintf>
 8001ac8:	e03a      	b.n	8001b40 <send_http_response_body+0x148>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	617b      	str	r3, [r7, #20]

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, send_len);
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4866      	ldr	r0, [pc, #408]	@ (8001c70 <send_http_response_body+0x278>)
 8001ad6:	f004 fe6f 	bl	80067b8 <iprintf>
 8001ada:	e031      	b.n	8001b40 <send_http_response_body+0x148>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 8001adc:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001ae0:	4a60      	ldr	r2, [pc, #384]	@ (8001c64 <send_http_response_body+0x26c>)
 8001ae2:	2194      	movs	r1, #148	@ 0x94
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3388      	adds	r3, #136	@ 0x88
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001af2:	495c      	ldr	r1, [pc, #368]	@ (8001c64 <send_http_response_body+0x26c>)
 8001af4:	2094      	movs	r0, #148	@ 0x94
 8001af6:	fb00 f303 	mul.w	r3, r0, r3
 8001afa:	440b      	add	r3, r1
 8001afc:	338c      	adds	r3, #140	@ 0x8c
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]

		if(send_len > DATA_BUF_SIZE - 1)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b0a:	d303      	bcc.n	8001b14 <send_http_response_body+0x11c>
		{
			send_len = DATA_BUF_SIZE - 1;
 8001b0c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e00f      	b.n	8001b34 <send_http_response_body+0x13c>
			//HTTPSock_Status[get_seqnum]->file_offset += send_len;
		}
		else
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
 8001b14:	7bf9      	ldrb	r1, [r7, #15]
 8001b16:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001b1a:	4a52      	ldr	r2, [pc, #328]	@ (8001c64 <send_http_response_body+0x26c>)
 8001b1c:	2094      	movs	r0, #148	@ 0x94
 8001b1e:	fb00 f303 	mul.w	r3, r0, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3388      	adds	r3, #136	@ 0x88
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4851      	ldr	r0, [pc, #324]	@ (8001c70 <send_http_response_body+0x278>)
 8001b2c:	f004 fe44 	bl	80067b8 <iprintf>
#endif
			// Send process end
			flag_datasend_end = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	74fb      	strb	r3, [r7, #19]
		}
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - send len [ %ld ]byte\r\n", s, send_len);
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	484e      	ldr	r0, [pc, #312]	@ (8001c74 <send_http_response_body+0x27c>)
 8001b3c:	f004 fe3c 	bl	80067b8 <iprintf>
	//HTTPSock_Status[get_seqnum]->storage_type == CODEFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 8001b40:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001b44:	4a47      	ldr	r2, [pc, #284]	@ (8001c64 <send_http_response_body+0x26c>)
 8001b46:	2194      	movs	r1, #148	@ 0x94
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3390      	adds	r3, #144	@ 0x90
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d125      	bne.n	8001ba2 <send_http_response_body+0x1aa>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 8001b56:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001b5a:	4a42      	ldr	r2, [pc, #264]	@ (8001c64 <send_http_response_body+0x26c>)
 8001b5c:	2194      	movs	r1, #148	@ 0x94
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3388      	adds	r3, #136	@ 0x88
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d009      	beq.n	8001b80 <send_http_response_body+0x188>
 8001b6c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001b70:	4a3c      	ldr	r2, [pc, #240]	@ (8001c64 <send_http_response_body+0x26c>)
 8001b72:	2194      	movs	r1, #148	@ 0x94
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3384      	adds	r3, #132	@ 0x84
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b298      	uxth	r0, r3
 8001b84:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001b88:	4a36      	ldr	r2, [pc, #216]	@ (8001c64 <send_http_response_body+0x26c>)
 8001b8a:	2194      	movs	r1, #148	@ 0x94
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	338c      	adds	r3, #140	@ 0x8c
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f000 fbf2 	bl	8002384 <read_userReg_webContent>
 8001ba0:	e001      	b.n	8001ba6 <send_http_response_body+0x1ae>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
	}
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4832      	ldr	r0, [pc, #200]	@ (8001c78 <send_http_response_body+0x280>)
 8001bae:	f004 fe03 	bl	80067b8 <iprintf>
#endif

	if(send_len) send(s, buf, send_len);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <send_http_response_body+0x1d0>
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 f995 	bl	8002ef0 <send>
 8001bc6:	e001      	b.n	8001bcc <send_http_response_body+0x1d4>
	else flag_datasend_end = 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	74fb      	strb	r3, [r7, #19]

	if(flag_datasend_end)
 8001bcc:	7cfb      	ldrb	r3, [r7, #19]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d020      	beq.n	8001c14 <send_http_response_body+0x21c>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 8001bd2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001bd6:	4a23      	ldr	r2, [pc, #140]	@ (8001c64 <send_http_response_body+0x26c>)
 8001bd8:	2194      	movs	r1, #148	@ 0x94
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3384      	adds	r3, #132	@ 0x84
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 8001be6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001bea:	4a1e      	ldr	r2, [pc, #120]	@ (8001c64 <send_http_response_body+0x26c>)
 8001bec:	2194      	movs	r1, #148	@ 0x94
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3388      	adds	r3, #136	@ 0x88
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 8001bfa:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001bfe:	4a19      	ldr	r2, [pc, #100]	@ (8001c64 <send_http_response_body+0x26c>)
 8001c00:	2194      	movs	r1, #148	@ 0x94
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	338c      	adds	r3, #140	@ 0x8c
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	74fb      	strb	r3, [r7, #19]
 8001c12:	e023      	b.n	8001c5c <send_http_response_body+0x264>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 8001c14:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001c18:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <send_http_response_body+0x26c>)
 8001c1a:	2194      	movs	r1, #148	@ 0x94
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	338c      	adds	r3, #140	@ 0x8c
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	440a      	add	r2, r1
 8001c2e:	490d      	ldr	r1, [pc, #52]	@ (8001c64 <send_http_response_body+0x26c>)
 8001c30:	2094      	movs	r0, #148	@ 0x94
 8001c32:	fb00 f303 	mul.w	r3, r0, r3
 8001c36:	440b      	add	r3, r1
 8001c38:	338c      	adds	r3, #140	@ 0x8c
 8001c3a:	601a      	str	r2, [r3, #0]
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : HTTP Response body - offset [ %ld ]\r\n", s, HTTPSock_Status[get_seqnum].file_offset);
 8001c3c:	7bf9      	ldrb	r1, [r7, #15]
 8001c3e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001c42:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <send_http_response_body+0x26c>)
 8001c44:	2094      	movs	r0, #148	@ 0x94
 8001c46:	fb00 f303 	mul.w	r3, r0, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	338c      	adds	r3, #140	@ 0x8c
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	480a      	ldr	r0, [pc, #40]	@ (8001c7c <send_http_response_body+0x284>)
 8001c54:	f004 fdb0 	bl	80067b8 <iprintf>
 8001c58:	e000      	b.n	8001c5c <send_http_response_body+0x264>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8001c5a:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200009fc 	.word	0x200009fc
 8001c68:	08008678 	.word	0x08008678
 8001c6c:	080086b4 	.word	0x080086b4
 8001c70:	080086f4 	.word	0x080086f4
 8001c74:	08008734 	.word	0x08008734
 8001c78:	08008774 	.word	0x08008774
 8001c7c:	080087b0 	.word	0x080087b0

08001c80 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	4613      	mov	r3, r2
 8001c92:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <send_http_response_cgi+0x58>)
 8001c9e:	f004 fd8b 	bl	80067b8 <iprintf>
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK, file_len, http_body);
 8001ca2:	89ba      	ldrh	r2, [r7, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	4a0c      	ldr	r2, [pc, #48]	@ (8001cdc <send_http_response_cgi+0x5c>)
 8001cac:	490c      	ldr	r1, [pc, #48]	@ (8001ce0 <send_http_response_cgi+0x60>)
 8001cae:	68b8      	ldr	r0, [r7, #8]
 8001cb0:	f004 feae 	bl	8006a10 <siprintf>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	8afa      	ldrh	r2, [r7, #22]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4809      	ldr	r0, [pc, #36]	@ (8001ce4 <send_http_response_cgi+0x64>)
 8001cc0:	f004 fd7a 	bl	80067b8 <iprintf>
#endif

	send(s, buf, send_len);
 8001cc4:	8afa      	ldrh	r2, [r7, #22]
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 f910 	bl	8002ef0 <send>
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	080087ec 	.word	0x080087ec
 8001cdc:	08008824 	.word	0x08008824
 8001ce0:	08008860 	.word	0x08008860
 8001ce4:	0800886c 	.word	0x0800886c

08001ce8 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001cfe:	2108      	movs	r1, #8
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fc4f 	bl	80025a4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001d06:	bf00      	nop
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fbf9 	bl	800250c <WIZCHIP_READ>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f3      	bne.n	8001d08 <http_disconnect+0x20>

	return SOCK_OK;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8001d32:	af02      	add	r7, sp, #8
 8001d34:	4602      	mov	r2, r0
 8001d36:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001d3a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001d3e:	6019      	str	r1, [r3, #0]
 8001d40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001d44:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001d48:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	uint16_t content_num = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
	uint32_t file_len = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 8001d5c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001d60:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 ff45 	bl	8006c00 <memset>

	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8001d76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001d7a:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fb7b 	bl	800147c <getHTTPSequenceNum>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
 8001d8c:	f997 3218 	ldrsb.w	r3, [r7, #536]	@ 0x218
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	f000 822f 	beq.w	80021f6 <http_process_handler+0x4ca>

	http_status = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
	http_response = pHTTP_RX;
 8001d9e:	4baf      	ldr	r3, [pc, #700]	@ (800205c <http_process_handler+0x330>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4aaf      	ldr	r2, [pc, #700]	@ (8002060 <http_process_handler+0x334>)
 8001da4:	6013      	str	r3, [r2, #0]
	file_len = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	//method Analyze
	switch (p_http_request->METHOD)
 8001dac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001db0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	f000 816f 	beq.w	800209c <http_process_handler+0x370>
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	f300 8208 	bgt.w	80021d4 <http_process_handler+0x4a8>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <http_process_handler+0xac>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f2c0 8203 	blt.w	80021d4 <http_process_handler+0x4a8>
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	f200 81ff 	bhi.w	80021d4 <http_process_handler+0x4a8>
 8001dd6:	e010      	b.n	8001dfa <http_process_handler+0xce>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 8001dd8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ddc:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
			send_http_response_header(s, 0, 0, http_status);
 8001de0:	f8b7 221a 	ldrh.w	r2, [r7, #538]	@ 0x21a
 8001de4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001de8:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001dec:	7818      	ldrb	r0, [r3, #0]
 8001dee:	4613      	mov	r3, r2
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	f7ff fd7c 	bl	80018f0 <send_http_response_header>
			break;
 8001df8:	e200      	b.n	80021fc <http_process_handler+0x4d0>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 8001dfa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001dfe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3302      	adds	r3, #2
 8001e06:	f107 020c 	add.w	r2, r7, #12
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff faa1 	bl	8001354 <get_http_uri_name>
			uri_name = uri_buf;
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 8001e1a:	4992      	ldr	r1, [pc, #584]	@ (8002064 <http_process_handler+0x338>)
 8001e1c:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001e20:	f7fe f9fe 	bl	8000220 <strcmp>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10b      	bne.n	8001e42 <http_process_handler+0x116>
 8001e2a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001e2e:	498e      	ldr	r1, [pc, #568]	@ (8002068 <http_process_handler+0x33c>)
 8001e30:	461a      	mov	r2, r3
 8001e32:	460b      	mov	r3, r1
 8001e34:	cb03      	ldmia	r3!, {r0, r1}
 8001e36:	6010      	str	r0, [r2, #0]
 8001e38:	6051      	str	r1, [r2, #4]
 8001e3a:	8819      	ldrh	r1, [r3, #0]
 8001e3c:	789b      	ldrb	r3, [r3, #2]
 8001e3e:	8111      	strh	r1, [r2, #8]
 8001e40:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 8001e42:	498a      	ldr	r1, [pc, #552]	@ (800206c <http_process_handler+0x340>)
 8001e44:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001e48:	f7fe f9ea 	bl	8000220 <strcmp>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10a      	bne.n	8001e68 <http_process_handler+0x13c>
 8001e52:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001e56:	4a86      	ldr	r2, [pc, #536]	@ (8002070 <http_process_handler+0x344>)
 8001e58:	461c      	mov	r4, r3
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e5e:	6020      	str	r0, [r4, #0]
 8001e60:	6061      	str	r1, [r4, #4]
 8001e62:	60a2      	str	r2, [r4, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 8001e68:	4982      	ldr	r1, [pc, #520]	@ (8002074 <http_process_handler+0x348>)
 8001e6a:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001e6e:	f7fe f9d7 	bl	8000220 <strcmp>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10b      	bne.n	8001e90 <http_process_handler+0x164>
 8001e78:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001e7c:	4a7e      	ldr	r2, [pc, #504]	@ (8002078 <http_process_handler+0x34c>)
 8001e7e:	461d      	mov	r5, r3
 8001e80:	4614      	mov	r4, r2
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	6028      	str	r0, [r5, #0]
 8001e86:	6069      	str	r1, [r5, #4]
 8001e88:	60aa      	str	r2, [r5, #8]
 8001e8a:	60eb      	str	r3, [r5, #12]
 8001e8c:	8823      	ldrh	r3, [r4, #0]
 8001e8e:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 8001e90:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001e94:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f857 	bl	8000f54 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
 8001ea6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001eaa:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4872      	ldr	r0, [pc, #456]	@ (800207c <http_process_handler+0x350>)
 8001eb4:	f004 fc80 	bl	80067b8 <iprintf>
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
 8001eb8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001ebc:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001ec0:	7819      	ldrb	r1, [r3, #0]
 8001ec2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001ec6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	486b      	ldr	r0, [pc, #428]	@ (8002080 <http_process_handler+0x354>)
 8001ed2:	f004 fc71 	bl	80067b8 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
 8001ed6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001eda:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4867      	ldr	r0, [pc, #412]	@ (8002084 <http_process_handler+0x358>)
 8001ee8:	f004 fc66 	bl	80067b8 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 8001eec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001ef0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	785b      	ldrb	r3, [r3, #1]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d131      	bne.n	8001f60 <http_process_handler+0x234>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 8001efc:	4b62      	ldr	r3, [pc, #392]	@ (8002088 <http_process_handler+0x35c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 8001f04:	4619      	mov	r1, r3
 8001f06:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001f0a:	f000 fa79 	bl	8002400 <http_get_cgi_handler>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 8001f14:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <http_process_handler+0x21c>
 8001f1c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001f20:	f240 72be 	movw	r2, #1982	@ 0x7be
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d80f      	bhi.n	8001f48 <http_process_handler+0x21c>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 8001f28:	4b4d      	ldr	r3, [pc, #308]	@ (8002060 <http_process_handler+0x334>)
 8001f2a:	6819      	ldr	r1, [r3, #0]
 8001f2c:	4b56      	ldr	r3, [pc, #344]	@ (8002088 <http_process_handler+0x35c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001f34:	b29c      	uxth	r4, r3
 8001f36:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001f3a:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001f3e:	7818      	ldrb	r0, [r3, #0]
 8001f40:	4623      	mov	r3, r4
 8001f42:	f7ff fe9d 	bl	8001c80 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 8001f46:	e158      	b.n	80021fa <http_process_handler+0x4ce>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 8001f48:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001f4c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001f50:	7818      	ldrb	r0, [r3, #0]
 8001f52:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001f56:	2200      	movs	r2, #0
 8001f58:	2108      	movs	r1, #8
 8001f5a:	f7ff fcc9 	bl	80018f0 <send_http_response_header>
			break;
 8001f5e:	e14c      	b.n	80021fa <http_process_handler+0x4ce>
				if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 8001f60:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 8001f64:	f207 2112 	addw	r1, r7, #530	@ 0x212
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f9cd 	bl	800230c <find_userReg_webContent>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d011      	beq.n	8001f9c <http_process_handler+0x270>
					content_found = 1; // Web content found in code flash memory
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
					content_addr = (uint32_t)content_num;
 8001f7e:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8001f82:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 8001f86:	f997 3218 	ldrsb.w	r3, [r7, #536]	@ 0x218
 8001f8a:	4a40      	ldr	r2, [pc, #256]	@ (800208c <http_process_handler+0x360>)
 8001f8c:	2194      	movs	r1, #148	@ 0x94
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3390      	adds	r3, #144	@ 0x90
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e002      	b.n	8001fa2 <http_process_handler+0x276>
					content_found = 0; // fail to find content
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
				if(!content_found)
 8001fa2:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <http_process_handler+0x29a>
					printf("> HTTPSocket[%d] : Unknown Page Request\r\n", s);
 8001faa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001fae:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4836      	ldr	r0, [pc, #216]	@ (8002090 <http_process_handler+0x364>)
 8001fb8:	f004 fbfe 	bl	80067b8 <iprintf>
					http_status = STATUS_NOT_FOUND;
 8001fbc:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001fc0:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
 8001fc4:	e011      	b.n	8001fea <http_process_handler+0x2be>
					printf("> HTTPSocket[%d] : Find Content [%s] ok - Start [%ld] len [ %ld ]byte\r\n", s, uri_name, content_addr, file_len);
 8001fc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001fca:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001fce:	7819      	ldrb	r1, [r3, #0]
 8001fd0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001fda:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8001fde:	482d      	ldr	r0, [pc, #180]	@ (8002094 <http_process_handler+0x368>)
 8001fe0:	f004 fbea 	bl	80067b8 <iprintf>
					http_status = STATUS_OK;
 8001fe4:	23c8      	movs	r3, #200	@ 0xc8
 8001fe6:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
				if(http_status)
 8001fea:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01c      	beq.n	800202c <http_process_handler+0x300>
					printf("> HTTPSocket[%d] : Requested content len = [ %ld ]byte\r\n", s, file_len);
 8001ff2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001ff6:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8002000:	4619      	mov	r1, r3
 8002002:	4825      	ldr	r0, [pc, #148]	@ (8002098 <http_process_handler+0x36c>)
 8002004:	f004 fbd8 	bl	80067b8 <iprintf>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 8002008:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800200c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	7859      	ldrb	r1, [r3, #1]
 8002014:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8002018:	f8b7 421a 	ldrh.w	r4, [r7, #538]	@ 0x21a
 800201c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002020:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8002024:	7818      	ldrb	r0, [r3, #0]
 8002026:	4623      	mov	r3, r4
 8002028:	f7ff fc62 	bl	80018f0 <send_http_response_header>
				if(http_status == STATUS_OK)
 800202c:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8002030:	2bc8      	cmp	r3, #200	@ 0xc8
 8002032:	f040 80e2 	bne.w	80021fa <http_process_handler+0x4ce>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <http_process_handler+0x334>)
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800203e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002042:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8002046:	7810      	ldrb	r0, [r2, #0]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800204e:	460a      	mov	r2, r1
 8002050:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 8002054:	f7ff fcd0 	bl	80019f8 <send_http_response_body>
			break;
 8002058:	e0cf      	b.n	80021fa <http_process_handler+0x4ce>
 800205a:	bf00      	nop
 800205c:	200009f4 	.word	0x200009f4
 8002060:	200009e8 	.word	0x200009e8
 8002064:	080088b4 	.word	0x080088b4
 8002068:	080088b8 	.word	0x080088b8
 800206c:	080088c4 	.word	0x080088c4
 8002070:	080088c8 	.word	0x080088c8
 8002074:	080088d8 	.word	0x080088d8
 8002078:	080088e0 	.word	0x080088e0
 800207c:	080088f4 	.word	0x080088f4
 8002080:	0800891c 	.word	0x0800891c
 8002084:	08008944 	.word	0x08008944
 8002088:	200009f0 	.word	0x200009f0
 800208c:	200009fc 	.word	0x200009fc
 8002090:	0800896c 	.word	0x0800896c
 8002094:	08008998 	.word	0x08008998
 8002098:	080089e0 	.word	0x080089e0

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 800209c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80020a0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	1c98      	adds	r0, r3, #2
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	4a55      	ldr	r2, [pc, #340]	@ (8002204 <http_process_handler+0x4d8>)
 80020ae:	4956      	ldr	r1, [pc, #344]	@ (8002208 <http_process_handler+0x4dc>)
 80020b0:	f7ff f97a 	bl	80013a8 <mid>
			uri_name = uri_buf;
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 80020bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80020c0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe ff41 	bl	8000f54 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
 80020d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80020d6:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	484b      	ldr	r0, [pc, #300]	@ (800220c <http_process_handler+0x4e0>)
 80020e0:	f004 fb6a 	bl	80067b8 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
 80020e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80020e8:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80020f2:	4619      	mov	r1, r3
 80020f4:	4846      	ldr	r0, [pc, #280]	@ (8002210 <http_process_handler+0x4e4>)
 80020f6:	f004 fb5f 	bl	80067b8 <iprintf>
			printf("Type = %d\r\n", p_http_request->TYPE);
 80020fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80020fe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	4619      	mov	r1, r3
 8002108:	4842      	ldr	r0, [pc, #264]	@ (8002214 <http_process_handler+0x4e8>)
 800210a:	f004 fb55 	bl	80067b8 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 800210e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002112:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	2b08      	cmp	r3, #8
 800211c:	d14d      	bne.n	80021ba <http_process_handler+0x48e>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 800211e:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <http_process_handler+0x4ec>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8002126:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 800212a:	f5a1 7108 	sub.w	r1, r1, #544	@ 0x220
 800212e:	6809      	ldr	r1, [r1, #0]
 8002130:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8002134:	f000 f990 	bl	8002458 <http_post_cgi_handler>
 8002138:	4603      	mov	r3, r0
 800213a:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
 800213e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002142:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8002146:	7819      	ldrb	r1, [r3, #0]
 8002148:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <http_process_handler+0x428>
 8002150:	4a32      	ldr	r2, [pc, #200]	@ (800221c <http_process_handler+0x4f0>)
 8002152:	e000      	b.n	8002156 <http_process_handler+0x42a>
 8002154:	4a32      	ldr	r2, [pc, #200]	@ (8002220 <http_process_handler+0x4f4>)
 8002156:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800215a:	4832      	ldr	r0, [pc, #200]	@ (8002224 <http_process_handler+0x4f8>)
 800215c:	f004 fb2c 	bl	80067b8 <iprintf>
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 8002160:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01c      	beq.n	80021a2 <http_process_handler+0x476>
 8002168:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800216c:	f240 72be 	movw	r2, #1982	@ 0x7be
 8002170:	4293      	cmp	r3, r2
 8002172:	d816      	bhi.n	80021a2 <http_process_handler+0x476>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 8002174:	4b2c      	ldr	r3, [pc, #176]	@ (8002228 <http_process_handler+0x4fc>)
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <http_process_handler+0x4ec>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002180:	b29c      	uxth	r4, r3
 8002182:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002186:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800218a:	7818      	ldrb	r0, [r3, #0]
 800218c:	4623      	mov	r3, r4
 800218e:	f7ff fd77 	bl	8001c80 <send_http_response_cgi>

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 8002192:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8002196:	2b02      	cmp	r3, #2
 8002198:	d11b      	bne.n	80021d2 <http_process_handler+0x4a6>
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <http_process_handler+0x500>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4798      	blx	r3
 80021a0:	e017      	b.n	80021d2 <http_process_handler+0x4a6>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 80021a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80021a6:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80021aa:	7818      	ldrb	r0, [r3, #0]
 80021ac:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80021b0:	2200      	movs	r2, #0
 80021b2:	2108      	movs	r1, #8
 80021b4:	f7ff fb9c 	bl	80018f0 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 80021b8:	e020      	b.n	80021fc <http_process_handler+0x4d0>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 80021ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80021be:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80021c2:	7818      	ldrb	r0, [r3, #0]
 80021c4:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	f7ff fb90 	bl	80018f0 <send_http_response_header>
			break;
 80021d0:	e014      	b.n	80021fc <http_process_handler+0x4d0>
 80021d2:	e013      	b.n	80021fc <http_process_handler+0x4d0>

		default :
			http_status = STATUS_BAD_REQ;
 80021d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80021d8:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
			send_http_response_header(s, 0, 0, http_status);
 80021dc:	f8b7 221a 	ldrh.w	r2, [r7, #538]	@ 0x21a
 80021e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80021e4:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80021e8:	7818      	ldrb	r0, [r3, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	f7ff fb7e 	bl	80018f0 <send_http_response_header>
			break;
 80021f4:	e002      	b.n	80021fc <http_process_handler+0x4d0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <http_process_handler+0x4d0>
			break;
 80021fa:	bf00      	nop
	}
}
 80021fc:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002200:	46bd      	mov	sp, r7
 8002202:	bdb0      	pop	{r4, r5, r7, pc}
 8002204:	08008a1c 	.word	0x08008a1c
 8002208:	080088b4 	.word	0x080088b4
 800220c:	08008a24 	.word	0x08008a24
 8002210:	08008a4c 	.word	0x08008a4c
 8002214:	08008a74 	.word	0x08008a74
 8002218:	200009e8 	.word	0x200009e8
 800221c:	08008a80 	.word	0x08008a80
 8002220:	08008a90 	.word	0x08008a90
 8002224:	08008aa4 	.word	0x08008aa4
 8002228:	200009f0 	.word	0x200009f0
 800222c:	20000024 	.word	0x20000024

08002230 <get_httpServer_timecount>:
{
	httpServer_tick_1s++;
}

uint32_t get_httpServer_timecount(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
	return httpServer_tick_1s;
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <get_httpServer_timecount+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	200009f8 	.word	0x200009f8

08002248 <reg_httpServer_webContent>:

void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d04e      	beq.n	80022f6 <reg_httpServer_webContent+0xae>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d04b      	beq.n	80022f6 <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 800225e:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <reg_httpServer_webContent+0xbc>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b13      	cmp	r3, #19
 8002264:	d849      	bhi.n	80022fa <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fd ffe4 	bl	8000234 <strlen>
 800226c:	4603      	mov	r3, r0
 800226e:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 8002270:	6838      	ldr	r0, [r7, #0]
 8002272:	f7fd ffdf 	bl	8000234 <strlen>
 8002276:	60b8      	str	r0, [r7, #8]

	web_content[total_content_cnt].content_name = malloc(name_len+1);
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	3301      	adds	r3, #1
 800227c:	461a      	mov	r2, r3
 800227e:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <reg_httpServer_webContent+0xbc>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	461c      	mov	r4, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f004 f91f 	bl	80064c8 <malloc>
 800228a:	4603      	mov	r3, r0
 800228c:	4619      	mov	r1, r3
 800228e:	4a1e      	ldr	r2, [pc, #120]	@ (8002308 <reg_httpServer_webContent+0xc0>)
 8002290:	4623      	mov	r3, r4
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4423      	add	r3, r4
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	6019      	str	r1, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 800229c:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <reg_httpServer_webContent+0xbc>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <reg_httpServer_webContent+0xc0>)
 80022a4:	460b      	mov	r3, r1
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	440b      	add	r3, r1
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 fdc3 	bl	8006e3e <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 80022b8:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <reg_httpServer_webContent+0xbc>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <reg_httpServer_webContent+0xc0>)
 80022c0:	460b      	mov	r3, r1
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	440b      	add	r3, r1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <reg_httpServer_webContent+0xbc>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002308 <reg_httpServer_webContent+0xc0>)
 80022d8:	460b      	mov	r3, r1
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	440b      	add	r3, r1
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3308      	adds	r3, #8
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <reg_httpServer_webContent+0xbc>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <reg_httpServer_webContent+0xbc>)
 80022f2:	801a      	strh	r2, [r3, #0]
 80022f4:	e002      	b.n	80022fc <reg_httpServer_webContent+0xb4>
		return;
 80022f6:	bf00      	nop
 80022f8:	e000      	b.n	80022fc <reg_httpServer_webContent+0xb4>
		return;
 80022fa:	bf00      	nop
}
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}
 8002302:	bf00      	nop
 8002304:	200009ec 	.word	0x200009ec
 8002308:	20000e9c 	.word	0x20000e9c

0800230c <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 8002318:	2300      	movs	r3, #0
 800231a:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 800231c:	2300      	movs	r3, #0
 800231e:	82fb      	strh	r3, [r7, #22]
 8002320:	e022      	b.n	8002368 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 8002322:	8afa      	ldrh	r2, [r7, #22]
 8002324:	4915      	ldr	r1, [pc, #84]	@ (800237c <find_userReg_webContent+0x70>)
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7fd ff73 	bl	8000220 <strcmp>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d110      	bne.n	8002362 <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 8002340:	8afa      	ldrh	r2, [r7, #22]
 8002342:	490e      	ldr	r1, [pc, #56]	@ (800237c <find_userReg_webContent+0x70>)
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3304      	adds	r3, #4
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
			*content_num = i;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	8afa      	ldrh	r2, [r7, #22]
 800235a:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 800235c:	2301      	movs	r3, #1
 800235e:	757b      	strb	r3, [r7, #21]
			break;
 8002360:	e007      	b.n	8002372 <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	3301      	adds	r3, #1
 8002366:	82fb      	strh	r3, [r7, #22]
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <find_userReg_webContent+0x74>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	8afa      	ldrh	r2, [r7, #22]
 800236e:	429a      	cmp	r2, r3
 8002370:	d3d7      	bcc.n	8002322 <find_userReg_webContent+0x16>
		}
	}
	return ret;
 8002372:	7d7b      	ldrb	r3, [r7, #21]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000e9c 	.word	0x20000e9c
 8002380:	200009ec 	.word	0x200009ec

08002384 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	4603      	mov	r3, r0
 8002392:	81fb      	strh	r3, [r7, #14]
 8002394:	4613      	mov	r3, r2
 8002396:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <read_userReg_webContent+0x74>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	89fa      	ldrh	r2, [r7, #14]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d901      	bls.n	80023aa <read_userReg_webContent+0x26>
 80023a6:	2300      	movs	r3, #0
 80023a8:	e021      	b.n	80023ee <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 80023aa:	89fa      	ldrh	r2, [r7, #14]
 80023ac:	4913      	ldr	r1, [pc, #76]	@ (80023fc <read_userReg_webContent+0x78>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	3308      	adds	r3, #8
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <read_userReg_webContent+0x48>
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 80023cc:	89bb      	ldrh	r3, [r7, #12]
 80023ce:	461a      	mov	r2, r3
 80023d0:	6979      	ldr	r1, [r7, #20]
 80023d2:	68b8      	ldr	r0, [r7, #8]
 80023d4:	f004 fc2b 	bl	8006c2e <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 80023d8:	89bb      	ldrh	r3, [r7, #12]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4413      	add	r3, r2
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 80023e2:	68b8      	ldr	r0, [r7, #8]
 80023e4:	f7fd ff26 	bl	8000234 <strlen>
 80023e8:	4603      	mov	r3, r0
 80023ea:	827b      	strh	r3, [r7, #18]
	return ret;
 80023ec:	8a7b      	ldrh	r3, [r7, #18]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200009ec 	.word	0x200009ec
 80023fc:	20000e9c 	.word	0x20000e9c

08002400 <http_get_cgi_handler>:
#include <string.h>
#include <stdlib.h>
#include "httpUtil.h"

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 800240c:	2301      	movs	r3, #1
 800240e:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	461a      	mov	r2, r3
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f859 	bl	80024d4 <predefined_get_cgi_processor>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 8002428:	490a      	ldr	r1, [pc, #40]	@ (8002454 <http_get_cgi_handler+0x54>)
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7fd fef8 	bl	8000220 <strcmp>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <http_get_cgi_handler+0x48>
 8002440:	8abb      	ldrh	r3, [r7, #20]
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	601a      	str	r2, [r3, #0]
	return ret;
 8002448:	7dfb      	ldrb	r3, [r7, #23]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	08008b90 	.word	0x08008b90

08002458 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1c99      	adds	r1, r3, #2
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f836 	bl	80024ee <predefined_set_cgi_processor>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d114      	bne.n	80024b2 <http_post_cgi_handler+0x5a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 8002488:	4910      	ldr	r1, [pc, #64]	@ (80024cc <http_post_cgi_handler+0x74>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7fd fec8 	bl	8000220 <strcmp>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10b      	bne.n	80024ae <http_post_cgi_handler+0x56>
	{
		// To do
		val = 1;
 8002496:	2301      	movs	r3, #1
 8002498:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 800249a:	7dbb      	ldrb	r3, [r7, #22]
 800249c:	461a      	mov	r2, r3
 800249e:	490c      	ldr	r1, [pc, #48]	@ (80024d0 <http_post_cgi_handler+0x78>)
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f004 fab5 	bl	8006a10 <siprintf>
 80024a6:	4603      	mov	r3, r0
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	82bb      	strh	r3, [r7, #20]
 80024ac:	e001      	b.n	80024b2 <http_post_cgi_handler+0x5a>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <http_post_cgi_handler+0x68>
 80024b8:	8abb      	ldrh	r3, [r7, #20]
 80024ba:	461a      	mov	r2, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	601a      	str	r2, [r3, #0]
	return ret;
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	08008b90 	.word	0x08008b90
 80024d0:	08008b9c 	.word	0x08008b9c

080024d4 <predefined_get_cgi_processor>:

uint8_t predefined_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
	return 0;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <predefined_set_cgi_processor>:

uint8_t predefined_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * en)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	603b      	str	r3, [r7, #0]
	return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <WIZCHIP_READ+0x94>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4798      	blx	r3
   WIZCHIP.CS._select();
 800251a:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <WIZCHIP_READ+0x94>)
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002520:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <WIZCHIP_READ+0x94>)
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <WIZCHIP_READ+0x24>
 8002528:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <WIZCHIP_READ+0x94>)
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d114      	bne.n	800255a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <WIZCHIP_READ+0x94>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	0c12      	lsrs	r2, r2, #16
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4610      	mov	r0, r2
 800253c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800253e:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <WIZCHIP_READ+0x94>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	0a12      	lsrs	r2, r2, #8
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	4610      	mov	r0, r2
 800254a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800254c:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <WIZCHIP_READ+0x94>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	4610      	mov	r0, r2
 8002556:	4798      	blx	r3
 8002558:	e011      	b.n	800257e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	b2db      	uxtb	r3, r3
 8002560:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	b2db      	uxtb	r3, r3
 8002568:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <WIZCHIP_READ+0x94>)
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	f107 020c 	add.w	r2, r7, #12
 8002578:	2103      	movs	r1, #3
 800257a:	4610      	mov	r0, r2
 800257c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800257e:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <WIZCHIP_READ+0x94>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4798      	blx	r3
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002588:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <WIZCHIP_READ+0x94>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800258e:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <WIZCHIP_READ+0x94>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	4798      	blx	r3
   return ret;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000030 	.word	0x20000030

080025a4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <WIZCHIP_WRITE+0x98>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80025b6:	4b21      	ldr	r3, [pc, #132]	@ (800263c <WIZCHIP_WRITE+0x98>)
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80025c4:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <WIZCHIP_WRITE+0x98>)
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d119      	bne.n	8002600 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <WIZCHIP_WRITE+0x98>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	0c12      	lsrs	r2, r2, #16
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4610      	mov	r0, r2
 80025d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80025da:	4b18      	ldr	r3, [pc, #96]	@ (800263c <WIZCHIP_WRITE+0x98>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	0a12      	lsrs	r2, r2, #8
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4610      	mov	r0, r2
 80025e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80025e8:	4b14      	ldr	r3, [pc, #80]	@ (800263c <WIZCHIP_WRITE+0x98>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	4610      	mov	r0, r2
 80025f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <WIZCHIP_WRITE+0x98>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	4610      	mov	r0, r2
 80025fc:	4798      	blx	r3
 80025fe:	e013      	b.n	8002628 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0c1b      	lsrs	r3, r3, #16
 8002604:	b2db      	uxtb	r3, r3
 8002606:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	b2db      	uxtb	r3, r3
 800260e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <WIZCHIP_WRITE+0x98>)
 800261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261e:	f107 020c 	add.w	r2, r7, #12
 8002622:	2104      	movs	r1, #4
 8002624:	4610      	mov	r0, r2
 8002626:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <WIZCHIP_WRITE+0x98>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800262e:	4b03      	ldr	r3, [pc, #12]	@ (800263c <WIZCHIP_WRITE+0x98>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	4798      	blx	r3
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000030 	.word	0x20000030

08002640 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800264e:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002654:	4b29      	ldr	r3, [pc, #164]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800265a:	4b28      	ldr	r3, [pc, #160]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <WIZCHIP_READ_BUF+0x2a>
 8002662:	4b26      	ldr	r3, [pc, #152]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	d126      	bne.n	80026b8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800266a:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	0c12      	lsrs	r2, r2, #16
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4610      	mov	r0, r2
 8002676:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002678:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	0a12      	lsrs	r2, r2, #8
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	4610      	mov	r0, r2
 8002684:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002686:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	4610      	mov	r0, r2
 8002690:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002692:	2300      	movs	r3, #0
 8002694:	82fb      	strh	r3, [r7, #22]
 8002696:	e00a      	b.n	80026ae <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002698:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	8afa      	ldrh	r2, [r7, #22]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	188c      	adds	r4, r1, r2
 80026a2:	4798      	blx	r3
 80026a4:	4603      	mov	r3, r0
 80026a6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80026a8:	8afb      	ldrh	r3, [r7, #22]
 80026aa:	3301      	adds	r3, #1
 80026ac:	82fb      	strh	r3, [r7, #22]
 80026ae:	8afa      	ldrh	r2, [r7, #22]
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d3f0      	bcc.n	8002698 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80026b6:	e017      	b.n	80026e8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	0c1b      	lsrs	r3, r3, #16
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80026ce:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 80026d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d2:	f107 0210 	add.w	r2, r7, #16
 80026d6:	2103      	movs	r1, #3
 80026d8:	4610      	mov	r0, r2
 80026da:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80026dc:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	4611      	mov	r1, r2
 80026e4:	68b8      	ldr	r0, [r7, #8]
 80026e6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80026ee:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <WIZCHIP_READ_BUF+0xbc>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4798      	blx	r3
}
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd90      	pop	{r4, r7, pc}
 80026fc:	20000030 	.word	0x20000030

08002700 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	4613      	mov	r3, r2
 800270c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800270e:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002714:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002722:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	2b00      	cmp	r3, #0
 8002728:	d126      	bne.n	8002778 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	0c12      	lsrs	r2, r2, #16
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	4610      	mov	r0, r2
 8002736:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002738:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	0a12      	lsrs	r2, r2, #8
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	4610      	mov	r0, r2
 8002744:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002746:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4610      	mov	r0, r2
 8002750:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	82fb      	strh	r3, [r7, #22]
 8002756:	e00a      	b.n	800276e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002758:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	8afa      	ldrh	r2, [r7, #22]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	440a      	add	r2, r1
 8002762:	7812      	ldrb	r2, [r2, #0]
 8002764:	4610      	mov	r0, r2
 8002766:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002768:	8afb      	ldrh	r3, [r7, #22]
 800276a:	3301      	adds	r3, #1
 800276c:	82fb      	strh	r3, [r7, #22]
 800276e:	8afa      	ldrh	r2, [r7, #22]
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	429a      	cmp	r2, r3
 8002774:	d3f0      	bcc.n	8002758 <WIZCHIP_WRITE_BUF+0x58>
 8002776:	e017      	b.n	80027a8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	0c1b      	lsrs	r3, r3, #16
 800277c:	b2db      	uxtb	r3, r3
 800277e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	b2db      	uxtb	r3, r3
 8002786:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	f107 0210 	add.w	r2, r7, #16
 8002796:	2103      	movs	r1, #3
 8002798:	4610      	mov	r0, r2
 800279a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800279c:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	4611      	mov	r1, r2
 80027a4:	68b8      	ldr	r0, [r7, #8]
 80027a6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80027a8:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80027ae:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <WIZCHIP_WRITE_BUF+0xbc>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4798      	blx	r3
}
 80027b4:	bf00      	nop
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000030 	.word	0x20000030

080027c0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	81fb      	strh	r3, [r7, #14]
 80027ce:	2300      	movs	r3, #0
 80027d0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	3301      	adds	r3, #1
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe94 	bl	800250c <WIZCHIP_READ>
 80027e4:	4603      	mov	r3, r0
 80027e6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80027e8:	89bb      	ldrh	r3, [r7, #12]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	b29c      	uxth	r4, r3
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	3301      	adds	r3, #1
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fe86 	bl	800250c <WIZCHIP_READ>
 8002800:	4603      	mov	r3, r0
 8002802:	4423      	add	r3, r4
 8002804:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002806:	89bb      	ldrh	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d019      	beq.n	8002840 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	3301      	adds	r3, #1
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fe77 	bl	800250c <WIZCHIP_READ>
 800281e:	4603      	mov	r3, r0
 8002820:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002822:	89fb      	ldrh	r3, [r7, #14]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	b29c      	uxth	r4, r3
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	3301      	adds	r3, #1
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fe69 	bl	800250c <WIZCHIP_READ>
 800283a:	4603      	mov	r3, r0
 800283c:	4423      	add	r3, r4
 800283e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002840:	89fa      	ldrh	r2, [r7, #14]
 8002842:	89bb      	ldrh	r3, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d1c4      	bne.n	80027d2 <getSn_TX_FSR+0x12>
   return val;
 8002848:	89fb      	ldrh	r3, [r7, #14]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}

08002852 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002852:	b590      	push	{r4, r7, lr}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800285c:	2300      	movs	r3, #0
 800285e:	81fb      	strh	r3, [r7, #14]
 8002860:	2300      	movs	r3, #0
 8002862:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3301      	adds	r3, #1
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fe4b 	bl	800250c <WIZCHIP_READ>
 8002876:	4603      	mov	r3, r0
 8002878:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800287a:	89bb      	ldrh	r3, [r7, #12]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	b29c      	uxth	r4, r3
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	3301      	adds	r3, #1
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fe3d 	bl	800250c <WIZCHIP_READ>
 8002892:	4603      	mov	r3, r0
 8002894:	4423      	add	r3, r4
 8002896:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002898:	89bb      	ldrh	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d019      	beq.n	80028d2 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	3301      	adds	r3, #1
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fe2e 	bl	800250c <WIZCHIP_READ>
 80028b0:	4603      	mov	r3, r0
 80028b2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80028b4:	89fb      	ldrh	r3, [r7, #14]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	b29c      	uxth	r4, r3
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	3301      	adds	r3, #1
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fe20 	bl	800250c <WIZCHIP_READ>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4423      	add	r3, r4
 80028d0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80028d2:	89fa      	ldrh	r2, [r7, #14]
 80028d4:	89bb      	ldrh	r3, [r7, #12]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d1c4      	bne.n	8002864 <getSn_RX_RSR+0x12>
   return val;
 80028da:	89fb      	ldrh	r3, [r7, #14]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}

080028e4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
 80028f0:	4613      	mov	r3, r2
 80028f2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80028fc:	88bb      	ldrh	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d046      	beq.n	8002990 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	3301      	adds	r3, #1
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fdfc 	bl	800250c <WIZCHIP_READ>
 8002914:	4603      	mov	r3, r0
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	b29c      	uxth	r4, r3
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	3301      	adds	r3, #1
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fdf0 	bl	800250c <WIZCHIP_READ>
 800292c:	4603      	mov	r3, r0
 800292e:	4423      	add	r3, r4
 8002930:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	79fa      	ldrb	r2, [r7, #7]
 8002938:	0092      	lsls	r2, r2, #2
 800293a:	3202      	adds	r2, #2
 800293c:	00d2      	lsls	r2, r2, #3
 800293e:	4413      	add	r3, r2
 8002940:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002942:	88bb      	ldrh	r3, [r7, #4]
 8002944:	461a      	mov	r2, r3
 8002946:	6839      	ldr	r1, [r7, #0]
 8002948:	68b8      	ldr	r0, [r7, #8]
 800294a:	f7ff fed9 	bl	8002700 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800294e:	89fa      	ldrh	r2, [r7, #14]
 8002950:	88bb      	ldrh	r3, [r7, #4]
 8002952:	4413      	add	r3, r2
 8002954:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	3301      	adds	r3, #1
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002962:	461a      	mov	r2, r3
 8002964:	89fb      	ldrh	r3, [r7, #14]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	b29b      	uxth	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f7ff fe18 	bl	80025a4 <WIZCHIP_WRITE>
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	3301      	adds	r3, #1
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002980:	461a      	mov	r2, r3
 8002982:	89fb      	ldrh	r3, [r7, #14]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f7ff fe0b 	bl	80025a4 <WIZCHIP_WRITE>
 800298e:	e000      	b.n	8002992 <wiz_send_data+0xae>
   if(len == 0)  return;
 8002990:	bf00      	nop
}
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bd90      	pop	{r4, r7, pc}

08002998 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	4613      	mov	r3, r2
 80029a6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80029b0:	88bb      	ldrh	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d046      	beq.n	8002a44 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	3301      	adds	r3, #1
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fda2 	bl	800250c <WIZCHIP_READ>
 80029c8:	4603      	mov	r3, r0
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	b29c      	uxth	r4, r3
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	3301      	adds	r3, #1
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fd96 	bl	800250c <WIZCHIP_READ>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4423      	add	r3, r4
 80029e4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80029e6:	89fb      	ldrh	r3, [r7, #14]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	79fa      	ldrb	r2, [r7, #7]
 80029ec:	0092      	lsls	r2, r2, #2
 80029ee:	3203      	adds	r2, #3
 80029f0:	00d2      	lsls	r2, r2, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80029f6:	88bb      	ldrh	r3, [r7, #4]
 80029f8:	461a      	mov	r2, r3
 80029fa:	6839      	ldr	r1, [r7, #0]
 80029fc:	68b8      	ldr	r0, [r7, #8]
 80029fe:	f7ff fe1f 	bl	8002640 <WIZCHIP_READ_BUF>
   ptr += len;
 8002a02:	89fa      	ldrh	r2, [r7, #14]
 8002a04:	88bb      	ldrh	r3, [r7, #4]
 8002a06:	4413      	add	r3, r2
 8002a08:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	3301      	adds	r3, #1
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002a16:	461a      	mov	r2, r3
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f7ff fdbe 	bl	80025a4 <WIZCHIP_WRITE>
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002a34:	461a      	mov	r2, r3
 8002a36:	89fb      	ldrh	r3, [r7, #14]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f7ff fdb1 	bl	80025a4 <WIZCHIP_WRITE>
 8002a42:	e000      	b.n	8002a46 <wiz_recv_data+0xae>
   if(len == 0) return;
 8002a44:	bf00      	nop
}
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd90      	pop	{r4, r7, pc}

08002a4c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4604      	mov	r4, r0
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	71fb      	strb	r3, [r7, #7]
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71bb      	strb	r3, [r7, #6]
 8002a62:	460b      	mov	r3, r1
 8002a64:	80bb      	strh	r3, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d902      	bls.n	8002a76 <socket+0x2a>
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	e0f0      	b.n	8002c58 <socket+0x20c>
	switch(protocol)
 8002a76:	79bb      	ldrb	r3, [r7, #6]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d005      	beq.n	8002a88 <socket+0x3c>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	dd11      	ble.n	8002aa4 <socket+0x58>
 8002a80:	3b02      	subs	r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d80e      	bhi.n	8002aa4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002a86:	e011      	b.n	8002aac <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002a94:	f7ff fdd4 	bl	8002640 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <socket+0x5e>
 8002a9e:	f06f 0302 	mvn.w	r3, #2
 8002aa2:	e0d9      	b.n	8002c58 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002aa4:	f06f 0304 	mvn.w	r3, #4
 8002aa8:	e0d6      	b.n	8002c58 <socket+0x20c>
	    break;
 8002aaa:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <socket+0x70>
 8002ab6:	f06f 0305 	mvn.w	r3, #5
 8002aba:	e0cd      	b.n	8002c58 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d028      	beq.n	8002b14 <socket+0xc8>
	{
   	switch(protocol)
 8002ac2:	79bb      	ldrb	r3, [r7, #6]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d002      	beq.n	8002ace <socket+0x82>
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d008      	beq.n	8002ade <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002acc:	e022      	b.n	8002b14 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d11a      	bne.n	8002b0e <socket+0xc2>
 8002ad8:	f06f 0305 	mvn.w	r3, #5
 8002adc:	e0bc      	b.n	8002c58 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db02      	blt.n	8002af6 <socket+0xaa>
 8002af0:	f06f 0305 	mvn.w	r3, #5
 8002af4:	e0b0      	b.n	8002c58 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db04      	blt.n	8002b12 <socket+0xc6>
 8002b08:	f06f 0305 	mvn.w	r3, #5
 8002b0c:	e0a4      	b.n	8002c58 <socket+0x20c>
   	      break;
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <socket+0xc8>
   	      break;
 8002b12:	bf00      	nop
   	}
   }
	close(sn);
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f8ac 	bl	8002c74 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	3301      	adds	r3, #1
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4618      	mov	r0, r3
 8002b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b2a:	f023 030f 	bic.w	r3, r3, #15
 8002b2e:	b25a      	sxtb	r2, r3
 8002b30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7ff fd32 	bl	80025a4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002b40:	88bb      	ldrh	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d110      	bne.n	8002b68 <socket+0x11c>
	{
	   port = sock_any_port++;
 8002b46:	4b46      	ldr	r3, [pc, #280]	@ (8002c60 <socket+0x214>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	b291      	uxth	r1, r2
 8002b4e:	4a44      	ldr	r2, [pc, #272]	@ (8002c60 <socket+0x214>)
 8002b50:	8011      	strh	r1, [r2, #0]
 8002b52:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002b54:	4b42      	ldr	r3, [pc, #264]	@ (8002c60 <socket+0x214>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d103      	bne.n	8002b68 <socket+0x11c>
 8002b60:	4b3f      	ldr	r3, [pc, #252]	@ (8002c60 <socket+0x214>)
 8002b62:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002b66:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b74:	461a      	mov	r2, r3
 8002b76:	88bb      	ldrh	r3, [r7, #4]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f7ff fd0f 	bl	80025a4 <WIZCHIP_WRITE>
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b92:	461a      	mov	r2, r3
 8002b94:	88bb      	ldrh	r3, [r7, #4]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f7ff fd02 	bl	80025a4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fcf8 	bl	80025a4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002bb4:	bf00      	nop
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	3301      	adds	r3, #1
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fca2 	bl	800250c <WIZCHIP_READ>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f3      	bne.n	8002bb6 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	b21b      	sxth	r3, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	b21a      	sxth	r2, r3
 8002bdc:	4b21      	ldr	r3, [pc, #132]	@ (8002c64 <socket+0x218>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b21b      	sxth	r3, r3
 8002be2:	4013      	ands	r3, r2
 8002be4:	b21b      	sxth	r3, r3
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c64 <socket+0x218>)
 8002bea:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	b21a      	sxth	r2, r3
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <socket+0x218>)
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	4b17      	ldr	r3, [pc, #92]	@ (8002c64 <socket+0x218>)
 8002c08:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	b21b      	sxth	r3, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	b21a      	sxth	r2, r3
 8002c18:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <socket+0x21c>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	4013      	ands	r3, r2
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <socket+0x21c>)
 8002c26:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	4a10      	ldr	r2, [pc, #64]	@ (8002c6c <socket+0x220>)
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	4a0e      	ldr	r2, [pc, #56]	@ (8002c70 <socket+0x224>)
 8002c36:	2100      	movs	r1, #0
 8002c38:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002c3a:	bf00      	nop
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	3301      	adds	r3, #1
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fc5f 	bl	800250c <WIZCHIP_READ>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f3      	beq.n	8002c3c <socket+0x1f0>
   return (int8_t)sn;
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd90      	pop	{r4, r7, pc}
 8002c60:	2000002c 	.word	0x2000002c
 8002c64:	20000f8c 	.word	0x20000f8c
 8002c68:	20000f8e 	.word	0x20000f8e
 8002c6c:	20000f90 	.word	0x20000f90
 8002c70:	20000fa0 	.word	0x20000fa0

08002c74 <close>:

int8_t close(uint8_t sn)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d902      	bls.n	8002c8a <close+0x16>
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	e055      	b.n	8002d36 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	3301      	adds	r3, #1
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002c96:	2110      	movs	r1, #16
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fc83 	bl	80025a4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002c9e:	bf00      	nop
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fc2d 	bl	800250c <WIZCHIP_READ>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f3      	bne.n	8002ca0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002cc4:	211f      	movs	r1, #31
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fc6c 	bl	80025a4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <close+0xcc>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b21b      	sxth	r3, r3
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <close+0xcc>)
 8002ce8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	2201      	movs	r2, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	b21a      	sxth	r2, r3
 8002cf8:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <close+0xd0>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b21b      	sxth	r3, r3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	b21b      	sxth	r3, r3
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <close+0xd0>)
 8002d06:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d48 <close+0xd4>)
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	4a0d      	ldr	r2, [pc, #52]	@ (8002d4c <close+0xd8>)
 8002d16:	2100      	movs	r1, #0
 8002d18:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002d1a:	bf00      	nop
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	3301      	adds	r3, #1
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fbef 	bl	800250c <WIZCHIP_READ>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f3      	bne.n	8002d1c <close+0xa8>
	return SOCK_OK;
 8002d34:	2301      	movs	r3, #1
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000f8c 	.word	0x20000f8c
 8002d44:	20000f8e 	.word	0x20000f8e
 8002d48:	20000f90 	.word	0x20000f90
 8002d4c:	20000fa0 	.word	0x20000fa0

08002d50 <listen>:

int8_t listen(uint8_t sn)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d902      	bls.n	8002d66 <listen+0x16>
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	e049      	b.n	8002dfa <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fbcc 	bl	800250c <WIZCHIP_READ>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d002      	beq.n	8002d84 <listen+0x34>
 8002d7e:	f06f 0304 	mvn.w	r3, #4
 8002d82:	e03a      	b.n	8002dfa <listen+0xaa>
	CHECK_SOCKINIT();
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3301      	adds	r3, #1
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fbbb 	bl	800250c <WIZCHIP_READ>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b13      	cmp	r3, #19
 8002d9a:	d002      	beq.n	8002da2 <listen+0x52>
 8002d9c:	f06f 0302 	mvn.w	r3, #2
 8002da0:	e02b      	b.n	8002dfa <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	3301      	adds	r3, #1
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fbf7 	bl	80025a4 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002db6:	bf00      	nop
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fba1 	bl	800250c <WIZCHIP_READ>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f3      	bne.n	8002db8 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002dd0:	e006      	b.n	8002de0 <listen+0x90>
   {
         close(sn);
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff4d 	bl	8002c74 <close>
         return SOCKERR_SOCKCLOSED;
 8002dda:	f06f 0303 	mvn.w	r3, #3
 8002dde:	e00c      	b.n	8002dfa <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	3301      	adds	r3, #1
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fb8d 	bl	800250c <WIZCHIP_READ>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b14      	cmp	r3, #20
 8002df6:	d1ec      	bne.n	8002dd2 <listen+0x82>
   }
   return SOCK_OK;
 8002df8:	2301      	movs	r3, #1
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d902      	bls.n	8002e1a <disconnect+0x16>
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
 8002e18:	e062      	b.n	8002ee0 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	3301      	adds	r3, #1
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fb72 	bl	800250c <WIZCHIP_READ>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d002      	beq.n	8002e38 <disconnect+0x34>
 8002e32:	f06f 0304 	mvn.w	r3, #4
 8002e36:	e053      	b.n	8002ee0 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e44:	2108      	movs	r1, #8
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fbac 	bl	80025a4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002e4c:	bf00      	nop
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	3301      	adds	r3, #1
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fb56 	bl	800250c <WIZCHIP_READ>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f3      	bne.n	8002e4e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	b21a      	sxth	r2, r3
 8002e74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee8 <disconnect+0xe4>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b21b      	sxth	r3, r3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <disconnect+0xe4>)
 8002e82:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <disconnect+0xe8>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	fa42 f303 	asr.w	r3, r2, r3
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d016      	beq.n	8002ec6 <disconnect+0xc2>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e021      	b.n	8002ee0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fb2f 	bl	800250c <WIZCHIP_READ>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <disconnect+0xc2>
	   {
	      close(sn);
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff feda 	bl	8002c74 <close>
	      return SOCKERR_TIMEOUT;
 8002ec0:	f06f 030c 	mvn.w	r3, #12
 8002ec4:	e00c      	b.n	8002ee0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	3301      	adds	r3, #1
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fb1a 	bl	800250c <WIZCHIP_READ>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1de      	bne.n	8002e9c <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000f8e 	.word	0x20000f8e
 8002eec:	20000f8c 	.word	0x20000f8c

08002ef0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	4613      	mov	r3, r2
 8002efe:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d902      	bls.n	8002f14 <send+0x24>
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e0dd      	b.n	80030d0 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	3301      	adds	r3, #1
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff faf5 	bl	800250c <WIZCHIP_READ>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d002      	beq.n	8002f32 <send+0x42>
 8002f2c:	f06f 0304 	mvn.w	r3, #4
 8002f30:	e0ce      	b.n	80030d0 <send+0x1e0>
   CHECK_SOCKDATA();
 8002f32:	88bb      	ldrh	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <send+0x4e>
 8002f38:	f06f 030d 	mvn.w	r3, #13
 8002f3c:	e0c8      	b.n	80030d0 <send+0x1e0>
   tmp = getSn_SR(sn);
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	3301      	adds	r3, #1
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fade 	bl	800250c <WIZCHIP_READ>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b17      	cmp	r3, #23
 8002f58:	d005      	beq.n	8002f66 <send+0x76>
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b1c      	cmp	r3, #28
 8002f5e:	d002      	beq.n	8002f66 <send+0x76>
 8002f60:	f06f 0306 	mvn.w	r3, #6
 8002f64:	e0b4      	b.n	80030d0 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8002f66:	4b5c      	ldr	r3, [pc, #368]	@ (80030d8 <send+0x1e8>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	fa42 f303 	asr.w	r3, r2, r3
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d039      	beq.n	8002fee <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	3301      	adds	r3, #1
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fac0 	bl	800250c <WIZCHIP_READ>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d019      	beq.n	8002fd2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002faa:	2110      	movs	r1, #16
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff faf9 	bl	80025a4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	b21b      	sxth	r3, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	b21a      	sxth	r2, r3
 8002fc0:	4b45      	ldr	r3, [pc, #276]	@ (80030d8 <send+0x1e8>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b21b      	sxth	r3, r3
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b42      	ldr	r3, [pc, #264]	@ (80030d8 <send+0x1e8>)
 8002fce:	801a      	strh	r2, [r3, #0]
 8002fd0:	e00d      	b.n	8002fee <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <send+0xfa>
      {
         close(sn);
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fe48 	bl	8002c74 <close>
         return SOCKERR_TIMEOUT;
 8002fe4:	f06f 030c 	mvn.w	r3, #12
 8002fe8:	e072      	b.n	80030d0 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e070      	b.n	80030d0 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fa86 	bl	800250c <WIZCHIP_READ>
 8003000:	4603      	mov	r3, r0
 8003002:	029b      	lsls	r3, r3, #10
 8003004:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003006:	88ba      	ldrh	r2, [r7, #4]
 8003008:	89bb      	ldrh	r3, [r7, #12]
 800300a:	429a      	cmp	r2, r3
 800300c:	d901      	bls.n	8003012 <send+0x122>
 800300e:	89bb      	ldrh	r3, [r7, #12]
 8003010:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fbd3 	bl	80027c0 <getSn_TX_FSR>
 800301a:	4603      	mov	r3, r0
 800301c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	3301      	adds	r3, #1
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fa6e 	bl	800250c <WIZCHIP_READ>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b17      	cmp	r3, #23
 8003038:	d009      	beq.n	800304e <send+0x15e>
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b1c      	cmp	r3, #28
 800303e:	d006      	beq.n	800304e <send+0x15e>
      {
         close(sn);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fe16 	bl	8002c74 <close>
         return SOCKERR_SOCKSTATUS;
 8003048:	f06f 0306 	mvn.w	r3, #6
 800304c:	e040      	b.n	80030d0 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800304e:	4b23      	ldr	r3, [pc, #140]	@ (80030dc <send+0x1ec>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	fa42 f303 	asr.w	r3, r2, r3
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <send+0x17e>
 8003062:	88ba      	ldrh	r2, [r7, #4]
 8003064:	89bb      	ldrh	r3, [r7, #12]
 8003066:	429a      	cmp	r2, r3
 8003068:	d901      	bls.n	800306e <send+0x17e>
 800306a:	2300      	movs	r3, #0
 800306c:	e030      	b.n	80030d0 <send+0x1e0>
      if(len <= freesize) break;
 800306e:	88ba      	ldrh	r2, [r7, #4]
 8003070:	89bb      	ldrh	r3, [r7, #12]
 8003072:	429a      	cmp	r2, r3
 8003074:	d900      	bls.n	8003078 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8003076:	e7cc      	b.n	8003012 <send+0x122>
      if(len <= freesize) break;
 8003078:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800307a:	88ba      	ldrh	r2, [r7, #4]
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fc2f 	bl	80028e4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	3301      	adds	r3, #1
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003092:	2120      	movs	r1, #32
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fa85 	bl	80025a4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800309a:	bf00      	nop
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3301      	adds	r3, #1
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fa2f 	bl	800250c <WIZCHIP_READ>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f3      	bne.n	800309c <send+0x1ac>
   sock_is_sending |= (1 << sn);
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	2201      	movs	r2, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	b21a      	sxth	r2, r3
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <send+0x1e8>)
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	4313      	orrs	r3, r2
 80030c6:	b21b      	sxth	r3, r3
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	4b03      	ldr	r3, [pc, #12]	@ (80030d8 <send+0x1e8>)
 80030cc:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80030ce:	88bb      	ldrh	r3, [r7, #4]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000f8e 	.word	0x20000f8e
 80030dc:	20000f8c 	.word	0x20000f8c

080030e0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	6039      	str	r1, [r7, #0]
 80030ea:	71fb      	strb	r3, [r7, #7]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d902      	bls.n	8003104 <recv+0x24>
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e09b      	b.n	800323c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	3301      	adds	r3, #1
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff f9fd 	bl	800250c <WIZCHIP_READ>
 8003112:	4603      	mov	r3, r0
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	2b01      	cmp	r3, #1
 800311a:	d002      	beq.n	8003122 <recv+0x42>
 800311c:	f06f 0304 	mvn.w	r3, #4
 8003120:	e08c      	b.n	800323c <recv+0x15c>
   CHECK_SOCKDATA();
 8003122:	88bb      	ldrh	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <recv+0x4e>
 8003128:	f06f 030d 	mvn.w	r3, #13
 800312c:	e086      	b.n	800323c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	3301      	adds	r3, #1
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f9e6 	bl	800250c <WIZCHIP_READ>
 8003140:	4603      	mov	r3, r0
 8003142:	029b      	lsls	r3, r3, #10
 8003144:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003146:	89ba      	ldrh	r2, [r7, #12]
 8003148:	88bb      	ldrh	r3, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d201      	bcs.n	8003152 <recv+0x72>
 800314e:	89bb      	ldrh	r3, [r7, #12]
 8003150:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fb7c 	bl	8002852 <getSn_RX_RSR>
 800315a:	4603      	mov	r3, r0
 800315c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3301      	adds	r3, #1
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f9ce 	bl	800250c <WIZCHIP_READ>
 8003170:	4603      	mov	r3, r0
 8003172:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b17      	cmp	r3, #23
 8003178:	d026      	beq.n	80031c8 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b1c      	cmp	r3, #28
 800317e:	d11c      	bne.n	80031ba <recv+0xda>
            {
               if(recvsize != 0) break;
 8003180:	89bb      	ldrh	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d133      	bne.n	80031ee <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fb19 	bl	80027c0 <getSn_TX_FSR>
 800318e:	4603      	mov	r3, r0
 8003190:	461c      	mov	r4, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3301      	adds	r3, #1
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f9b4 	bl	800250c <WIZCHIP_READ>
 80031a4:	4603      	mov	r3, r0
 80031a6:	029b      	lsls	r3, r3, #10
 80031a8:	429c      	cmp	r4, r3
 80031aa:	d10d      	bne.n	80031c8 <recv+0xe8>
               {
                  close(sn);
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fd60 	bl	8002c74 <close>
                  return SOCKERR_SOCKSTATUS;
 80031b4:	f06f 0306 	mvn.w	r3, #6
 80031b8:	e040      	b.n	800323c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fd59 	bl	8002c74 <close>
               return SOCKERR_SOCKSTATUS;
 80031c2:	f06f 0306 	mvn.w	r3, #6
 80031c6:	e039      	b.n	800323c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80031c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003244 <recv+0x164>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	fa42 f303 	asr.w	r3, r2, r3
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <recv+0x106>
 80031dc:	89bb      	ldrh	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <recv+0x106>
 80031e2:	2300      	movs	r3, #0
 80031e4:	e02a      	b.n	800323c <recv+0x15c>
         if(recvsize != 0) break;
 80031e6:	89bb      	ldrh	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 80031ec:	e7b1      	b.n	8003152 <recv+0x72>
               if(recvsize != 0) break;
 80031ee:	bf00      	nop
 80031f0:	e000      	b.n	80031f4 <recv+0x114>
         if(recvsize != 0) break;
 80031f2:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80031f4:	89ba      	ldrh	r2, [r7, #12]
 80031f6:	88bb      	ldrh	r3, [r7, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d201      	bcs.n	8003200 <recv+0x120>
 80031fc:	89bb      	ldrh	r3, [r7, #12]
 80031fe:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003200:	88ba      	ldrh	r2, [r7, #4]
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fbc6 	bl	8002998 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	3301      	adds	r3, #1
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003218:	2140      	movs	r1, #64	@ 0x40
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff f9c2 	bl	80025a4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003220:	bf00      	nop
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	3301      	adds	r3, #1
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff f96c 	bl	800250c <WIZCHIP_READ>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f3      	bne.n	8003222 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800323a:	88bb      	ldrh	r3, [r7, #4]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	20000f8c 	.word	0x20000f8c

08003248 <SPIReadWrite>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8003252:	bf00      	nop
 8003254:	4b0f      	ldr	r3, [pc, #60]	@ (8003294 <SPIReadWrite+0x4c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d1f8      	bne.n	8003254 <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 8003262:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <SPIReadWrite+0x4c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	79fa      	ldrb	r2, [r7, #7]
 800326a:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 800326c:	bf00      	nop
 800326e:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <SPIReadWrite+0x4c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d1f8      	bne.n	800326e <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 800327c:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <SPIReadWrite+0x4c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	200000dc 	.word	0x200000dc

08003298 <wizchip_select>:

void  wizchip_select(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800329c:	2200      	movs	r2, #0
 800329e:	2102      	movs	r1, #2
 80032a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032a4:	f001 f9ae 	bl	8004604 <HAL_GPIO_WritePin>
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}

080032ac <wizchip_deselect>:

void  wizchip_deselect(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80032b0:	2201      	movs	r2, #1
 80032b2:	2102      	movs	r1, #2
 80032b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032b8:	f001 f9a4 	bl	8004604 <HAL_GPIO_WritePin>
}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}

080032c0 <wizchip_read>:

uint8_t wizchip_read()
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7ff ffbe 	bl	8003248 <SPIReadWrite>
 80032cc:	4603      	mov	r3, r0
 80032ce:	71fb      	strb	r3, [r7, #7]
	return rb;
 80032d0:	79fb      	ldrb	r3, [r7, #7]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff ffae 	bl	8003248 <SPIReadWrite>
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8003300:	2300      	movs	r3, #0
 8003302:	81fb      	strh	r3, [r7, #14]
 8003304:	e00c      	b.n	8003320 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 8003306:	2000      	movs	r0, #0
 8003308:	f7ff ff9e 	bl	8003248 <SPIReadWrite>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3301      	adds	r3, #1
 8003318:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 800331a:	89fb      	ldrh	r3, [r7, #14]
 800331c:	3301      	adds	r3, #1
 800331e:	81fb      	strh	r3, [r7, #14]
 8003320:	89fa      	ldrh	r2, [r7, #14]
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	429a      	cmp	r2, r3
 8003326:	d3ee      	bcc.n	8003306 <wizchip_readburst+0x12>
	}
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 800333e:	2300      	movs	r3, #0
 8003340:	81fb      	strh	r3, [r7, #14]
 8003342:	e00a      	b.n	800335a <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff7d 	bl	8003248 <SPIReadWrite>
		pBuf++;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3301      	adds	r3, #1
 8003352:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8003354:	89fb      	ldrh	r3, [r7, #14]
 8003356:	3301      	adds	r3, #1
 8003358:	81fb      	strh	r3, [r7, #14]
 800335a:	89fa      	ldrh	r2, [r7, #14]
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	429a      	cmp	r2, r3
 8003360:	d3f0      	bcc.n	8003344 <wizchip_writeburst+0x12>
	}
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <W5500IOInit>:

void W5500IOInit()
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA10
	 * and
	 * CS->PA11
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003380:	4b0e      	ldr	r3, [pc, #56]	@ (80033bc <W5500IOInit+0x50>)
 8003382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003384:	4a0d      	ldr	r2, [pc, #52]	@ (80033bc <W5500IOInit+0x50>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <W5500IOInit+0x50>)
 800338e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003398:	2303      	movs	r3, #3
 800339a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339c:	2301      	movs	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033a4:	2302      	movs	r3, #2
 80033a6:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033b0:	f000 ffa6 	bl	8004300 <HAL_GPIO_Init>
}
 80033b4:	bf00      	nop
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000

080033c0 <W5500Init>:

void W5500Init()
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 80033c6:	4b21      	ldr	r3, [pc, #132]	@ (800344c <W5500Init+0x8c>)
 80033c8:	1d3c      	adds	r4, r7, #4
 80033ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 80033d0:	f7ff ffcc 	bl	800336c <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default
 80033d4:	2201      	movs	r2, #1
 80033d6:	2102      	movs	r1, #2
 80033d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033dc:	f001 f912 	bl	8004604 <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2101      	movs	r1, #1
 80033e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033e8:	f001 f90c 	bl	8004604 <HAL_GPIO_WritePin>
	tmp = 0xFF;
 80033ec:	23ff      	movs	r3, #255	@ 0xff
 80033ee:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 80033f0:	bf00      	nop
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	1e5a      	subs	r2, r3, #1
 80033f6:	75fa      	strb	r2, [r7, #23]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1fa      	bne.n	80033f2 <W5500Init+0x32>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80033fc:	2201      	movs	r2, #1
 80033fe:	2101      	movs	r1, #1
 8003400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003404:	f001 f8fe 	bl	8004604 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8003408:	4911      	ldr	r1, [pc, #68]	@ (8003450 <W5500Init+0x90>)
 800340a:	4812      	ldr	r0, [pc, #72]	@ (8003454 <W5500Init+0x94>)
 800340c:	f000 f894 	bl	8003538 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8003410:	4911      	ldr	r1, [pc, #68]	@ (8003458 <W5500Init+0x98>)
 8003412:	4812      	ldr	r0, [pc, #72]	@ (800345c <W5500Init+0x9c>)
 8003414:	f000 f8b6 	bl	8003584 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8003418:	4911      	ldr	r1, [pc, #68]	@ (8003460 <W5500Init+0xa0>)
 800341a:	4812      	ldr	r0, [pc, #72]	@ (8003464 <W5500Init+0xa4>)
 800341c:	f000 f8de 	bl	80035dc <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	4619      	mov	r1, r3
 8003424:	2001      	movs	r0, #1
 8003426:	f000 f905 	bl	8003634 <ctlwizchip>
 800342a:	4603      	mov	r3, r0
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d104      	bne.n	800343c <W5500Init+0x7c>
		printf("WIZCHIP Initialized Failed.\r\n");
 8003432:	480d      	ldr	r0, [pc, #52]	@ (8003468 <W5500Init+0xa8>)
 8003434:	f003 fa28 	bl	8006888 <puts>
		while (1);
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <W5500Init+0x78>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 800343c:	480b      	ldr	r0, [pc, #44]	@ (800346c <W5500Init+0xac>)
 800343e:	f003 fa23 	bl	8006888 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd90      	pop	{r4, r7, pc}
 800344a:	bf00      	nop
 800344c:	08008be4 	.word	0x08008be4
 8003450:	080032ad 	.word	0x080032ad
 8003454:	08003299 	.word	0x08003299
 8003458:	080032db 	.word	0x080032db
 800345c:	080032c1 	.word	0x080032c1
 8003460:	08003333 	.word	0x08003333
 8003464:	080032f5 	.word	0x080032f5
 8003468:	08008ba0 	.word	0x08008ba0
 800346c:	08008bc0 	.word	0x08008bc0

08003470 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	70fb      	strb	r3, [r7, #3]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	2300      	movs	r3, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	460b      	mov	r3, r1
 8003510:	807b      	strh	r3, [r7, #2]
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	807b      	strh	r3, [r7, #2]
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <reg_wizchip_cs_cbfunc+0x16>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800354e:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <reg_wizchip_cs_cbfunc+0x40>)
 8003550:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <reg_wizchip_cs_cbfunc+0x44>)
 8003552:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003554:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <reg_wizchip_cs_cbfunc+0x40>)
 8003556:	4a0a      	ldr	r2, [pc, #40]	@ (8003580 <reg_wizchip_cs_cbfunc+0x48>)
 8003558:	619a      	str	r2, [r3, #24]
 800355a:	e006      	b.n	800356a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800355c:	4a06      	ldr	r2, [pc, #24]	@ (8003578 <reg_wizchip_cs_cbfunc+0x40>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003562:	4a05      	ldr	r2, [pc, #20]	@ (8003578 <reg_wizchip_cs_cbfunc+0x40>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6193      	str	r3, [r2, #24]
   }
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000030 	.word	0x20000030
 800357c:	0800348d 	.word	0x0800348d
 8003580:	0800349b 	.word	0x0800349b

08003584 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800358e:	bf00      	nop
 8003590:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f9      	beq.n	8003590 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <reg_wizchip_spi_cbfunc+0x24>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80035a8:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80035aa:	4a0a      	ldr	r2, [pc, #40]	@ (80035d4 <reg_wizchip_spi_cbfunc+0x50>)
 80035ac:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80035ae:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80035b0:	4a09      	ldr	r2, [pc, #36]	@ (80035d8 <reg_wizchip_spi_cbfunc+0x54>)
 80035b2:	621a      	str	r2, [r3, #32]
 80035b4:	e006      	b.n	80035c4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80035b6:	4a06      	ldr	r2, [pc, #24]	@ (80035d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80035bc:	4a04      	ldr	r2, [pc, #16]	@ (80035d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6213      	str	r3, [r2, #32]
   }
}
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	20000030 	.word	0x20000030
 80035d4:	080034e1 	.word	0x080034e1
 80035d8:	080034f1 	.word	0x080034f1

080035dc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80035e6:	bf00      	nop
 80035e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f9      	beq.n	80035e8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <reg_wizchip_spiburst_cbfunc+0x24>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d106      	bne.n	800360e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003600:	4b09      	ldr	r3, [pc, #36]	@ (8003628 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003602:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <reg_wizchip_spiburst_cbfunc+0x50>)
 8003604:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003606:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003608:	4a09      	ldr	r2, [pc, #36]	@ (8003630 <reg_wizchip_spiburst_cbfunc+0x54>)
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
 800360c:	e006      	b.n	800361c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800360e:	4a06      	ldr	r2, [pc, #24]	@ (8003628 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003614:	4a04      	ldr	r2, [pc, #16]	@ (8003628 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	20000030 	.word	0x20000030
 800362c:	08003507 	.word	0x08003507
 8003630:	0800351f 	.word	0x0800351f

08003634 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	2300      	movs	r3, #0
 800364a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	f200 80c5 	bhi.w	80037de <ctlwizchip+0x1aa>
 8003654:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <ctlwizchip+0x28>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	0800369d 	.word	0x0800369d
 8003660:	080036a3 	.word	0x080036a3
 8003664:	080036cf 	.word	0x080036cf
 8003668:	080036c3 	.word	0x080036c3
 800366c:	080036dd 	.word	0x080036dd
 8003670:	080036e9 	.word	0x080036e9
 8003674:	080036f7 	.word	0x080036f7
 8003678:	0800371d 	.word	0x0800371d
 800367c:	0800373f 	.word	0x0800373f
 8003680:	08003783 	.word	0x08003783
 8003684:	08003789 	.word	0x08003789
 8003688:	08003791 	.word	0x08003791
 800368c:	080037e5 	.word	0x080037e5
 8003690:	08003799 	.word	0x08003799
 8003694:	080037a7 	.word	0x080037a7
 8003698:	080037c3 	.word	0x080037c3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800369c:	f000 f8e8 	bl	8003870 <wizchip_sw_reset>
         break;
 80036a0:	e0a1      	b.n	80037e6 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3308      	adds	r3, #8
 80036b0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f925 	bl	8003908 <wizchip_init>
 80036be:	4603      	mov	r3, r0
 80036c0:	e092      	b.n	80037e8 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f9aa 	bl	8003a20 <wizchip_clrinterrupt>
         break;
 80036cc:	e08b      	b.n	80037e6 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80036ce:	f000 f9db 	bl	8003a88 <wizchip_getinterrupt>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	801a      	strh	r2, [r3, #0]
         break;
 80036da:	e084      	b.n	80037e6 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f9f6 	bl	8003ad2 <wizchip_setinterruptmask>
         break;         
 80036e6:	e07e      	b.n	80037e6 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80036e8:	f000 fa0e 	bl	8003b08 <wizchip_getinterruptmask>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	801a      	strh	r2, [r3, #0]
         break;
 80036f4:	e077      	b.n	80037e6 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	4619      	mov	r1, r3
 8003702:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003706:	f7fe ff4d 	bl	80025a4 <WIZCHIP_WRITE>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	4619      	mov	r1, r3
 8003712:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003716:	f7fe ff45 	bl	80025a4 <WIZCHIP_WRITE>
         break;
 800371a:	e064      	b.n	80037e6 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 800371c:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003720:	f7fe fef4 	bl	800250c <WIZCHIP_READ>
 8003724:	4603      	mov	r3, r0
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	b29c      	uxth	r4, r3
 800372a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800372e:	f7fe feed 	bl	800250c <WIZCHIP_READ>
 8003732:	4603      	mov	r3, r0
 8003734:	4423      	add	r3, r4
 8003736:	b29a      	uxth	r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	801a      	strh	r2, [r3, #0]
         break;
 800373c:	e053      	b.n	80037e6 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800373e:	4b2c      	ldr	r3, [pc, #176]	@ (80037f0 <ctlwizchip+0x1bc>)
 8003740:	789a      	ldrb	r2, [r3, #2]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	3301      	adds	r3, #1
 800374a:	4a29      	ldr	r2, [pc, #164]	@ (80037f0 <ctlwizchip+0x1bc>)
 800374c:	78d2      	ldrb	r2, [r2, #3]
 800374e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	3302      	adds	r3, #2
 8003754:	4a26      	ldr	r2, [pc, #152]	@ (80037f0 <ctlwizchip+0x1bc>)
 8003756:	7912      	ldrb	r2, [r2, #4]
 8003758:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	3303      	adds	r3, #3
 800375e:	4a24      	ldr	r2, [pc, #144]	@ (80037f0 <ctlwizchip+0x1bc>)
 8003760:	7952      	ldrb	r2, [r2, #5]
 8003762:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	3304      	adds	r3, #4
 8003768:	4a21      	ldr	r2, [pc, #132]	@ (80037f0 <ctlwizchip+0x1bc>)
 800376a:	7992      	ldrb	r2, [r2, #6]
 800376c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	3305      	adds	r3, #5
 8003772:	4a1f      	ldr	r2, [pc, #124]	@ (80037f0 <ctlwizchip+0x1bc>)
 8003774:	79d2      	ldrb	r2, [r2, #7]
 8003776:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3306      	adds	r3, #6
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
         break;
 8003780:	e031      	b.n	80037e6 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003782:	f000 fa13 	bl	8003bac <wizphy_reset>
         break;
 8003786:	e02e      	b.n	80037e6 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003788:	6838      	ldr	r0, [r7, #0]
 800378a:	f000 fa36 	bl	8003bfa <wizphy_setphyconf>
         break;
 800378e:	e02a      	b.n	80037e6 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	f000 fa75 	bl	8003c80 <wizphy_getphyconf>
         break;
 8003796:	e026      	b.n	80037e6 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fad9 	bl	8003d54 <wizphy_setphypmode>
 80037a2:	4603      	mov	r3, r0
 80037a4:	e020      	b.n	80037e8 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80037a6:	f000 f9e8 	bl	8003b7a <wizphy_getphypmode>
 80037aa:	4603      	mov	r3, r0
 80037ac:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2bff      	cmp	r3, #255	@ 0xff
 80037b2:	d102      	bne.n	80037ba <ctlwizchip+0x186>
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	e016      	b.n	80037e8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	7dfa      	ldrb	r2, [r7, #23]
 80037be:	701a      	strb	r2, [r3, #0]
         break;
 80037c0:	e011      	b.n	80037e6 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80037c2:	f000 f9c4 	bl	8003b4e <wizphy_getphylink>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2bff      	cmp	r3, #255	@ 0xff
 80037ce:	d102      	bne.n	80037d6 <ctlwizchip+0x1a2>
 80037d0:	f04f 33ff 	mov.w	r3, #4294967295
 80037d4:	e008      	b.n	80037e8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	7dfa      	ldrb	r2, [r7, #23]
 80037da:	701a      	strb	r2, [r3, #0]
         break;
 80037dc:	e003      	b.n	80037e6 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	e001      	b.n	80037e8 <ctlwizchip+0x1b4>
         break;
 80037e4:	bf00      	nop
   }
   return 0;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}
 80037f0:	20000030 	.word	0x20000030

080037f4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	2b05      	cmp	r3, #5
 8003804:	d82c      	bhi.n	8003860 <ctlnetwork+0x6c>
 8003806:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <ctlnetwork+0x18>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003825 	.word	0x08003825
 8003810:	0800382d 	.word	0x0800382d
 8003814:	08003835 	.word	0x08003835
 8003818:	08003843 	.word	0x08003843
 800381c:	08003851 	.word	0x08003851
 8003820:	08003859 	.word	0x08003859
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003824:	6838      	ldr	r0, [r7, #0]
 8003826:	f000 fadf 	bl	8003de8 <wizchip_setnetinfo>
         break;
 800382a:	e01c      	b.n	8003866 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f000 fb1b 	bl	8003e68 <wizchip_getnetinfo>
         break;
 8003832:	e018      	b.n	8003866 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fb55 	bl	8003ee8 <wizchip_setnetmode>
 800383e:	4603      	mov	r3, r0
 8003840:	e012      	b.n	8003868 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003842:	f000 fb73 	bl	8003f2c <wizchip_getnetmode>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	701a      	strb	r2, [r3, #0]
         break;
 800384e:	e00a      	b.n	8003866 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003850:	6838      	ldr	r0, [r7, #0]
 8003852:	f000 fb73 	bl	8003f3c <wizchip_settimeout>
         break;
 8003856:	e006      	b.n	8003866 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003858:	6838      	ldr	r0, [r7, #0]
 800385a:	f000 fb90 	bl	8003f7e <wizchip_gettimeout>
         break;
 800385e:	e002      	b.n	8003866 <ctlnetwork+0x72>
      default:
         return -1;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	e000      	b.n	8003868 <ctlnetwork+0x74>
   }
   return 0;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	2206      	movs	r2, #6
 800387a:	4619      	mov	r1, r3
 800387c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003880:	f7fe fede 	bl	8002640 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003884:	f107 0314 	add.w	r3, r7, #20
 8003888:	2204      	movs	r2, #4
 800388a:	4619      	mov	r1, r3
 800388c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003890:	f7fe fed6 	bl	8002640 <WIZCHIP_READ_BUF>
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	2204      	movs	r2, #4
 800389a:	4619      	mov	r1, r3
 800389c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80038a0:	f7fe fece 	bl	8002640 <WIZCHIP_READ_BUF>
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	2204      	movs	r2, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80038b0:	f7fe fec6 	bl	8002640 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80038b4:	2180      	movs	r1, #128	@ 0x80
 80038b6:	2000      	movs	r0, #0
 80038b8:	f7fe fe74 	bl	80025a4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80038bc:	2000      	movs	r0, #0
 80038be:	f7fe fe25 	bl	800250c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	2206      	movs	r2, #6
 80038c6:	4619      	mov	r1, r3
 80038c8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80038cc:	f7fe ff18 	bl	8002700 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	2204      	movs	r2, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80038dc:	f7fe ff10 	bl	8002700 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80038e0:	f107 0310 	add.w	r3, r7, #16
 80038e4:	2204      	movs	r2, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80038ec:	f7fe ff08 	bl	8002700 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	2204      	movs	r2, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80038fc:	f7fe ff00 	bl	8002700 <WIZCHIP_WRITE_BUF>
}
 8003900:	bf00      	nop
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003916:	f7ff ffab 	bl	8003870 <wizchip_sw_reset>
   if(txsize)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d03b      	beq.n	8003998 <wizchip_init+0x90>
   {
      tmp = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e015      	b.n	8003956 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	7bbb      	ldrb	r3, [r7, #14]
 8003936:	4413      	add	r3, r2
 8003938:	b2db      	uxtb	r3, r3
 800393a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800393c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003940:	2b10      	cmp	r3, #16
 8003942:	dd02      	ble.n	800394a <wizchip_init+0x42>
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
 8003948:	e066      	b.n	8003a18 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800394a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3301      	adds	r3, #1
 8003952:	b2db      	uxtb	r3, r3
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395a:	2b07      	cmp	r3, #7
 800395c:	dde5      	ble.n	800392a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e015      	b.n	8003990 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3301      	adds	r3, #1
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003972:	4618      	mov	r0, r3
 8003974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	4619      	mov	r1, r3
 8003980:	f7fe fe10 	bl	80025a4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	3301      	adds	r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	73fb      	strb	r3, [r7, #15]
 8003990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003994:	2b07      	cmp	r3, #7
 8003996:	dde5      	ble.n	8003964 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d03b      	beq.n	8003a16 <wizchip_init+0x10e>
   {
      tmp = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e015      	b.n	80039d4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80039a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	7bbb      	ldrb	r3, [r7, #14]
 80039b4:	4413      	add	r3, r2
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80039ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039be:	2b10      	cmp	r3, #16
 80039c0:	dd02      	ble.n	80039c8 <wizchip_init+0xc0>
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295
 80039c6:	e027      	b.n	8003a18 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80039c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d8:	2b07      	cmp	r3, #7
 80039da:	dde5      	ble.n	80039a8 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]
 80039e0:	e015      	b.n	8003a0e <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80039e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	3301      	adds	r3, #1
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80039f0:	4618      	mov	r0, r3
 80039f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7fe fdd1 	bl	80025a4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a12:	2b07      	cmp	r3, #7
 8003a14:	dde5      	ble.n	80039e2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	f023 030f 	bic.w	r3, r3, #15
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003a44:	f7fe fdae 	bl	80025a4 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
 8003a4c:	e014      	b.n	8003a78 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003a4e:	7bba      	ldrb	r2, [r7, #14]
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	fa42 f303 	asr.w	r3, r2, r3
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <wizchip_clrinterrupt+0x52>
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	3301      	adds	r3, #1
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003a6a:	211f      	movs	r1, #31
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fd99 	bl	80025a4 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	3301      	adds	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b07      	cmp	r3, #7
 8003a7c:	d9e7      	bls.n	8003a4e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003a9a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003a9e:	f7fe fd35 	bl	800250c <WIZCHIP_READ>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f023 030f 	bic.w	r3, r3, #15
 8003aa8:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003aaa:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8003aae:	f7fe fd2d 	bl	800250c <WIZCHIP_READ>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003ab6:	79bb      	ldrb	r3, [r7, #6]
 8003ab8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003aba:	88bb      	ldrh	r3, [r7, #4]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003ac8:	88bb      	ldrh	r3, [r7, #4]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	4619      	mov	r1, r3
 8003aec:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003af0:	f7fe fd58 	bl	80025a4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	4619      	mov	r1, r3
 8003af8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8003afc:	f7fe fd52 	bl	80025a4 <WIZCHIP_WRITE>
#endif   
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003b1a:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003b1e:	f7fe fcf5 	bl	800250c <WIZCHIP_READ>
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003b26:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8003b2a:	f7fe fcef 	bl	800250c <WIZCHIP_READ>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003b32:	79bb      	ldrb	r3, [r7, #6]
 8003b34:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003b36:	88bb      	ldrh	r3, [r7, #4]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003b44:	88bb      	ldrh	r3, [r7, #4]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003b54:	2300      	movs	r3, #0
 8003b56:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003b58:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003b5c:	f7fe fcd6 	bl	800250c <WIZCHIP_READ>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003b84:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003b88:	f7fe fcc0 	bl	800250c <WIZCHIP_READ>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b92:	2b30      	cmp	r3, #48	@ 0x30
 8003b94:	d102      	bne.n	8003b9c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003b96:	2301      	movs	r3, #1
 8003b98:	71fb      	strb	r3, [r7, #7]
 8003b9a:	e001      	b.n	8003ba0 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003bb2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003bb6:	f7fe fca9 	bl	800250c <WIZCHIP_READ>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bc4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003bce:	f7fe fce9 	bl	80025a4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003bd2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003bd6:	f7fe fc99 	bl	800250c <WIZCHIP_READ>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003be4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	4619      	mov	r1, r3
 8003bea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003bee:	f7fe fcd9 	bl	80025a4 <WIZCHIP_WRITE>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d104      	bne.n	8003c18 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c14:	73fb      	strb	r3, [r7, #15]
 8003c16:	e003      	b.n	8003c20 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c1e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	785b      	ldrb	r3, [r3, #1]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d104      	bne.n	8003c32 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	e019      	b.n	8003c66 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	78db      	ldrb	r3, [r3, #3]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10d      	bne.n	8003c56 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	789b      	ldrb	r3, [r3, #2]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d104      	bne.n	8003c4c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	f043 0318 	orr.w	r3, r3, #24
 8003c48:	73fb      	strb	r3, [r7, #15]
 8003c4a:	e00c      	b.n	8003c66 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	f043 0308 	orr.w	r3, r3, #8
 8003c52:	73fb      	strb	r3, [r7, #15]
 8003c54:	e007      	b.n	8003c66 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	789b      	ldrb	r3, [r3, #2]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d103      	bne.n	8003c66 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	f043 0310 	orr.w	r3, r3, #16
 8003c64:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003c6e:	f7fe fc99 	bl	80025a4 <WIZCHIP_WRITE>
   wizphy_reset();
 8003c72:	f7ff ff9b 	bl	8003bac <wizphy_reset>
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003c8c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003c90:	f7fe fc3c 	bl	800250c <WIZCHIP_READ>
 8003c94:	4603      	mov	r3, r0
 8003c96:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	119b      	asrs	r3, r3, #6
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d001      	beq.n	8003cb6 <wizphy_getphyconf+0x36>
 8003cb2:	2b38      	cmp	r3, #56	@ 0x38
 8003cb4:	d103      	bne.n	8003cbe <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	705a      	strb	r2, [r3, #1]
         break;
 8003cbc:	e003      	b.n	8003cc6 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	705a      	strb	r2, [r3, #1]
         break;
 8003cc4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ccc:	3b10      	subs	r3, #16
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	bf8c      	ite	hi
 8003cd2:	2201      	movhi	r2, #1
 8003cd4:	2200      	movls	r2, #0
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	2a00      	cmp	r2, #0
 8003cda:	d10f      	bne.n	8003cfc <wizphy_getphyconf+0x7c>
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8003d4c <wizphy_getphyconf+0xcc>)
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	709a      	strb	r2, [r3, #2]
         break;
 8003cfa:	e003      	b.n	8003d04 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	709a      	strb	r2, [r3, #2]
         break;
 8003d02:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d0a:	3b08      	subs	r3, #8
 8003d0c:	2b18      	cmp	r3, #24
 8003d0e:	bf8c      	ite	hi
 8003d10:	2201      	movhi	r2, #1
 8003d12:	2200      	movls	r2, #0
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	2a00      	cmp	r2, #0
 8003d18:	d10f      	bne.n	8003d3a <wizphy_getphyconf+0xba>
 8003d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <wizphy_getphyconf+0xd0>)
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	70da      	strb	r2, [r3, #3]
         break;
 8003d38:	e003      	b.n	8003d42 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	70da      	strb	r2, [r3, #3]
         break;
 8003d40:	bf00      	nop
   }
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	00010101 	.word	0x00010101
 8003d50:	01010001 	.word	0x01010001

08003d54 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003d62:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003d66:	f7fe fbd1 	bl	800250c <WIZCHIP_READ>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <wizphy_setphypmode+0x2a>
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7c:	e030      	b.n	8003de0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003d84:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d104      	bne.n	8003d96 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e003      	b.n	8003d9e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8003d9c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	4619      	mov	r1, r3
 8003da2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003da6:	f7fe fbfd 	bl	80025a4 <WIZCHIP_WRITE>
   wizphy_reset();
 8003daa:	f7ff feff 	bl	8003bac <wizphy_reset>
   tmp = getPHYCFGR();
 8003dae:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003db2:	f7fe fbab 	bl	800250c <WIZCHIP_READ>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <wizphy_setphypmode+0x88>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e008      	b.n	8003de0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <wizphy_setphypmode+0x88>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e001      	b.n	8003de0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2206      	movs	r2, #6
 8003df4:	4619      	mov	r1, r3
 8003df6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003dfa:	f7fe fc81 	bl	8002700 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	330e      	adds	r3, #14
 8003e02:	2204      	movs	r2, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003e0a:	f7fe fc79 	bl	8002700 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	330a      	adds	r3, #10
 8003e12:	2204      	movs	r2, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003e1a:	f7fe fc71 	bl	8002700 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3306      	adds	r3, #6
 8003e22:	2204      	movs	r2, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003e2a:	f7fe fc69 	bl	8002700 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7c9a      	ldrb	r2, [r3, #18]
 8003e32:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <wizchip_setnetinfo+0x78>)
 8003e34:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7cda      	ldrb	r2, [r3, #19]
 8003e3a:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <wizchip_setnetinfo+0x78>)
 8003e3c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7d1a      	ldrb	r2, [r3, #20]
 8003e42:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <wizchip_setnetinfo+0x78>)
 8003e44:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7d5a      	ldrb	r2, [r3, #21]
 8003e4a:	4b05      	ldr	r3, [pc, #20]	@ (8003e60 <wizchip_setnetinfo+0x78>)
 8003e4c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	7d9a      	ldrb	r2, [r3, #22]
 8003e52:	4b04      	ldr	r3, [pc, #16]	@ (8003e64 <wizchip_setnetinfo+0x7c>)
 8003e54:	701a      	strb	r2, [r3, #0]
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000fa8 	.word	0x20000fa8
 8003e64:	20000fac 	.word	0x20000fac

08003e68 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2206      	movs	r2, #6
 8003e74:	4619      	mov	r1, r3
 8003e76:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003e7a:	f7fe fbe1 	bl	8002640 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	330e      	adds	r3, #14
 8003e82:	2204      	movs	r2, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003e8a:	f7fe fbd9 	bl	8002640 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	330a      	adds	r3, #10
 8003e92:	2204      	movs	r2, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003e9a:	f7fe fbd1 	bl	8002640 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3306      	adds	r3, #6
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003eaa:	f7fe fbc9 	bl	8002640 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003eae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <wizchip_getnetinfo+0x78>)
 8003eb0:	781a      	ldrb	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee0 <wizchip_getnetinfo+0x78>)
 8003eb8:	785a      	ldrb	r2, [r3, #1]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <wizchip_getnetinfo+0x78>)
 8003ec0:	789a      	ldrb	r2, [r3, #2]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <wizchip_getnetinfo+0x78>)
 8003ec8:	78da      	ldrb	r2, [r3, #3]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003ece:	4b05      	ldr	r3, [pc, #20]	@ (8003ee4 <wizchip_getnetinfo+0x7c>)
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	759a      	strb	r2, [r3, #22]
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000fa8 	.word	0x20000fa8
 8003ee4:	20000fac 	.word	0x20000fac

08003ee8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <wizchip_setnetmode+0x1e>
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	e00e      	b.n	8003f24 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003f06:	2000      	movs	r0, #0
 8003f08:	f7fe fb00 	bl	800250c <WIZCHIP_READ>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fe fb41 	bl	80025a4 <WIZCHIP_WRITE>
   return 0;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7fe faeb 	bl	800250c <WIZCHIP_READ>
 8003f36:	4603      	mov	r3, r0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8003f4e:	f7fe fb29 	bl	80025a4 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	885b      	ldrh	r3, [r3, #2]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8003f62:	f7fe fb1f 	bl	80025a4 <WIZCHIP_WRITE>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	885b      	ldrh	r3, [r3, #2]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8003f72:	f7fe fb17 	bl	80025a4 <WIZCHIP_WRITE>
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003f7e:	b590      	push	{r4, r7, lr}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003f86:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8003f8a:	f7fe fabf 	bl	800250c <WIZCHIP_READ>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	461a      	mov	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003f96:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8003f9a:	f7fe fab7 	bl	800250c <WIZCHIP_READ>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	b29c      	uxth	r4, r3
 8003fa4:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8003fa8:	f7fe fab0 	bl	800250c <WIZCHIP_READ>
 8003fac:	4603      	mov	r3, r0
 8003fae:	4423      	add	r3, r4
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	805a      	strh	r2, [r3, #2]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd90      	pop	{r4, r7, pc}
	...

08003fc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fc0:	480d      	ldr	r0, [pc, #52]	@ (8003ff8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fc4:	f7fc fefe 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fc8:	480c      	ldr	r0, [pc, #48]	@ (8003ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8003fca:	490d      	ldr	r1, [pc, #52]	@ (8004000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004004 <LoopForever+0xe>)
  movs r3, #0
 8003fce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003fd0:	e002      	b.n	8003fd8 <LoopCopyDataInit>

08003fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fd6:	3304      	adds	r3, #4

08003fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fdc:	d3f9      	bcc.n	8003fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fde:	4a0a      	ldr	r2, [pc, #40]	@ (8004008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800400c <LoopForever+0x16>)
  movs r3, #0
 8003fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fe4:	e001      	b.n	8003fea <LoopFillZerobss>

08003fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe8:	3204      	adds	r2, #4

08003fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fec:	d3fb      	bcc.n	8003fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fee:	f002 feff 	bl	8006df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ff2:	f7fc faf5 	bl	80005e0 <main>

08003ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ff6:	e7fe      	b.n	8003ff6 <LoopForever>
  ldr   r0, =_estack
 8003ff8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004000:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004004:	08008e38 	.word	0x08008e38
  ldr r2, =_sbss
 8004008:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800400c:	20001100 	.word	0x20001100

08004010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004010:	e7fe      	b.n	8004010 <ADC1_2_IRQHandler>

08004012 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800401c:	2003      	movs	r0, #3
 800401e:	f000 f93d 	bl	800429c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004022:	2000      	movs	r0, #0
 8004024:	f000 f80e 	bl	8004044 <HAL_InitTick>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	71fb      	strb	r3, [r7, #7]
 8004032:	e001      	b.n	8004038 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004034:	f7fc fcee 	bl	8000a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004038:	79fb      	ldrb	r3, [r7, #7]

}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004050:	4b16      	ldr	r3, [pc, #88]	@ (80040ac <HAL_InitTick+0x68>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d022      	beq.n	800409e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <HAL_InitTick+0x6c>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b13      	ldr	r3, [pc, #76]	@ (80040ac <HAL_InitTick+0x68>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004064:	fbb1 f3f3 	udiv	r3, r1, r3
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	4618      	mov	r0, r3
 800406e:	f000 f93a 	bl	80042e6 <HAL_SYSTICK_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10f      	bne.n	8004098 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b0f      	cmp	r3, #15
 800407c:	d809      	bhi.n	8004092 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800407e:	2200      	movs	r2, #0
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	f04f 30ff 	mov.w	r0, #4294967295
 8004086:	f000 f914 	bl	80042b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800408a:	4a0a      	ldr	r2, [pc, #40]	@ (80040b4 <HAL_InitTick+0x70>)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	e007      	b.n	80040a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
 8004096:	e004      	b.n	80040a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e001      	b.n	80040a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000060 	.word	0x20000060
 80040b0:	20000020 	.word	0x20000020
 80040b4:	2000005c 	.word	0x2000005c

080040b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_IncTick+0x1c>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_IncTick+0x20>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	4a03      	ldr	r2, [pc, #12]	@ (80040d4 <HAL_IncTick+0x1c>)
 80040c8:	6013      	str	r3, [r2, #0]
}
 80040ca:	bf00      	nop
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	20000fb0 	.word	0x20000fb0
 80040d8:	20000060 	.word	0x20000060

080040dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return uwTick;
 80040e0:	4b03      	ldr	r3, [pc, #12]	@ (80040f0 <HAL_GetTick+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000fb0 	.word	0x20000fb0

080040f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040fc:	f7ff ffee 	bl	80040dc <HAL_GetTick>
 8004100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d004      	beq.n	8004118 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800410e:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_Delay+0x40>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4413      	add	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

   while ((HAL_GetTick() - tickstart) < wait)
 8004118:	bf00      	nop
 800411a:	f7ff ffdf 	bl	80040dc <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	429a      	cmp	r2, r3
 8004128:	d8f7      	bhi.n	800411a <HAL_Delay+0x26>
  {
  }
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000060 	.word	0x20000060

08004138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <__NVIC_SetPriorityGrouping+0x44>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004154:	4013      	ands	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004160:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416a:	4a04      	ldr	r2, [pc, #16]	@ (800417c <__NVIC_SetPriorityGrouping+0x44>)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	60d3      	str	r3, [r2, #12]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <__NVIC_GetPriorityGrouping+0x18>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 0307 	and.w	r3, r3, #7
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	6039      	str	r1, [r7, #0]
 80041a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	db0a      	blt.n	80041c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	490c      	ldr	r1, [pc, #48]	@ (80041e8 <__NVIC_SetPriority+0x4c>)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	0112      	lsls	r2, r2, #4
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	440b      	add	r3, r1
 80041c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c4:	e00a      	b.n	80041dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4908      	ldr	r1, [pc, #32]	@ (80041ec <__NVIC_SetPriority+0x50>)
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	3b04      	subs	r3, #4
 80041d4:	0112      	lsls	r2, r2, #4
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	440b      	add	r3, r1
 80041da:	761a      	strb	r2, [r3, #24]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000e100 	.word	0xe000e100
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	@ 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f1c3 0307 	rsb	r3, r3, #7
 800420a:	2b04      	cmp	r3, #4
 800420c:	bf28      	it	cs
 800420e:	2304      	movcs	r3, #4
 8004210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3304      	adds	r3, #4
 8004216:	2b06      	cmp	r3, #6
 8004218:	d902      	bls.n	8004220 <NVIC_EncodePriority+0x30>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3b03      	subs	r3, #3
 800421e:	e000      	b.n	8004222 <NVIC_EncodePriority+0x32>
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	401a      	ands	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004238:	f04f 31ff 	mov.w	r1, #4294967295
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	43d9      	mvns	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004248:	4313      	orrs	r3, r2
         );
}
 800424a:	4618      	mov	r0, r3
 800424c:	3724      	adds	r7, #36	@ 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
	...

08004258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004268:	d301      	bcc.n	800426e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800426a:	2301      	movs	r3, #1
 800426c:	e00f      	b.n	800428e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800426e:	4a0a      	ldr	r2, [pc, #40]	@ (8004298 <SysTick_Config+0x40>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3b01      	subs	r3, #1
 8004274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004276:	210f      	movs	r1, #15
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	f7ff ff8e 	bl	800419c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004280:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <SysTick_Config+0x40>)
 8004282:	2200      	movs	r2, #0
 8004284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004286:	4b04      	ldr	r3, [pc, #16]	@ (8004298 <SysTick_Config+0x40>)
 8004288:	2207      	movs	r2, #7
 800428a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	e000e010 	.word	0xe000e010

0800429c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff47 	bl	8004138 <__NVIC_SetPriorityGrouping>
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042c0:	f7ff ff5e 	bl	8004180 <__NVIC_GetPriorityGrouping>
 80042c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f7ff ff90 	bl	80041f0 <NVIC_EncodePriority>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff5f 	bl	800419c <__NVIC_SetPriority>
}
 80042de:	bf00      	nop
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ffb2 	bl	8004258 <SysTick_Config>
 80042f4:	4603      	mov	r3, r0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800430e:	e15a      	b.n	80045c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2101      	movs	r1, #1
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	4013      	ands	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 814c 	beq.w	80045c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d005      	beq.n	8004340 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800433c:	2b02      	cmp	r3, #2
 800433e:	d130      	bne.n	80043a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	2203      	movs	r2, #3
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4013      	ands	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004376:	2201      	movs	r2, #1
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4013      	ands	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f003 0201 	and.w	r2, r3, #1
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d017      	beq.n	80043de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	2203      	movs	r2, #3
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4013      	ands	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d123      	bne.n	8004432 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	08da      	lsrs	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3208      	adds	r2, #8
 80043f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	220f      	movs	r2, #15
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4013      	ands	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	08da      	lsrs	r2, r3, #3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3208      	adds	r2, #8
 800442c:	6939      	ldr	r1, [r7, #16]
 800442e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	2203      	movs	r2, #3
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0203 	and.w	r2, r3, #3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80a6 	beq.w	80045c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004474:	4b5b      	ldr	r3, [pc, #364]	@ (80045e4 <HAL_GPIO_Init+0x2e4>)
 8004476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004478:	4a5a      	ldr	r2, [pc, #360]	@ (80045e4 <HAL_GPIO_Init+0x2e4>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004480:	4b58      	ldr	r3, [pc, #352]	@ (80045e4 <HAL_GPIO_Init+0x2e4>)
 8004482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800448c:	4a56      	ldr	r2, [pc, #344]	@ (80045e8 <HAL_GPIO_Init+0x2e8>)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	3302      	adds	r3, #2
 8004494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	220f      	movs	r2, #15
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044b6:	d01f      	beq.n	80044f8 <HAL_GPIO_Init+0x1f8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a4c      	ldr	r2, [pc, #304]	@ (80045ec <HAL_GPIO_Init+0x2ec>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d019      	beq.n	80044f4 <HAL_GPIO_Init+0x1f4>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a4b      	ldr	r2, [pc, #300]	@ (80045f0 <HAL_GPIO_Init+0x2f0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <HAL_GPIO_Init+0x1f0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a4a      	ldr	r2, [pc, #296]	@ (80045f4 <HAL_GPIO_Init+0x2f4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00d      	beq.n	80044ec <HAL_GPIO_Init+0x1ec>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a49      	ldr	r2, [pc, #292]	@ (80045f8 <HAL_GPIO_Init+0x2f8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <HAL_GPIO_Init+0x1e8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a48      	ldr	r2, [pc, #288]	@ (80045fc <HAL_GPIO_Init+0x2fc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_GPIO_Init+0x1e4>
 80044e0:	2305      	movs	r3, #5
 80044e2:	e00a      	b.n	80044fa <HAL_GPIO_Init+0x1fa>
 80044e4:	2306      	movs	r3, #6
 80044e6:	e008      	b.n	80044fa <HAL_GPIO_Init+0x1fa>
 80044e8:	2304      	movs	r3, #4
 80044ea:	e006      	b.n	80044fa <HAL_GPIO_Init+0x1fa>
 80044ec:	2303      	movs	r3, #3
 80044ee:	e004      	b.n	80044fa <HAL_GPIO_Init+0x1fa>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e002      	b.n	80044fa <HAL_GPIO_Init+0x1fa>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_GPIO_Init+0x1fa>
 80044f8:	2300      	movs	r3, #0
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	f002 0203 	and.w	r2, r2, #3
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	4093      	lsls	r3, r2
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800450a:	4937      	ldr	r1, [pc, #220]	@ (80045e8 <HAL_GPIO_Init+0x2e8>)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004518:	4b39      	ldr	r3, [pc, #228]	@ (8004600 <HAL_GPIO_Init+0x300>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	43db      	mvns	r3, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800453c:	4a30      	ldr	r2, [pc, #192]	@ (8004600 <HAL_GPIO_Init+0x300>)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004542:	4b2f      	ldr	r3, [pc, #188]	@ (8004600 <HAL_GPIO_Init+0x300>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004566:	4a26      	ldr	r2, [pc, #152]	@ (8004600 <HAL_GPIO_Init+0x300>)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800456c:	4b24      	ldr	r3, [pc, #144]	@ (8004600 <HAL_GPIO_Init+0x300>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004590:	4a1b      	ldr	r2, [pc, #108]	@ (8004600 <HAL_GPIO_Init+0x300>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004596:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <HAL_GPIO_Init+0x300>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045ba:	4a11      	ldr	r2, [pc, #68]	@ (8004600 <HAL_GPIO_Init+0x300>)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3301      	adds	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f47f ae9d 	bne.w	8004310 <HAL_GPIO_Init+0x10>
  }
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40010000 	.word	0x40010000
 80045ec:	48000400 	.word	0x48000400
 80045f0:	48000800 	.word	0x48000800
 80045f4:	48000c00 	.word	0x48000c00
 80045f8:	48001000 	.word	0x48001000
 80045fc:	48001400 	.word	0x48001400
 8004600:	40010400 	.word	0x40010400

08004604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
 8004610:	4613      	mov	r3, r2
 8004612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004614:	787b      	ldrb	r3, [r7, #1]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004620:	e002      	b.n	8004628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d141      	bne.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004642:	4b4b      	ldr	r3, [pc, #300]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464e:	d131      	bne.n	80046b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004650:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004656:	4a46      	ldr	r2, [pc, #280]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800465c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004660:	4b43      	ldr	r3, [pc, #268]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004668:	4a41      	ldr	r2, [pc, #260]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800466e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004670:	4b40      	ldr	r3, [pc, #256]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2232      	movs	r2, #50	@ 0x32
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	4a3f      	ldr	r2, [pc, #252]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	0c9b      	lsrs	r3, r3, #18
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004686:	e002      	b.n	800468e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468e:	4b38      	ldr	r3, [pc, #224]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469a:	d102      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f2      	bne.n	8004688 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a2:	4b33      	ldr	r3, [pc, #204]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ae:	d158      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e057      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80046c4:	e04d      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046cc:	d141      	bne.n	8004752 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ce:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046da:	d131      	bne.n	8004740 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046dc:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e2:	4a23      	ldr	r2, [pc, #140]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ec:	4b20      	ldr	r3, [pc, #128]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2232      	movs	r2, #50	@ 0x32
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a1c      	ldr	r2, [pc, #112]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	0c9b      	lsrs	r3, r3, #18
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004712:	e002      	b.n	800471a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004726:	d102      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f2      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800472e:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473a:	d112      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e011      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004746:	4a0a      	ldr	r2, [pc, #40]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004750:	e007      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004752:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800475a:	4a05      	ldr	r2, [pc, #20]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004760:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40007000 	.word	0x40007000
 8004774:	20000020 	.word	0x20000020
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a04      	ldr	r2, [pc, #16]	@ (8004798 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800478a:	6093      	str	r3, [r2, #8]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40007000 	.word	0x40007000

0800479c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e2fe      	b.n	8004dac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d075      	beq.n	80048a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ba:	4b97      	ldr	r3, [pc, #604]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c4:	4b94      	ldr	r3, [pc, #592]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b0c      	cmp	r3, #12
 80047d2:	d102      	bne.n	80047da <HAL_RCC_OscConfig+0x3e>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d002      	beq.n	80047e0 <HAL_RCC_OscConfig+0x44>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x108>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d157      	bne.n	80048a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e2d9      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x74>
 8004802:	4b85      	ldr	r3, [pc, #532]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a84      	ldr	r2, [pc, #528]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e01d      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x98>
 800481a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4b7c      	ldr	r3, [pc, #496]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004834:	4b78      	ldr	r3, [pc, #480]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a77      	ldr	r2, [pc, #476]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800483a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b75      	ldr	r3, [pc, #468]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a74      	ldr	r2, [pc, #464]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800484a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7ff fc42 	bl	80040dc <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800485c:	f7ff fc3e 	bl	80040dc <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	@ 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e29e      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800486e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0xc0>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7ff fc2e 	bl	80040dc <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004884:	f7ff fc2a 	bl	80040dc <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	@ 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e28a      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004896:	4b60      	ldr	r3, [pc, #384]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0xe8>
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d075      	beq.n	800499e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b2:	4b59      	ldr	r3, [pc, #356]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048bc:	4b56      	ldr	r3, [pc, #344]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_OscConfig+0x136>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d002      	beq.n	80048d8 <HAL_RCC_OscConfig+0x13c>
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11f      	bne.n	8004918 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_OscConfig+0x154>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e25d      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f0:	4b49      	ldr	r3, [pc, #292]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	4946      	ldr	r1, [pc, #280]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004904:	4b45      	ldr	r3, [pc, #276]	@ (8004a1c <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fb9b 	bl	8004044 <HAL_InitTick>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d043      	beq.n	800499c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e249      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d023      	beq.n	8004968 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b3d      	ldr	r3, [pc, #244]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a3c      	ldr	r2, [pc, #240]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7ff fbd6 	bl	80040dc <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004934:	f7ff fbd2 	bl	80040dc <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e232      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004946:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004952:	4b31      	ldr	r3, [pc, #196]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	492d      	ldr	r1, [pc, #180]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
 8004966:	e01a      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004968:	4b2b      	ldr	r3, [pc, #172]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800496e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7ff fbb2 	bl	80040dc <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7ff fbae 	bl	80040dc <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e20e      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800498e:	4b22      	ldr	r3, [pc, #136]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x1e0>
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d041      	beq.n	8004a2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01c      	beq.n	80049ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b2:	4b19      	ldr	r3, [pc, #100]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b8:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7ff fb8b 	bl	80040dc <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ca:	f7ff fb87 	bl	80040dc <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1e7      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ef      	beq.n	80049ca <HAL_RCC_OscConfig+0x22e>
 80049ea:	e020      	b.n	8004a2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f2:	4a09      	ldr	r2, [pc, #36]	@ (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7ff fb6e 	bl	80040dc <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a02:	e00d      	b.n	8004a20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a04:	f7ff fb6a 	bl	80040dc <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d906      	bls.n	8004a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1ca      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a20:	4b8c      	ldr	r3, [pc, #560]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ea      	bne.n	8004a04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80a6 	beq.w	8004b88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a40:	4b84      	ldr	r3, [pc, #528]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2b4>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x2b6>
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a56:	4b7f      	ldr	r3, [pc, #508]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a62:	4b7c      	ldr	r3, [pc, #496]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a72:	4b79      	ldr	r3, [pc, #484]	@ (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d118      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7e:	4b76      	ldr	r3, [pc, #472]	@ (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a75      	ldr	r2, [pc, #468]	@ (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8a:	f7ff fb27 	bl	80040dc <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a92:	f7ff fb23 	bl	80040dc <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e183      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d108      	bne.n	8004aca <HAL_RCC_OscConfig+0x32e>
 8004ab8:	4b66      	ldr	r3, [pc, #408]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abe:	4a65      	ldr	r2, [pc, #404]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ac8:	e024      	b.n	8004b14 <HAL_RCC_OscConfig+0x378>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d110      	bne.n	8004af4 <HAL_RCC_OscConfig+0x358>
 8004ad2:	4b60      	ldr	r3, [pc, #384]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	4a5e      	ldr	r2, [pc, #376]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004af2:	e00f      	b.n	8004b14 <HAL_RCC_OscConfig+0x378>
 8004af4:	4b57      	ldr	r3, [pc, #348]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afa:	4a56      	ldr	r2, [pc, #344]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b04:	4b53      	ldr	r3, [pc, #332]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0a:	4a52      	ldr	r2, [pc, #328]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d016      	beq.n	8004b4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7ff fade 	bl	80040dc <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b24:	f7ff fada 	bl	80040dc <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e138      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3a:	4b46      	ldr	r3, [pc, #280]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ed      	beq.n	8004b24 <HAL_RCC_OscConfig+0x388>
 8004b48:	e015      	b.n	8004b76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7ff fac7 	bl	80040dc <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7ff fac3 	bl	80040dc <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e121      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b68:	4b3a      	ldr	r3, [pc, #232]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ed      	bne.n	8004b52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b80:	4a34      	ldr	r2, [pc, #208]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d03c      	beq.n	8004c0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01c      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7ff fa96 	bl	80040dc <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb4:	f7ff fa92 	bl	80040dc <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0f2      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bc6:	4b23      	ldr	r3, [pc, #140]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ef      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x418>
 8004bd4:	e01b      	b.n	8004c0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be6:	f7ff fa79 	bl	80040dc <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bee:	f7ff fa75 	bl	80040dc <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0d5      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c00:	4b14      	ldr	r3, [pc, #80]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ef      	bne.n	8004bee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80c9 	beq.w	8004daa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c18:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	f000 8083 	beq.w	8004d2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d15e      	bne.n	8004cec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a08      	ldr	r2, [pc, #32]	@ (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7ff fa4f 	bl	80040dc <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c40:	e00c      	b.n	8004c5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7ff fa4b 	bl	80040dc <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d905      	bls.n	8004c5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0ab      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5c:	4b55      	ldr	r3, [pc, #340]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ec      	bne.n	8004c42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c68:	4b52      	ldr	r3, [pc, #328]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	4b52      	ldr	r3, [pc, #328]	@ (8004db8 <HAL_RCC_OscConfig+0x61c>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6a11      	ldr	r1, [r2, #32]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c78:	3a01      	subs	r2, #1
 8004c7a:	0112      	lsls	r2, r2, #4
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004c82:	0212      	lsls	r2, r2, #8
 8004c84:	4311      	orrs	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c8a:	0852      	lsrs	r2, r2, #1
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	0552      	lsls	r2, r2, #21
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c96:	0852      	lsrs	r2, r2, #1
 8004c98:	3a01      	subs	r2, #1
 8004c9a:	0652      	lsls	r2, r2, #25
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ca2:	06d2      	lsls	r2, r2, #27
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	4943      	ldr	r1, [pc, #268]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cac:	4b41      	ldr	r3, [pc, #260]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a40      	ldr	r2, [pc, #256]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7ff fa0a 	bl	80040dc <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7ff fa06 	bl	80040dc <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e066      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cde:	4b35      	ldr	r3, [pc, #212]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x530>
 8004cea:	e05e      	b.n	8004daa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cec:	4b31      	ldr	r3, [pc, #196]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a30      	ldr	r2, [pc, #192]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7ff f9f0 	bl	80040dc <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d00:	f7ff f9ec 	bl	80040dc <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e04c      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d12:	4b28      	ldr	r3, [pc, #160]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d1e:	4b25      	ldr	r3, [pc, #148]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	4924      	ldr	r1, [pc, #144]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d24:	4b25      	ldr	r3, [pc, #148]	@ (8004dbc <HAL_RCC_OscConfig+0x620>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	60cb      	str	r3, [r1, #12]
 8004d2a:	e03e      	b.n	8004daa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e039      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d38:	4b1e      	ldr	r3, [pc, #120]	@ (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 0203 	and.w	r2, r3, #3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d12c      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	3b01      	subs	r3, #1
 8004d58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d123      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d11b      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d113      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d109      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3720      	adds	r7, #32
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40021000 	.word	0x40021000
 8004db8:	019f800c 	.word	0x019f800c
 8004dbc:	feeefffc 	.word	0xfeeefffc

08004dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e11e      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b91      	ldr	r3, [pc, #580]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d910      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b8e      	ldr	r3, [pc, #568]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 020f 	bic.w	r2, r3, #15
 8004dee:	498c      	ldr	r1, [pc, #560]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b8a      	ldr	r3, [pc, #552]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e106      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d073      	beq.n	8004efc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d129      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1c:	4b81      	ldr	r3, [pc, #516]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0f4      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e2c:	f000 f99e 	bl	800516c <RCC_GetSysClockFreqFromPLLSource>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4a7c      	ldr	r2, [pc, #496]	@ (8005028 <HAL_RCC_ClockConfig+0x268>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d93f      	bls.n	8004eba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d033      	beq.n	8004eba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12f      	bne.n	8004eba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e5a:	4b72      	ldr	r3, [pc, #456]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e62:	4a70      	ldr	r2, [pc, #448]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e6a:	2380      	movs	r3, #128	@ 0x80
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e024      	b.n	8004eba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e78:	4b6a      	ldr	r3, [pc, #424]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0c6      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e88:	4b66      	ldr	r3, [pc, #408]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0be      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e98:	f000 f8ce 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004e9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4a61      	ldr	r2, [pc, #388]	@ (8005028 <HAL_RCC_ClockConfig+0x268>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d909      	bls.n	8004eba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eae:	4a5d      	ldr	r2, [pc, #372]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004eb6:	2380      	movs	r3, #128	@ 0x80
 8004eb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eba:	4b5a      	ldr	r3, [pc, #360]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 0203 	bic.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4957      	ldr	r1, [pc, #348]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ecc:	f7ff f906 	bl	80040dc <HAL_GetTick>
 8004ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed4:	f7ff f902 	bl	80040dc <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e095      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	4b4e      	ldr	r3, [pc, #312]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 020c 	and.w	r2, r3, #12
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1eb      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d023      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f14:	4b43      	ldr	r3, [pc, #268]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a42      	ldr	r2, [pc, #264]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f34:	4a3b      	ldr	r2, [pc, #236]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3c:	4b39      	ldr	r3, [pc, #228]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4936      	ldr	r1, [pc, #216]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b80      	cmp	r3, #128	@ 0x80
 8004f54:	d105      	bne.n	8004f62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f56:	4b33      	ldr	r3, [pc, #204]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4a32      	ldr	r2, [pc, #200]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f62:	4b2f      	ldr	r3, [pc, #188]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d21d      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f70:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 020f 	bic.w	r2, r3, #15
 8004f78:	4929      	ldr	r1, [pc, #164]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f80:	f7ff f8ac 	bl	80040dc <HAL_GetTick>
 8004f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f88:	f7ff f8a8 	bl	80040dc <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e03b      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b20      	ldr	r3, [pc, #128]	@ (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1ed      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4917      	ldr	r1, [pc, #92]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd6:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	490f      	ldr	r1, [pc, #60]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fea:	f000 f825 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490c      	ldr	r1, [pc, #48]	@ (800502c <HAL_RCC_ClockConfig+0x26c>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	fa22 f303 	lsr.w	r3, r2, r3
 8005006:	4a0a      	ldr	r2, [pc, #40]	@ (8005030 <HAL_RCC_ClockConfig+0x270>)
 8005008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800500a:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x274>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff f818 	bl	8004044 <HAL_InitTick>
 8005014:	4603      	mov	r3, r0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40022000 	.word	0x40022000
 8005024:	40021000 	.word	0x40021000
 8005028:	04c4b400 	.word	0x04c4b400
 800502c:	08008bf4 	.word	0x08008bf4
 8005030:	20000020 	.word	0x20000020
 8005034:	2000005c 	.word	0x2000005c

08005038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800503e:	4b2c      	ldr	r3, [pc, #176]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b04      	cmp	r3, #4
 8005048:	d102      	bne.n	8005050 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800504a:	4b2a      	ldr	r3, [pc, #168]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	e047      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005050:	4b27      	ldr	r3, [pc, #156]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b08      	cmp	r3, #8
 800505a:	d102      	bne.n	8005062 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800505c:	4b26      	ldr	r3, [pc, #152]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e03e      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005062:	4b23      	ldr	r3, [pc, #140]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	2b0c      	cmp	r3, #12
 800506c:	d136      	bne.n	80050dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800506e:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005078:	4b1d      	ldr	r3, [pc, #116]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	3301      	adds	r3, #1
 8005084:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d10c      	bne.n	80050a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800508c:	4a1a      	ldr	r2, [pc, #104]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	4a16      	ldr	r2, [pc, #88]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	0a12      	lsrs	r2, r2, #8
 800509a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	617b      	str	r3, [r7, #20]
      break;
 80050a4:	e00c      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050a6:	4a13      	ldr	r2, [pc, #76]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	4a10      	ldr	r2, [pc, #64]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b0:	68d2      	ldr	r2, [r2, #12]
 80050b2:	0a12      	lsrs	r2, r2, #8
 80050b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050b8:	fb02 f303 	mul.w	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]
      break;
 80050be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050c0:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0e5b      	lsrs	r3, r3, #25
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	3301      	adds	r3, #1
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e001      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050e0:	693b      	ldr	r3, [r7, #16]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	00f42400 	.word	0x00f42400
 80050f8:	016e3600 	.word	0x016e3600

080050fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005100:	4b03      	ldr	r3, [pc, #12]	@ (8005110 <HAL_RCC_GetHCLKFreq+0x14>)
 8005102:	681b      	ldr	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000020 	.word	0x20000020

08005114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005118:	f7ff fff0 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4904      	ldr	r1, [pc, #16]	@ (800513c <HAL_RCC_GetPCLK1Freq+0x28>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40021000 	.word	0x40021000
 800513c:	08008c04 	.word	0x08008c04

08005140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005144:	f7ff ffda 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0adb      	lsrs	r3, r3, #11
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4904      	ldr	r1, [pc, #16]	@ (8005168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	08008c04 	.word	0x08008c04

0800516c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005172:	4b1e      	ldr	r3, [pc, #120]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800517c:	4b1b      	ldr	r3, [pc, #108]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b03      	cmp	r3, #3
 800518e:	d10c      	bne.n	80051aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005190:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	4a14      	ldr	r2, [pc, #80]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800519a:	68d2      	ldr	r2, [r2, #12]
 800519c:	0a12      	lsrs	r2, r2, #8
 800519e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	617b      	str	r3, [r7, #20]
    break;
 80051a8:	e00c      	b.n	80051c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051aa:	4a12      	ldr	r2, [pc, #72]	@ (80051f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	4a0e      	ldr	r2, [pc, #56]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	0a12      	lsrs	r2, r2, #8
 80051b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
 80051c0:	617b      	str	r3, [r7, #20]
    break;
 80051c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051c4:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	0e5b      	lsrs	r3, r3, #25
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	3301      	adds	r3, #1
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051de:	687b      	ldr	r3, [r7, #4]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40021000 	.word	0x40021000
 80051f0:	016e3600 	.word	0x016e3600
 80051f4:	00f42400 	.word	0x00f42400

080051f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005200:	2300      	movs	r3, #0
 8005202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005204:	2300      	movs	r3, #0
 8005206:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8098 	beq.w	8005346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005216:	2300      	movs	r3, #0
 8005218:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800521a:	4b43      	ldr	r3, [pc, #268]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005226:	4b40      	ldr	r3, [pc, #256]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522a:	4a3f      	ldr	r2, [pc, #252]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005230:	6593      	str	r3, [r2, #88]	@ 0x58
 8005232:	4b3d      	ldr	r3, [pc, #244]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523e:	2301      	movs	r3, #1
 8005240:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005242:	4b3a      	ldr	r3, [pc, #232]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a39      	ldr	r2, [pc, #228]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800524e:	f7fe ff45 	bl	80040dc <HAL_GetTick>
 8005252:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005254:	e009      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005256:	f7fe ff41 	bl	80040dc <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d902      	bls.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	74fb      	strb	r3, [r7, #19]
        break;
 8005268:	e005      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526a:	4b30      	ldr	r3, [pc, #192]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ef      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005276:	7cfb      	ldrb	r3, [r7, #19]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d159      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800527c:	4b2a      	ldr	r3, [pc, #168]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005286:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01e      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	429a      	cmp	r2, r3
 8005296:	d019      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005298:	4b23      	ldr	r3, [pc, #140]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052a4:	4b20      	ldr	r3, [pc, #128]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052c4:	4a18      	ldr	r2, [pc, #96]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d6:	f7fe ff01 	bl	80040dc <HAL_GetTick>
 80052da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052dc:	e00b      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fe fefd 	bl	80040dc <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d902      	bls.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	74fb      	strb	r3, [r7, #19]
            break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ec      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800530a:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005318:	4903      	ldr	r1, [pc, #12]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	74bb      	strb	r3, [r7, #18]
 8005326:	e005      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005328:	40021000 	.word	0x40021000
 800532c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005334:	7c7b      	ldrb	r3, [r7, #17]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4ba7      	ldr	r3, [pc, #668]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	4aa6      	ldr	r2, [pc, #664]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005344:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005352:	4ba1      	ldr	r3, [pc, #644]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005358:	f023 0203 	bic.w	r2, r3, #3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	499d      	ldr	r1, [pc, #628]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005374:	4b98      	ldr	r3, [pc, #608]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f023 020c 	bic.w	r2, r3, #12
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4995      	ldr	r1, [pc, #596]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005396:	4b90      	ldr	r3, [pc, #576]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	498c      	ldr	r1, [pc, #560]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053b8:	4b87      	ldr	r3, [pc, #540]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	4984      	ldr	r1, [pc, #528]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053da:	4b7f      	ldr	r3, [pc, #508]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	497b      	ldr	r1, [pc, #492]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053fc:	4b76      	ldr	r3, [pc, #472]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	4973      	ldr	r1, [pc, #460]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800541e:	4b6e      	ldr	r3, [pc, #440]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005424:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	496a      	ldr	r1, [pc, #424]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005440:	4b65      	ldr	r3, [pc, #404]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005446:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4962      	ldr	r1, [pc, #392]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005462:	4b5d      	ldr	r3, [pc, #372]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005468:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	4959      	ldr	r1, [pc, #356]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005484:	4b54      	ldr	r3, [pc, #336]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005486:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800548a:	f023 0203 	bic.w	r2, r3, #3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	4951      	ldr	r1, [pc, #324]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a6:	4b4c      	ldr	r3, [pc, #304]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b4:	4948      	ldr	r1, [pc, #288]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d015      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054c8:	4b43      	ldr	r3, [pc, #268]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d6:	4940      	ldr	r1, [pc, #256]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e6:	d105      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e8:	4b3b      	ldr	r3, [pc, #236]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	4a3a      	ldr	r2, [pc, #232]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054f2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d015      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005500:	4b35      	ldr	r3, [pc, #212]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550e:	4932      	ldr	r1, [pc, #200]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800551e:	d105      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005520:	4b2d      	ldr	r3, [pc, #180]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4a2c      	ldr	r2, [pc, #176]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800552a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d015      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005538:	4b27      	ldr	r3, [pc, #156]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005546:	4924      	ldr	r1, [pc, #144]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005556:	d105      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005558:	4b1f      	ldr	r3, [pc, #124]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a1e      	ldr	r2, [pc, #120]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005562:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005570:	4b19      	ldr	r3, [pc, #100]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005576:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557e:	4916      	ldr	r1, [pc, #88]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800558e:	d105      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005590:	4b11      	ldr	r3, [pc, #68]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a10      	ldr	r2, [pc, #64]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800559a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d019      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a8:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	4908      	ldr	r1, [pc, #32]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055c6:	d109      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c8:	4b03      	ldr	r3, [pc, #12]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a02      	ldr	r2, [pc, #8]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055d2:	60d3      	str	r3, [r2, #12]
 80055d4:	e002      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055d6:	bf00      	nop
 80055d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055e8:	4b29      	ldr	r3, [pc, #164]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f6:	4926      	ldr	r1, [pc, #152]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005606:	d105      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005608:	4b21      	ldr	r3, [pc, #132]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	4a20      	ldr	r2, [pc, #128]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800560e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005612:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d015      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005620:	4b1b      	ldr	r3, [pc, #108]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005626:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800562e:	4918      	ldr	r1, [pc, #96]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005640:	4b13      	ldr	r3, [pc, #76]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a12      	ldr	r2, [pc, #72]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800564a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d015      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005658:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800565a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800565e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005666:	490a      	ldr	r1, [pc, #40]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005676:	d105      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	4b05      	ldr	r3, [pc, #20]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a04      	ldr	r2, [pc, #16]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005682:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005684:	7cbb      	ldrb	r3, [r7, #18]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000

08005694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e09d      	b.n	80057e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056b6:	d009      	beq.n	80056cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	61da      	str	r2, [r3, #28]
 80056be:	e005      	b.n	80056cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fb f9b8 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005702:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800570c:	d902      	bls.n	8005714 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	e002      	b.n	800571a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005718:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005722:	d007      	beq.n	8005734 <HAL_SPI_Init+0xa0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800572c:	d002      	beq.n	8005734 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005776:	ea42 0103 	orr.w	r1, r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	0c1b      	lsrs	r3, r3, #16
 8005790:	f003 0204 	and.w	r2, r3, #4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80057b0:	ea42 0103 	orr.w	r1, r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e042      	b.n	8005882 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fb f984 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	@ 0x24
 8005818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fb25 	bl	8005e84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f826 	bl	800588c <UART_SetConfig>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e01b      	b.n	8005882 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005858:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005868:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0201 	orr.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fba4 	bl	8005fc8 <UART_CheckIdleState>
 8005880:	4603      	mov	r3, r0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800588c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005890:	b08c      	sub	sp, #48	@ 0x30
 8005892:	af00      	add	r7, sp, #0
 8005894:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4baa      	ldr	r3, [pc, #680]	@ (8005b64 <UART_SetConfig+0x2d8>)
 80058bc:	4013      	ands	r3, r2
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a9f      	ldr	r2, [pc, #636]	@ (8005b68 <UART_SetConfig+0x2dc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058f4:	4313      	orrs	r3, r2
 80058f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005902:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800590c:	430b      	orrs	r3, r1
 800590e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005916:	f023 010f 	bic.w	r1, r3, #15
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a90      	ldr	r2, [pc, #576]	@ (8005b6c <UART_SetConfig+0x2e0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d125      	bne.n	800597c <UART_SetConfig+0xf0>
 8005930:	4b8f      	ldr	r3, [pc, #572]	@ (8005b70 <UART_SetConfig+0x2e4>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b03      	cmp	r3, #3
 800593c:	d81a      	bhi.n	8005974 <UART_SetConfig+0xe8>
 800593e:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <UART_SetConfig+0xb8>)
 8005940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005944:	08005955 	.word	0x08005955
 8005948:	08005965 	.word	0x08005965
 800594c:	0800595d 	.word	0x0800595d
 8005950:	0800596d 	.word	0x0800596d
 8005954:	2301      	movs	r3, #1
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595a:	e116      	b.n	8005b8a <UART_SetConfig+0x2fe>
 800595c:	2302      	movs	r3, #2
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005962:	e112      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005964:	2304      	movs	r3, #4
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596a:	e10e      	b.n	8005b8a <UART_SetConfig+0x2fe>
 800596c:	2308      	movs	r3, #8
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005972:	e10a      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005974:	2310      	movs	r3, #16
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800597a:	e106      	b.n	8005b8a <UART_SetConfig+0x2fe>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a7c      	ldr	r2, [pc, #496]	@ (8005b74 <UART_SetConfig+0x2e8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d138      	bne.n	80059f8 <UART_SetConfig+0x16c>
 8005986:	4b7a      	ldr	r3, [pc, #488]	@ (8005b70 <UART_SetConfig+0x2e4>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598c:	f003 030c 	and.w	r3, r3, #12
 8005990:	2b0c      	cmp	r3, #12
 8005992:	d82d      	bhi.n	80059f0 <UART_SetConfig+0x164>
 8005994:	a201      	add	r2, pc, #4	@ (adr r2, 800599c <UART_SetConfig+0x110>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059d1 	.word	0x080059d1
 80059a0:	080059f1 	.word	0x080059f1
 80059a4:	080059f1 	.word	0x080059f1
 80059a8:	080059f1 	.word	0x080059f1
 80059ac:	080059e1 	.word	0x080059e1
 80059b0:	080059f1 	.word	0x080059f1
 80059b4:	080059f1 	.word	0x080059f1
 80059b8:	080059f1 	.word	0x080059f1
 80059bc:	080059d9 	.word	0x080059d9
 80059c0:	080059f1 	.word	0x080059f1
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059e9 	.word	0x080059e9
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059d6:	e0d8      	b.n	8005b8a <UART_SetConfig+0x2fe>
 80059d8:	2302      	movs	r3, #2
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059de:	e0d4      	b.n	8005b8a <UART_SetConfig+0x2fe>
 80059e0:	2304      	movs	r3, #4
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059e6:	e0d0      	b.n	8005b8a <UART_SetConfig+0x2fe>
 80059e8:	2308      	movs	r3, #8
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ee:	e0cc      	b.n	8005b8a <UART_SetConfig+0x2fe>
 80059f0:	2310      	movs	r3, #16
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f6:	e0c8      	b.n	8005b8a <UART_SetConfig+0x2fe>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a5e      	ldr	r2, [pc, #376]	@ (8005b78 <UART_SetConfig+0x2ec>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d125      	bne.n	8005a4e <UART_SetConfig+0x1c2>
 8005a02:	4b5b      	ldr	r3, [pc, #364]	@ (8005b70 <UART_SetConfig+0x2e4>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a0c:	2b30      	cmp	r3, #48	@ 0x30
 8005a0e:	d016      	beq.n	8005a3e <UART_SetConfig+0x1b2>
 8005a10:	2b30      	cmp	r3, #48	@ 0x30
 8005a12:	d818      	bhi.n	8005a46 <UART_SetConfig+0x1ba>
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d00a      	beq.n	8005a2e <UART_SetConfig+0x1a2>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d814      	bhi.n	8005a46 <UART_SetConfig+0x1ba>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <UART_SetConfig+0x19a>
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d008      	beq.n	8005a36 <UART_SetConfig+0x1aa>
 8005a24:	e00f      	b.n	8005a46 <UART_SetConfig+0x1ba>
 8005a26:	2300      	movs	r3, #0
 8005a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a2c:	e0ad      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a34:	e0a9      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005a36:	2304      	movs	r3, #4
 8005a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3c:	e0a5      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005a3e:	2308      	movs	r3, #8
 8005a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a44:	e0a1      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005a46:	2310      	movs	r3, #16
 8005a48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4c:	e09d      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a4a      	ldr	r2, [pc, #296]	@ (8005b7c <UART_SetConfig+0x2f0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d125      	bne.n	8005aa4 <UART_SetConfig+0x218>
 8005a58:	4b45      	ldr	r3, [pc, #276]	@ (8005b70 <UART_SetConfig+0x2e4>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a64:	d016      	beq.n	8005a94 <UART_SetConfig+0x208>
 8005a66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a68:	d818      	bhi.n	8005a9c <UART_SetConfig+0x210>
 8005a6a:	2b80      	cmp	r3, #128	@ 0x80
 8005a6c:	d00a      	beq.n	8005a84 <UART_SetConfig+0x1f8>
 8005a6e:	2b80      	cmp	r3, #128	@ 0x80
 8005a70:	d814      	bhi.n	8005a9c <UART_SetConfig+0x210>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <UART_SetConfig+0x1f0>
 8005a76:	2b40      	cmp	r3, #64	@ 0x40
 8005a78:	d008      	beq.n	8005a8c <UART_SetConfig+0x200>
 8005a7a:	e00f      	b.n	8005a9c <UART_SetConfig+0x210>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a82:	e082      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005a84:	2302      	movs	r3, #2
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a8a:	e07e      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a92:	e07a      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005a94:	2308      	movs	r3, #8
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a9a:	e076      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa2:	e072      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a35      	ldr	r2, [pc, #212]	@ (8005b80 <UART_SetConfig+0x2f4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d12a      	bne.n	8005b04 <UART_SetConfig+0x278>
 8005aae:	4b30      	ldr	r3, [pc, #192]	@ (8005b70 <UART_SetConfig+0x2e4>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005abc:	d01a      	beq.n	8005af4 <UART_SetConfig+0x268>
 8005abe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ac2:	d81b      	bhi.n	8005afc <UART_SetConfig+0x270>
 8005ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac8:	d00c      	beq.n	8005ae4 <UART_SetConfig+0x258>
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ace:	d815      	bhi.n	8005afc <UART_SetConfig+0x270>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <UART_SetConfig+0x250>
 8005ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad8:	d008      	beq.n	8005aec <UART_SetConfig+0x260>
 8005ada:	e00f      	b.n	8005afc <UART_SetConfig+0x270>
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ae2:	e052      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aea:	e04e      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005aec:	2304      	movs	r3, #4
 8005aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005af2:	e04a      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005af4:	2308      	movs	r3, #8
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005afa:	e046      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005afc:	2310      	movs	r3, #16
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b02:	e042      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a17      	ldr	r2, [pc, #92]	@ (8005b68 <UART_SetConfig+0x2dc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d13a      	bne.n	8005b84 <UART_SetConfig+0x2f8>
 8005b0e:	4b18      	ldr	r3, [pc, #96]	@ (8005b70 <UART_SetConfig+0x2e4>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b1c:	d01a      	beq.n	8005b54 <UART_SetConfig+0x2c8>
 8005b1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b22:	d81b      	bhi.n	8005b5c <UART_SetConfig+0x2d0>
 8005b24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b28:	d00c      	beq.n	8005b44 <UART_SetConfig+0x2b8>
 8005b2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b2e:	d815      	bhi.n	8005b5c <UART_SetConfig+0x2d0>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <UART_SetConfig+0x2b0>
 8005b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b38:	d008      	beq.n	8005b4c <UART_SetConfig+0x2c0>
 8005b3a:	e00f      	b.n	8005b5c <UART_SetConfig+0x2d0>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b42:	e022      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005b44:	2302      	movs	r3, #2
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4a:	e01e      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b52:	e01a      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005b54:	2308      	movs	r3, #8
 8005b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b5a:	e016      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b62:	e012      	b.n	8005b8a <UART_SetConfig+0x2fe>
 8005b64:	cfff69f3 	.word	0xcfff69f3
 8005b68:	40008000 	.word	0x40008000
 8005b6c:	40013800 	.word	0x40013800
 8005b70:	40021000 	.word	0x40021000
 8005b74:	40004400 	.word	0x40004400
 8005b78:	40004800 	.word	0x40004800
 8005b7c:	40004c00 	.word	0x40004c00
 8005b80:	40005000 	.word	0x40005000
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4aae      	ldr	r2, [pc, #696]	@ (8005e48 <UART_SetConfig+0x5bc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	f040 8097 	bne.w	8005cc4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d823      	bhi.n	8005be6 <UART_SetConfig+0x35a>
 8005b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba4 <UART_SetConfig+0x318>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005be7 	.word	0x08005be7
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005be7 	.word	0x08005be7
 8005bb4:	08005bd7 	.word	0x08005bd7
 8005bb8:	08005be7 	.word	0x08005be7
 8005bbc:	08005be7 	.word	0x08005be7
 8005bc0:	08005be7 	.word	0x08005be7
 8005bc4:	08005bdf 	.word	0x08005bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc8:	f7ff faa4 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005bcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bce:	e010      	b.n	8005bf2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd0:	4b9e      	ldr	r3, [pc, #632]	@ (8005e4c <UART_SetConfig+0x5c0>)
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bd4:	e00d      	b.n	8005bf2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd6:	f7ff fa2f 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005bda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bdc:	e009      	b.n	8005bf2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005be4:	e005      	b.n	8005bf2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8130 	beq.w	8005e5a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	4a94      	ldr	r2, [pc, #592]	@ (8005e50 <UART_SetConfig+0x5c4>)
 8005c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c04:	461a      	mov	r2, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	4413      	add	r3, r2
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d305      	bcc.n	8005c2a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d903      	bls.n	8005c32 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c30:	e113      	b.n	8005e5a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	2200      	movs	r2, #0
 8005c36:	60bb      	str	r3, [r7, #8]
 8005c38:	60fa      	str	r2, [r7, #12]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	4a84      	ldr	r2, [pc, #528]	@ (8005e50 <UART_SetConfig+0x5c4>)
 8005c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2200      	movs	r2, #0
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c54:	f7fa fb4c 	bl	80002f0 <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4619      	mov	r1, r3
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	020b      	lsls	r3, r1, #8
 8005c6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c6e:	0202      	lsls	r2, r0, #8
 8005c70:	6979      	ldr	r1, [r7, #20]
 8005c72:	6849      	ldr	r1, [r1, #4]
 8005c74:	0849      	lsrs	r1, r1, #1
 8005c76:	2000      	movs	r0, #0
 8005c78:	460c      	mov	r4, r1
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	eb12 0804 	adds.w	r8, r2, r4
 8005c80:	eb43 0905 	adc.w	r9, r3, r5
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	469a      	mov	sl, r3
 8005c8c:	4693      	mov	fp, r2
 8005c8e:	4652      	mov	r2, sl
 8005c90:	465b      	mov	r3, fp
 8005c92:	4640      	mov	r0, r8
 8005c94:	4649      	mov	r1, r9
 8005c96:	f7fa fb2b 	bl	80002f0 <__aeabi_uldivmod>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ca8:	d308      	bcc.n	8005cbc <UART_SetConfig+0x430>
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cb0:	d204      	bcs.n	8005cbc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6a3a      	ldr	r2, [r7, #32]
 8005cb8:	60da      	str	r2, [r3, #12]
 8005cba:	e0ce      	b.n	8005e5a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005cc2:	e0ca      	b.n	8005e5a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ccc:	d166      	bne.n	8005d9c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005cce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d827      	bhi.n	8005d26 <UART_SetConfig+0x49a>
 8005cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cdc <UART_SetConfig+0x450>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d01 	.word	0x08005d01
 8005ce0:	08005d09 	.word	0x08005d09
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	08005d27 	.word	0x08005d27
 8005cec:	08005d17 	.word	0x08005d17
 8005cf0:	08005d27 	.word	0x08005d27
 8005cf4:	08005d27 	.word	0x08005d27
 8005cf8:	08005d27 	.word	0x08005d27
 8005cfc:	08005d1f 	.word	0x08005d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d00:	f7ff fa08 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005d04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d06:	e014      	b.n	8005d32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d08:	f7ff fa1a 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 8005d0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d0e:	e010      	b.n	8005d32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d10:	4b4e      	ldr	r3, [pc, #312]	@ (8005e4c <UART_SetConfig+0x5c0>)
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d14:	e00d      	b.n	8005d32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d16:	f7ff f98f 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005d1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d1c:	e009      	b.n	8005d32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d24:	e005      	b.n	8005d32 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8090 	beq.w	8005e5a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	4a44      	ldr	r2, [pc, #272]	@ (8005e50 <UART_SetConfig+0x5c4>)
 8005d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d44:	461a      	mov	r2, r3
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d4c:	005a      	lsls	r2, r3, #1
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	441a      	add	r2, r3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	d916      	bls.n	8005d94 <UART_SetConfig+0x508>
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6c:	d212      	bcs.n	8005d94 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f023 030f 	bic.w	r3, r3, #15
 8005d76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	8bfb      	ldrh	r3, [r7, #30]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	8bfa      	ldrh	r2, [r7, #30]
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	e062      	b.n	8005e5a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d9a:	e05e      	b.n	8005e5a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d828      	bhi.n	8005df6 <UART_SetConfig+0x56a>
 8005da4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <UART_SetConfig+0x520>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dd1 	.word	0x08005dd1
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005de1 	.word	0x08005de1
 8005db8:	08005df7 	.word	0x08005df7
 8005dbc:	08005de7 	.word	0x08005de7
 8005dc0:	08005df7 	.word	0x08005df7
 8005dc4:	08005df7 	.word	0x08005df7
 8005dc8:	08005df7 	.word	0x08005df7
 8005dcc:	08005def 	.word	0x08005def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd0:	f7ff f9a0 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005dd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dd6:	e014      	b.n	8005e02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd8:	f7ff f9b2 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 8005ddc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dde:	e010      	b.n	8005e02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e4c <UART_SetConfig+0x5c0>)
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005de4:	e00d      	b.n	8005e02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de6:	f7ff f927 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005dea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dec:	e009      	b.n	8005e02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005df4:	e005      	b.n	8005e02 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e00:	bf00      	nop
    }

    if (pclk != 0U)
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d028      	beq.n	8005e5a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	4a10      	ldr	r2, [pc, #64]	@ (8005e50 <UART_SetConfig+0x5c4>)
 8005e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	441a      	add	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	2b0f      	cmp	r3, #15
 8005e30:	d910      	bls.n	8005e54 <UART_SetConfig+0x5c8>
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e38:	d20c      	bcs.n	8005e54 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60da      	str	r2, [r3, #12]
 8005e44:	e009      	b.n	8005e5a <UART_SetConfig+0x5ce>
 8005e46:	bf00      	nop
 8005e48:	40008000 	.word	0x40008000
 8005e4c:	00f42400 	.word	0x00f42400
 8005e50:	08008d20 	.word	0x08008d20
      }
      else
      {
        ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2200      	movs	r2, #0
 8005e74:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3730      	adds	r7, #48	@ 0x30
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01a      	beq.n	8005f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f82:	d10a      	bne.n	8005f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	605a      	str	r2, [r3, #4]
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b098      	sub	sp, #96	@ 0x60
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fd8:	f7fe f880 	bl	80040dc <HAL_GetTick>
 8005fdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d12f      	bne.n	800604c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f88e 	bl	800611c <UART_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d022      	beq.n	800604c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800601a:	653b      	str	r3, [r7, #80]	@ 0x50
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006024:	647b      	str	r3, [r7, #68]	@ 0x44
 8006026:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800602a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e6      	bne.n	8006006 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2220      	movs	r2, #32
 800603c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e063      	b.n	8006114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b04      	cmp	r3, #4
 8006058:	d149      	bne.n	80060ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800605a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006062:	2200      	movs	r2, #0
 8006064:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f857 	bl	800611c <UART_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d03c      	beq.n	80060ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	623b      	str	r3, [r7, #32]
   return(result);
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006092:	633b      	str	r3, [r7, #48]	@ 0x30
 8006094:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e6      	bne.n	8006074 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3308      	adds	r3, #8
 80060ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c6:	61fa      	str	r2, [r7, #28]
 80060c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	69b9      	ldr	r1, [r7, #24]
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	617b      	str	r3, [r7, #20]
   return(result);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e5      	bne.n	80060a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e012      	b.n	8006114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3758      	adds	r7, #88	@ 0x58
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800612c:	e04f      	b.n	80061ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d04b      	beq.n	80061ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006136:	f7fd ffd1 	bl	80040dc <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	429a      	cmp	r2, r3
 8006144:	d302      	bcc.n	800614c <UART_WaitOnFlagUntilTimeout+0x30>
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e04e      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d037      	beq.n	80061ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b80      	cmp	r3, #128	@ 0x80
 8006162:	d034      	beq.n	80061ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b40      	cmp	r3, #64	@ 0x40
 8006168:	d031      	beq.n	80061ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b08      	cmp	r3, #8
 8006176:	d110      	bne.n	800619a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2208      	movs	r2, #8
 800617e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 f838 	bl	80061f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2208      	movs	r2, #8
 800618a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e029      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061a8:	d111      	bne.n	80061ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 f81e 	bl	80061f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e00f      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4013      	ands	r3, r2
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	429a      	cmp	r2, r3
 80061dc:	bf0c      	ite	eq
 80061de:	2301      	moveq	r3, #1
 80061e0:	2300      	movne	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d0a0      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b095      	sub	sp, #84	@ 0x54
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800621c:	643b      	str	r3, [r7, #64]	@ 0x40
 800621e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006222:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800622a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e6      	bne.n	80061fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3308      	adds	r3, #8
 8006252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006254:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800625a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d118      	bne.n	80062a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	60bb      	str	r3, [r7, #8]
   return(result);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f023 0310 	bic.w	r3, r3, #16
 8006284:	647b      	str	r3, [r7, #68]	@ 0x44
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6979      	ldr	r1, [r7, #20]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	613b      	str	r3, [r7, #16]
   return(result);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e6      	bne.n	8006270 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062b6:	bf00      	nop
 80062b8:	3754      	adds	r7, #84	@ 0x54
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e027      	b.n	8006328 <HAL_UARTEx_DisableFifoMode+0x66>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2224      	movs	r2, #36	@ 0x24
 80062e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0201 	bic.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006306:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006348:	2302      	movs	r3, #2
 800634a:	e02d      	b.n	80063a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2224      	movs	r2, #36	@ 0x24
 8006358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0201 	bic.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f84f 	bl	800642c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e02d      	b.n	8006424 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	@ 0x24
 80063d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f811 	bl	800642c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006438:	2b00      	cmp	r3, #0
 800643a:	d108      	bne.n	800644e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800644c:	e031      	b.n	80064b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800644e:	2308      	movs	r3, #8
 8006450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006452:	2308      	movs	r3, #8
 8006454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	0e5b      	lsrs	r3, r3, #25
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	0f5b      	lsrs	r3, r3, #29
 800646e:	b2db      	uxtb	r3, r3
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	7b3a      	ldrb	r2, [r7, #12]
 800647a:	4911      	ldr	r1, [pc, #68]	@ (80064c0 <UARTEx_SetNbDataToProcess+0x94>)
 800647c:	5c8a      	ldrb	r2, [r1, r2]
 800647e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006482:	7b3a      	ldrb	r2, [r7, #12]
 8006484:	490f      	ldr	r1, [pc, #60]	@ (80064c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006488:	fb93 f3f2 	sdiv	r3, r3, r2
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	7b7a      	ldrb	r2, [r7, #13]
 8006498:	4909      	ldr	r1, [pc, #36]	@ (80064c0 <UARTEx_SetNbDataToProcess+0x94>)
 800649a:	5c8a      	ldrb	r2, [r1, r2]
 800649c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064a0:	7b7a      	ldrb	r2, [r7, #13]
 80064a2:	4908      	ldr	r1, [pc, #32]	@ (80064c4 <UARTEx_SetNbDataToProcess+0x98>)
 80064a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	08008d38 	.word	0x08008d38
 80064c4:	08008d40 	.word	0x08008d40

080064c8 <malloc>:
 80064c8:	4b02      	ldr	r3, [pc, #8]	@ (80064d4 <malloc+0xc>)
 80064ca:	4601      	mov	r1, r0
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	f000 b825 	b.w	800651c <_malloc_r>
 80064d2:	bf00      	nop
 80064d4:	20000070 	.word	0x20000070

080064d8 <sbrk_aligned>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4e0f      	ldr	r6, [pc, #60]	@ (8006518 <sbrk_aligned+0x40>)
 80064dc:	460c      	mov	r4, r1
 80064de:	6831      	ldr	r1, [r6, #0]
 80064e0:	4605      	mov	r5, r0
 80064e2:	b911      	cbnz	r1, 80064ea <sbrk_aligned+0x12>
 80064e4:	f000 fc5c 	bl	8006da0 <_sbrk_r>
 80064e8:	6030      	str	r0, [r6, #0]
 80064ea:	4621      	mov	r1, r4
 80064ec:	4628      	mov	r0, r5
 80064ee:	f000 fc57 	bl	8006da0 <_sbrk_r>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d103      	bne.n	80064fe <sbrk_aligned+0x26>
 80064f6:	f04f 34ff 	mov.w	r4, #4294967295
 80064fa:	4620      	mov	r0, r4
 80064fc:	bd70      	pop	{r4, r5, r6, pc}
 80064fe:	1cc4      	adds	r4, r0, #3
 8006500:	f024 0403 	bic.w	r4, r4, #3
 8006504:	42a0      	cmp	r0, r4
 8006506:	d0f8      	beq.n	80064fa <sbrk_aligned+0x22>
 8006508:	1a21      	subs	r1, r4, r0
 800650a:	4628      	mov	r0, r5
 800650c:	f000 fc48 	bl	8006da0 <_sbrk_r>
 8006510:	3001      	adds	r0, #1
 8006512:	d1f2      	bne.n	80064fa <sbrk_aligned+0x22>
 8006514:	e7ef      	b.n	80064f6 <sbrk_aligned+0x1e>
 8006516:	bf00      	nop
 8006518:	20000fb4 	.word	0x20000fb4

0800651c <_malloc_r>:
 800651c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006520:	1ccd      	adds	r5, r1, #3
 8006522:	f025 0503 	bic.w	r5, r5, #3
 8006526:	3508      	adds	r5, #8
 8006528:	2d0c      	cmp	r5, #12
 800652a:	bf38      	it	cc
 800652c:	250c      	movcc	r5, #12
 800652e:	2d00      	cmp	r5, #0
 8006530:	4606      	mov	r6, r0
 8006532:	db01      	blt.n	8006538 <_malloc_r+0x1c>
 8006534:	42a9      	cmp	r1, r5
 8006536:	d904      	bls.n	8006542 <_malloc_r+0x26>
 8006538:	230c      	movs	r3, #12
 800653a:	6033      	str	r3, [r6, #0]
 800653c:	2000      	movs	r0, #0
 800653e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006618 <_malloc_r+0xfc>
 8006546:	f000 f869 	bl	800661c <__malloc_lock>
 800654a:	f8d8 3000 	ldr.w	r3, [r8]
 800654e:	461c      	mov	r4, r3
 8006550:	bb44      	cbnz	r4, 80065a4 <_malloc_r+0x88>
 8006552:	4629      	mov	r1, r5
 8006554:	4630      	mov	r0, r6
 8006556:	f7ff ffbf 	bl	80064d8 <sbrk_aligned>
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	4604      	mov	r4, r0
 800655e:	d158      	bne.n	8006612 <_malloc_r+0xf6>
 8006560:	f8d8 4000 	ldr.w	r4, [r8]
 8006564:	4627      	mov	r7, r4
 8006566:	2f00      	cmp	r7, #0
 8006568:	d143      	bne.n	80065f2 <_malloc_r+0xd6>
 800656a:	2c00      	cmp	r4, #0
 800656c:	d04b      	beq.n	8006606 <_malloc_r+0xea>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	4639      	mov	r1, r7
 8006572:	4630      	mov	r0, r6
 8006574:	eb04 0903 	add.w	r9, r4, r3
 8006578:	f000 fc12 	bl	8006da0 <_sbrk_r>
 800657c:	4581      	cmp	r9, r0
 800657e:	d142      	bne.n	8006606 <_malloc_r+0xea>
 8006580:	6821      	ldr	r1, [r4, #0]
 8006582:	1a6d      	subs	r5, r5, r1
 8006584:	4629      	mov	r1, r5
 8006586:	4630      	mov	r0, r6
 8006588:	f7ff ffa6 	bl	80064d8 <sbrk_aligned>
 800658c:	3001      	adds	r0, #1
 800658e:	d03a      	beq.n	8006606 <_malloc_r+0xea>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	442b      	add	r3, r5
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	f8d8 3000 	ldr.w	r3, [r8]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	bb62      	cbnz	r2, 80065f8 <_malloc_r+0xdc>
 800659e:	f8c8 7000 	str.w	r7, [r8]
 80065a2:	e00f      	b.n	80065c4 <_malloc_r+0xa8>
 80065a4:	6822      	ldr	r2, [r4, #0]
 80065a6:	1b52      	subs	r2, r2, r5
 80065a8:	d420      	bmi.n	80065ec <_malloc_r+0xd0>
 80065aa:	2a0b      	cmp	r2, #11
 80065ac:	d917      	bls.n	80065de <_malloc_r+0xc2>
 80065ae:	1961      	adds	r1, r4, r5
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	6025      	str	r5, [r4, #0]
 80065b4:	bf18      	it	ne
 80065b6:	6059      	strne	r1, [r3, #4]
 80065b8:	6863      	ldr	r3, [r4, #4]
 80065ba:	bf08      	it	eq
 80065bc:	f8c8 1000 	streq.w	r1, [r8]
 80065c0:	5162      	str	r2, [r4, r5]
 80065c2:	604b      	str	r3, [r1, #4]
 80065c4:	4630      	mov	r0, r6
 80065c6:	f000 f82f 	bl	8006628 <__malloc_unlock>
 80065ca:	f104 000b 	add.w	r0, r4, #11
 80065ce:	1d23      	adds	r3, r4, #4
 80065d0:	f020 0007 	bic.w	r0, r0, #7
 80065d4:	1ac2      	subs	r2, r0, r3
 80065d6:	bf1c      	itt	ne
 80065d8:	1a1b      	subne	r3, r3, r0
 80065da:	50a3      	strne	r3, [r4, r2]
 80065dc:	e7af      	b.n	800653e <_malloc_r+0x22>
 80065de:	6862      	ldr	r2, [r4, #4]
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	bf0c      	ite	eq
 80065e4:	f8c8 2000 	streq.w	r2, [r8]
 80065e8:	605a      	strne	r2, [r3, #4]
 80065ea:	e7eb      	b.n	80065c4 <_malloc_r+0xa8>
 80065ec:	4623      	mov	r3, r4
 80065ee:	6864      	ldr	r4, [r4, #4]
 80065f0:	e7ae      	b.n	8006550 <_malloc_r+0x34>
 80065f2:	463c      	mov	r4, r7
 80065f4:	687f      	ldr	r7, [r7, #4]
 80065f6:	e7b6      	b.n	8006566 <_malloc_r+0x4a>
 80065f8:	461a      	mov	r2, r3
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	42a3      	cmp	r3, r4
 80065fe:	d1fb      	bne.n	80065f8 <_malloc_r+0xdc>
 8006600:	2300      	movs	r3, #0
 8006602:	6053      	str	r3, [r2, #4]
 8006604:	e7de      	b.n	80065c4 <_malloc_r+0xa8>
 8006606:	230c      	movs	r3, #12
 8006608:	6033      	str	r3, [r6, #0]
 800660a:	4630      	mov	r0, r6
 800660c:	f000 f80c 	bl	8006628 <__malloc_unlock>
 8006610:	e794      	b.n	800653c <_malloc_r+0x20>
 8006612:	6005      	str	r5, [r0, #0]
 8006614:	e7d6      	b.n	80065c4 <_malloc_r+0xa8>
 8006616:	bf00      	nop
 8006618:	20000fb8 	.word	0x20000fb8

0800661c <__malloc_lock>:
 800661c:	4801      	ldr	r0, [pc, #4]	@ (8006624 <__malloc_lock+0x8>)
 800661e:	f000 bc0c 	b.w	8006e3a <__retarget_lock_acquire_recursive>
 8006622:	bf00      	nop
 8006624:	200010fc 	.word	0x200010fc

08006628 <__malloc_unlock>:
 8006628:	4801      	ldr	r0, [pc, #4]	@ (8006630 <__malloc_unlock+0x8>)
 800662a:	f000 bc07 	b.w	8006e3c <__retarget_lock_release_recursive>
 800662e:	bf00      	nop
 8006630:	200010fc 	.word	0x200010fc

08006634 <std>:
 8006634:	2300      	movs	r3, #0
 8006636:	b510      	push	{r4, lr}
 8006638:	4604      	mov	r4, r0
 800663a:	e9c0 3300 	strd	r3, r3, [r0]
 800663e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006642:	6083      	str	r3, [r0, #8]
 8006644:	8181      	strh	r1, [r0, #12]
 8006646:	6643      	str	r3, [r0, #100]	@ 0x64
 8006648:	81c2      	strh	r2, [r0, #14]
 800664a:	6183      	str	r3, [r0, #24]
 800664c:	4619      	mov	r1, r3
 800664e:	2208      	movs	r2, #8
 8006650:	305c      	adds	r0, #92	@ 0x5c
 8006652:	f000 fad5 	bl	8006c00 <memset>
 8006656:	4b0d      	ldr	r3, [pc, #52]	@ (800668c <std+0x58>)
 8006658:	6263      	str	r3, [r4, #36]	@ 0x24
 800665a:	4b0d      	ldr	r3, [pc, #52]	@ (8006690 <std+0x5c>)
 800665c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800665e:	4b0d      	ldr	r3, [pc, #52]	@ (8006694 <std+0x60>)
 8006660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006662:	4b0d      	ldr	r3, [pc, #52]	@ (8006698 <std+0x64>)
 8006664:	6323      	str	r3, [r4, #48]	@ 0x30
 8006666:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <std+0x68>)
 8006668:	6224      	str	r4, [r4, #32]
 800666a:	429c      	cmp	r4, r3
 800666c:	d006      	beq.n	800667c <std+0x48>
 800666e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006672:	4294      	cmp	r4, r2
 8006674:	d002      	beq.n	800667c <std+0x48>
 8006676:	33d0      	adds	r3, #208	@ 0xd0
 8006678:	429c      	cmp	r4, r3
 800667a:	d105      	bne.n	8006688 <std+0x54>
 800667c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006684:	f000 bbd8 	b.w	8006e38 <__retarget_lock_init_recursive>
 8006688:	bd10      	pop	{r4, pc}
 800668a:	bf00      	nop
 800668c:	08006a51 	.word	0x08006a51
 8006690:	08006a73 	.word	0x08006a73
 8006694:	08006aab 	.word	0x08006aab
 8006698:	08006acf 	.word	0x08006acf
 800669c:	20000fbc 	.word	0x20000fbc

080066a0 <stdio_exit_handler>:
 80066a0:	4a02      	ldr	r2, [pc, #8]	@ (80066ac <stdio_exit_handler+0xc>)
 80066a2:	4903      	ldr	r1, [pc, #12]	@ (80066b0 <stdio_exit_handler+0x10>)
 80066a4:	4803      	ldr	r0, [pc, #12]	@ (80066b4 <stdio_exit_handler+0x14>)
 80066a6:	f000 b869 	b.w	800677c <_fwalk_sglue>
 80066aa:	bf00      	nop
 80066ac:	20000064 	.word	0x20000064
 80066b0:	08007895 	.word	0x08007895
 80066b4:	20000074 	.word	0x20000074

080066b8 <cleanup_stdio>:
 80066b8:	6841      	ldr	r1, [r0, #4]
 80066ba:	4b0c      	ldr	r3, [pc, #48]	@ (80066ec <cleanup_stdio+0x34>)
 80066bc:	4299      	cmp	r1, r3
 80066be:	b510      	push	{r4, lr}
 80066c0:	4604      	mov	r4, r0
 80066c2:	d001      	beq.n	80066c8 <cleanup_stdio+0x10>
 80066c4:	f001 f8e6 	bl	8007894 <_fflush_r>
 80066c8:	68a1      	ldr	r1, [r4, #8]
 80066ca:	4b09      	ldr	r3, [pc, #36]	@ (80066f0 <cleanup_stdio+0x38>)
 80066cc:	4299      	cmp	r1, r3
 80066ce:	d002      	beq.n	80066d6 <cleanup_stdio+0x1e>
 80066d0:	4620      	mov	r0, r4
 80066d2:	f001 f8df 	bl	8007894 <_fflush_r>
 80066d6:	68e1      	ldr	r1, [r4, #12]
 80066d8:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <cleanup_stdio+0x3c>)
 80066da:	4299      	cmp	r1, r3
 80066dc:	d004      	beq.n	80066e8 <cleanup_stdio+0x30>
 80066de:	4620      	mov	r0, r4
 80066e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e4:	f001 b8d6 	b.w	8007894 <_fflush_r>
 80066e8:	bd10      	pop	{r4, pc}
 80066ea:	bf00      	nop
 80066ec:	20000fbc 	.word	0x20000fbc
 80066f0:	20001024 	.word	0x20001024
 80066f4:	2000108c 	.word	0x2000108c

080066f8 <global_stdio_init.part.0>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006728 <global_stdio_init.part.0+0x30>)
 80066fc:	4c0b      	ldr	r4, [pc, #44]	@ (800672c <global_stdio_init.part.0+0x34>)
 80066fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006730 <global_stdio_init.part.0+0x38>)
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	4620      	mov	r0, r4
 8006704:	2200      	movs	r2, #0
 8006706:	2104      	movs	r1, #4
 8006708:	f7ff ff94 	bl	8006634 <std>
 800670c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006710:	2201      	movs	r2, #1
 8006712:	2109      	movs	r1, #9
 8006714:	f7ff ff8e 	bl	8006634 <std>
 8006718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800671c:	2202      	movs	r2, #2
 800671e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006722:	2112      	movs	r1, #18
 8006724:	f7ff bf86 	b.w	8006634 <std>
 8006728:	200010f4 	.word	0x200010f4
 800672c:	20000fbc 	.word	0x20000fbc
 8006730:	080066a1 	.word	0x080066a1

08006734 <__sfp_lock_acquire>:
 8006734:	4801      	ldr	r0, [pc, #4]	@ (800673c <__sfp_lock_acquire+0x8>)
 8006736:	f000 bb80 	b.w	8006e3a <__retarget_lock_acquire_recursive>
 800673a:	bf00      	nop
 800673c:	200010fd 	.word	0x200010fd

08006740 <__sfp_lock_release>:
 8006740:	4801      	ldr	r0, [pc, #4]	@ (8006748 <__sfp_lock_release+0x8>)
 8006742:	f000 bb7b 	b.w	8006e3c <__retarget_lock_release_recursive>
 8006746:	bf00      	nop
 8006748:	200010fd 	.word	0x200010fd

0800674c <__sinit>:
 800674c:	b510      	push	{r4, lr}
 800674e:	4604      	mov	r4, r0
 8006750:	f7ff fff0 	bl	8006734 <__sfp_lock_acquire>
 8006754:	6a23      	ldr	r3, [r4, #32]
 8006756:	b11b      	cbz	r3, 8006760 <__sinit+0x14>
 8006758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800675c:	f7ff bff0 	b.w	8006740 <__sfp_lock_release>
 8006760:	4b04      	ldr	r3, [pc, #16]	@ (8006774 <__sinit+0x28>)
 8006762:	6223      	str	r3, [r4, #32]
 8006764:	4b04      	ldr	r3, [pc, #16]	@ (8006778 <__sinit+0x2c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1f5      	bne.n	8006758 <__sinit+0xc>
 800676c:	f7ff ffc4 	bl	80066f8 <global_stdio_init.part.0>
 8006770:	e7f2      	b.n	8006758 <__sinit+0xc>
 8006772:	bf00      	nop
 8006774:	080066b9 	.word	0x080066b9
 8006778:	200010f4 	.word	0x200010f4

0800677c <_fwalk_sglue>:
 800677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006780:	4607      	mov	r7, r0
 8006782:	4688      	mov	r8, r1
 8006784:	4614      	mov	r4, r2
 8006786:	2600      	movs	r6, #0
 8006788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800678c:	f1b9 0901 	subs.w	r9, r9, #1
 8006790:	d505      	bpl.n	800679e <_fwalk_sglue+0x22>
 8006792:	6824      	ldr	r4, [r4, #0]
 8006794:	2c00      	cmp	r4, #0
 8006796:	d1f7      	bne.n	8006788 <_fwalk_sglue+0xc>
 8006798:	4630      	mov	r0, r6
 800679a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800679e:	89ab      	ldrh	r3, [r5, #12]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d907      	bls.n	80067b4 <_fwalk_sglue+0x38>
 80067a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067a8:	3301      	adds	r3, #1
 80067aa:	d003      	beq.n	80067b4 <_fwalk_sglue+0x38>
 80067ac:	4629      	mov	r1, r5
 80067ae:	4638      	mov	r0, r7
 80067b0:	47c0      	blx	r8
 80067b2:	4306      	orrs	r6, r0
 80067b4:	3568      	adds	r5, #104	@ 0x68
 80067b6:	e7e9      	b.n	800678c <_fwalk_sglue+0x10>

080067b8 <iprintf>:
 80067b8:	b40f      	push	{r0, r1, r2, r3}
 80067ba:	b507      	push	{r0, r1, r2, lr}
 80067bc:	4906      	ldr	r1, [pc, #24]	@ (80067d8 <iprintf+0x20>)
 80067be:	ab04      	add	r3, sp, #16
 80067c0:	6808      	ldr	r0, [r1, #0]
 80067c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c6:	6881      	ldr	r1, [r0, #8]
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	f000 fd39 	bl	8007240 <_vfiprintf_r>
 80067ce:	b003      	add	sp, #12
 80067d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d4:	b004      	add	sp, #16
 80067d6:	4770      	bx	lr
 80067d8:	20000070 	.word	0x20000070

080067dc <_puts_r>:
 80067dc:	6a03      	ldr	r3, [r0, #32]
 80067de:	b570      	push	{r4, r5, r6, lr}
 80067e0:	6884      	ldr	r4, [r0, #8]
 80067e2:	4605      	mov	r5, r0
 80067e4:	460e      	mov	r6, r1
 80067e6:	b90b      	cbnz	r3, 80067ec <_puts_r+0x10>
 80067e8:	f7ff ffb0 	bl	800674c <__sinit>
 80067ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067ee:	07db      	lsls	r3, r3, #31
 80067f0:	d405      	bmi.n	80067fe <_puts_r+0x22>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	0598      	lsls	r0, r3, #22
 80067f6:	d402      	bmi.n	80067fe <_puts_r+0x22>
 80067f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067fa:	f000 fb1e 	bl	8006e3a <__retarget_lock_acquire_recursive>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	0719      	lsls	r1, r3, #28
 8006802:	d502      	bpl.n	800680a <_puts_r+0x2e>
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d135      	bne.n	8006876 <_puts_r+0x9a>
 800680a:	4621      	mov	r1, r4
 800680c:	4628      	mov	r0, r5
 800680e:	f000 f9a1 	bl	8006b54 <__swsetup_r>
 8006812:	b380      	cbz	r0, 8006876 <_puts_r+0x9a>
 8006814:	f04f 35ff 	mov.w	r5, #4294967295
 8006818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800681a:	07da      	lsls	r2, r3, #31
 800681c:	d405      	bmi.n	800682a <_puts_r+0x4e>
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	059b      	lsls	r3, r3, #22
 8006822:	d402      	bmi.n	800682a <_puts_r+0x4e>
 8006824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006826:	f000 fb09 	bl	8006e3c <__retarget_lock_release_recursive>
 800682a:	4628      	mov	r0, r5
 800682c:	bd70      	pop	{r4, r5, r6, pc}
 800682e:	2b00      	cmp	r3, #0
 8006830:	da04      	bge.n	800683c <_puts_r+0x60>
 8006832:	69a2      	ldr	r2, [r4, #24]
 8006834:	429a      	cmp	r2, r3
 8006836:	dc17      	bgt.n	8006868 <_puts_r+0x8c>
 8006838:	290a      	cmp	r1, #10
 800683a:	d015      	beq.n	8006868 <_puts_r+0x8c>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	6022      	str	r2, [r4, #0]
 8006842:	7019      	strb	r1, [r3, #0]
 8006844:	68a3      	ldr	r3, [r4, #8]
 8006846:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800684a:	3b01      	subs	r3, #1
 800684c:	60a3      	str	r3, [r4, #8]
 800684e:	2900      	cmp	r1, #0
 8006850:	d1ed      	bne.n	800682e <_puts_r+0x52>
 8006852:	2b00      	cmp	r3, #0
 8006854:	da11      	bge.n	800687a <_puts_r+0x9e>
 8006856:	4622      	mov	r2, r4
 8006858:	210a      	movs	r1, #10
 800685a:	4628      	mov	r0, r5
 800685c:	f000 f93b 	bl	8006ad6 <__swbuf_r>
 8006860:	3001      	adds	r0, #1
 8006862:	d0d7      	beq.n	8006814 <_puts_r+0x38>
 8006864:	250a      	movs	r5, #10
 8006866:	e7d7      	b.n	8006818 <_puts_r+0x3c>
 8006868:	4622      	mov	r2, r4
 800686a:	4628      	mov	r0, r5
 800686c:	f000 f933 	bl	8006ad6 <__swbuf_r>
 8006870:	3001      	adds	r0, #1
 8006872:	d1e7      	bne.n	8006844 <_puts_r+0x68>
 8006874:	e7ce      	b.n	8006814 <_puts_r+0x38>
 8006876:	3e01      	subs	r6, #1
 8006878:	e7e4      	b.n	8006844 <_puts_r+0x68>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	6022      	str	r2, [r4, #0]
 8006880:	220a      	movs	r2, #10
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	e7ee      	b.n	8006864 <_puts_r+0x88>
	...

08006888 <puts>:
 8006888:	4b02      	ldr	r3, [pc, #8]	@ (8006894 <puts+0xc>)
 800688a:	4601      	mov	r1, r0
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	f7ff bfa5 	b.w	80067dc <_puts_r>
 8006892:	bf00      	nop
 8006894:	20000070 	.word	0x20000070

08006898 <setbuf>:
 8006898:	fab1 f281 	clz	r2, r1
 800689c:	0952      	lsrs	r2, r2, #5
 800689e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068a2:	0052      	lsls	r2, r2, #1
 80068a4:	f000 b800 	b.w	80068a8 <setvbuf>

080068a8 <setvbuf>:
 80068a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	461d      	mov	r5, r3
 80068ae:	4b57      	ldr	r3, [pc, #348]	@ (8006a0c <setvbuf+0x164>)
 80068b0:	681f      	ldr	r7, [r3, #0]
 80068b2:	4604      	mov	r4, r0
 80068b4:	460e      	mov	r6, r1
 80068b6:	4690      	mov	r8, r2
 80068b8:	b127      	cbz	r7, 80068c4 <setvbuf+0x1c>
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	b913      	cbnz	r3, 80068c4 <setvbuf+0x1c>
 80068be:	4638      	mov	r0, r7
 80068c0:	f7ff ff44 	bl	800674c <__sinit>
 80068c4:	f1b8 0f02 	cmp.w	r8, #2
 80068c8:	d006      	beq.n	80068d8 <setvbuf+0x30>
 80068ca:	f1b8 0f01 	cmp.w	r8, #1
 80068ce:	f200 809a 	bhi.w	8006a06 <setvbuf+0x15e>
 80068d2:	2d00      	cmp	r5, #0
 80068d4:	f2c0 8097 	blt.w	8006a06 <setvbuf+0x15e>
 80068d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068da:	07d9      	lsls	r1, r3, #31
 80068dc:	d405      	bmi.n	80068ea <setvbuf+0x42>
 80068de:	89a3      	ldrh	r3, [r4, #12]
 80068e0:	059a      	lsls	r2, r3, #22
 80068e2:	d402      	bmi.n	80068ea <setvbuf+0x42>
 80068e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068e6:	f000 faa8 	bl	8006e3a <__retarget_lock_acquire_recursive>
 80068ea:	4621      	mov	r1, r4
 80068ec:	4638      	mov	r0, r7
 80068ee:	f000 ffd1 	bl	8007894 <_fflush_r>
 80068f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068f4:	b141      	cbz	r1, 8006908 <setvbuf+0x60>
 80068f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068fa:	4299      	cmp	r1, r3
 80068fc:	d002      	beq.n	8006904 <setvbuf+0x5c>
 80068fe:	4638      	mov	r0, r7
 8006900:	f000 fad2 	bl	8006ea8 <_free_r>
 8006904:	2300      	movs	r3, #0
 8006906:	6363      	str	r3, [r4, #52]	@ 0x34
 8006908:	2300      	movs	r3, #0
 800690a:	61a3      	str	r3, [r4, #24]
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	061b      	lsls	r3, r3, #24
 8006912:	d503      	bpl.n	800691c <setvbuf+0x74>
 8006914:	6921      	ldr	r1, [r4, #16]
 8006916:	4638      	mov	r0, r7
 8006918:	f000 fac6 	bl	8006ea8 <_free_r>
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	f1b8 0f02 	cmp.w	r8, #2
 800692a:	81a3      	strh	r3, [r4, #12]
 800692c:	d061      	beq.n	80069f2 <setvbuf+0x14a>
 800692e:	ab01      	add	r3, sp, #4
 8006930:	466a      	mov	r2, sp
 8006932:	4621      	mov	r1, r4
 8006934:	4638      	mov	r0, r7
 8006936:	f000 ffe7 	bl	8007908 <__swhatbuf_r>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	4318      	orrs	r0, r3
 800693e:	81a0      	strh	r0, [r4, #12]
 8006940:	bb2d      	cbnz	r5, 800698e <setvbuf+0xe6>
 8006942:	9d00      	ldr	r5, [sp, #0]
 8006944:	4628      	mov	r0, r5
 8006946:	f7ff fdbf 	bl	80064c8 <malloc>
 800694a:	4606      	mov	r6, r0
 800694c:	2800      	cmp	r0, #0
 800694e:	d152      	bne.n	80069f6 <setvbuf+0x14e>
 8006950:	f8dd 9000 	ldr.w	r9, [sp]
 8006954:	45a9      	cmp	r9, r5
 8006956:	d140      	bne.n	80069da <setvbuf+0x132>
 8006958:	f04f 35ff 	mov.w	r5, #4294967295
 800695c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006960:	f043 0202 	orr.w	r2, r3, #2
 8006964:	81a2      	strh	r2, [r4, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	60a2      	str	r2, [r4, #8]
 800696a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800696e:	6022      	str	r2, [r4, #0]
 8006970:	6122      	str	r2, [r4, #16]
 8006972:	2201      	movs	r2, #1
 8006974:	6162      	str	r2, [r4, #20]
 8006976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006978:	07d6      	lsls	r6, r2, #31
 800697a:	d404      	bmi.n	8006986 <setvbuf+0xde>
 800697c:	0598      	lsls	r0, r3, #22
 800697e:	d402      	bmi.n	8006986 <setvbuf+0xde>
 8006980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006982:	f000 fa5b 	bl	8006e3c <__retarget_lock_release_recursive>
 8006986:	4628      	mov	r0, r5
 8006988:	b003      	add	sp, #12
 800698a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800698e:	2e00      	cmp	r6, #0
 8006990:	d0d8      	beq.n	8006944 <setvbuf+0x9c>
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	b913      	cbnz	r3, 800699c <setvbuf+0xf4>
 8006996:	4638      	mov	r0, r7
 8006998:	f7ff fed8 	bl	800674c <__sinit>
 800699c:	f1b8 0f01 	cmp.w	r8, #1
 80069a0:	bf08      	it	eq
 80069a2:	89a3      	ldrheq	r3, [r4, #12]
 80069a4:	6026      	str	r6, [r4, #0]
 80069a6:	bf04      	itt	eq
 80069a8:	f043 0301 	orreq.w	r3, r3, #1
 80069ac:	81a3      	strheq	r3, [r4, #12]
 80069ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069b2:	f013 0208 	ands.w	r2, r3, #8
 80069b6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80069ba:	d01e      	beq.n	80069fa <setvbuf+0x152>
 80069bc:	07d9      	lsls	r1, r3, #31
 80069be:	bf41      	itttt	mi
 80069c0:	2200      	movmi	r2, #0
 80069c2:	426d      	negmi	r5, r5
 80069c4:	60a2      	strmi	r2, [r4, #8]
 80069c6:	61a5      	strmi	r5, [r4, #24]
 80069c8:	bf58      	it	pl
 80069ca:	60a5      	strpl	r5, [r4, #8]
 80069cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069ce:	07d2      	lsls	r2, r2, #31
 80069d0:	d401      	bmi.n	80069d6 <setvbuf+0x12e>
 80069d2:	059b      	lsls	r3, r3, #22
 80069d4:	d513      	bpl.n	80069fe <setvbuf+0x156>
 80069d6:	2500      	movs	r5, #0
 80069d8:	e7d5      	b.n	8006986 <setvbuf+0xde>
 80069da:	4648      	mov	r0, r9
 80069dc:	f7ff fd74 	bl	80064c8 <malloc>
 80069e0:	4606      	mov	r6, r0
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d0b8      	beq.n	8006958 <setvbuf+0xb0>
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ec:	81a3      	strh	r3, [r4, #12]
 80069ee:	464d      	mov	r5, r9
 80069f0:	e7cf      	b.n	8006992 <setvbuf+0xea>
 80069f2:	2500      	movs	r5, #0
 80069f4:	e7b2      	b.n	800695c <setvbuf+0xb4>
 80069f6:	46a9      	mov	r9, r5
 80069f8:	e7f5      	b.n	80069e6 <setvbuf+0x13e>
 80069fa:	60a2      	str	r2, [r4, #8]
 80069fc:	e7e6      	b.n	80069cc <setvbuf+0x124>
 80069fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a00:	f000 fa1c 	bl	8006e3c <__retarget_lock_release_recursive>
 8006a04:	e7e7      	b.n	80069d6 <setvbuf+0x12e>
 8006a06:	f04f 35ff 	mov.w	r5, #4294967295
 8006a0a:	e7bc      	b.n	8006986 <setvbuf+0xde>
 8006a0c:	20000070 	.word	0x20000070

08006a10 <siprintf>:
 8006a10:	b40e      	push	{r1, r2, r3}
 8006a12:	b500      	push	{lr}
 8006a14:	b09c      	sub	sp, #112	@ 0x70
 8006a16:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a18:	9002      	str	r0, [sp, #8]
 8006a1a:	9006      	str	r0, [sp, #24]
 8006a1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a20:	4809      	ldr	r0, [pc, #36]	@ (8006a48 <siprintf+0x38>)
 8006a22:	9107      	str	r1, [sp, #28]
 8006a24:	9104      	str	r1, [sp, #16]
 8006a26:	4909      	ldr	r1, [pc, #36]	@ (8006a4c <siprintf+0x3c>)
 8006a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2c:	9105      	str	r1, [sp, #20]
 8006a2e:	6800      	ldr	r0, [r0, #0]
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	a902      	add	r1, sp, #8
 8006a34:	f000 fade 	bl	8006ff4 <_svfiprintf_r>
 8006a38:	9b02      	ldr	r3, [sp, #8]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	b01c      	add	sp, #112	@ 0x70
 8006a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a44:	b003      	add	sp, #12
 8006a46:	4770      	bx	lr
 8006a48:	20000070 	.word	0x20000070
 8006a4c:	ffff0208 	.word	0xffff0208

08006a50 <__sread>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	460c      	mov	r4, r1
 8006a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a58:	f000 f990 	bl	8006d7c <_read_r>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	bfab      	itete	ge
 8006a60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a62:	89a3      	ldrhlt	r3, [r4, #12]
 8006a64:	181b      	addge	r3, r3, r0
 8006a66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a6a:	bfac      	ite	ge
 8006a6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a6e:	81a3      	strhlt	r3, [r4, #12]
 8006a70:	bd10      	pop	{r4, pc}

08006a72 <__swrite>:
 8006a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a76:	461f      	mov	r7, r3
 8006a78:	898b      	ldrh	r3, [r1, #12]
 8006a7a:	05db      	lsls	r3, r3, #23
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	4616      	mov	r6, r2
 8006a82:	d505      	bpl.n	8006a90 <__swrite+0x1e>
 8006a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a88:	2302      	movs	r3, #2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f000 f964 	bl	8006d58 <_lseek_r>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	f000 b98b 	b.w	8006dc0 <_write_r>

08006aaa <__sseek>:
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	460c      	mov	r4, r1
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 f951 	bl	8006d58 <_lseek_r>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	bf15      	itete	ne
 8006abc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006abe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ac2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ac6:	81a3      	strheq	r3, [r4, #12]
 8006ac8:	bf18      	it	ne
 8006aca:	81a3      	strhne	r3, [r4, #12]
 8006acc:	bd10      	pop	{r4, pc}

08006ace <__sclose>:
 8006ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad2:	f000 b931 	b.w	8006d38 <_close_r>

08006ad6 <__swbuf_r>:
 8006ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad8:	460e      	mov	r6, r1
 8006ada:	4614      	mov	r4, r2
 8006adc:	4605      	mov	r5, r0
 8006ade:	b118      	cbz	r0, 8006ae8 <__swbuf_r+0x12>
 8006ae0:	6a03      	ldr	r3, [r0, #32]
 8006ae2:	b90b      	cbnz	r3, 8006ae8 <__swbuf_r+0x12>
 8006ae4:	f7ff fe32 	bl	800674c <__sinit>
 8006ae8:	69a3      	ldr	r3, [r4, #24]
 8006aea:	60a3      	str	r3, [r4, #8]
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	071a      	lsls	r2, r3, #28
 8006af0:	d501      	bpl.n	8006af6 <__swbuf_r+0x20>
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	b943      	cbnz	r3, 8006b08 <__swbuf_r+0x32>
 8006af6:	4621      	mov	r1, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	f000 f82b 	bl	8006b54 <__swsetup_r>
 8006afe:	b118      	cbz	r0, 8006b08 <__swbuf_r+0x32>
 8006b00:	f04f 37ff 	mov.w	r7, #4294967295
 8006b04:	4638      	mov	r0, r7
 8006b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	6922      	ldr	r2, [r4, #16]
 8006b0c:	1a98      	subs	r0, r3, r2
 8006b0e:	6963      	ldr	r3, [r4, #20]
 8006b10:	b2f6      	uxtb	r6, r6
 8006b12:	4283      	cmp	r3, r0
 8006b14:	4637      	mov	r7, r6
 8006b16:	dc05      	bgt.n	8006b24 <__swbuf_r+0x4e>
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f000 feba 	bl	8007894 <_fflush_r>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d1ed      	bne.n	8006b00 <__swbuf_r+0x2a>
 8006b24:	68a3      	ldr	r3, [r4, #8]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	60a3      	str	r3, [r4, #8]
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	6022      	str	r2, [r4, #0]
 8006b30:	701e      	strb	r6, [r3, #0]
 8006b32:	6962      	ldr	r2, [r4, #20]
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d004      	beq.n	8006b44 <__swbuf_r+0x6e>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	07db      	lsls	r3, r3, #31
 8006b3e:	d5e1      	bpl.n	8006b04 <__swbuf_r+0x2e>
 8006b40:	2e0a      	cmp	r6, #10
 8006b42:	d1df      	bne.n	8006b04 <__swbuf_r+0x2e>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 fea4 	bl	8007894 <_fflush_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d0d9      	beq.n	8006b04 <__swbuf_r+0x2e>
 8006b50:	e7d6      	b.n	8006b00 <__swbuf_r+0x2a>
	...

08006b54 <__swsetup_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4b29      	ldr	r3, [pc, #164]	@ (8006bfc <__swsetup_r+0xa8>)
 8006b58:	4605      	mov	r5, r0
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	b118      	cbz	r0, 8006b68 <__swsetup_r+0x14>
 8006b60:	6a03      	ldr	r3, [r0, #32]
 8006b62:	b90b      	cbnz	r3, 8006b68 <__swsetup_r+0x14>
 8006b64:	f7ff fdf2 	bl	800674c <__sinit>
 8006b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6c:	0719      	lsls	r1, r3, #28
 8006b6e:	d422      	bmi.n	8006bb6 <__swsetup_r+0x62>
 8006b70:	06da      	lsls	r2, r3, #27
 8006b72:	d407      	bmi.n	8006b84 <__swsetup_r+0x30>
 8006b74:	2209      	movs	r2, #9
 8006b76:	602a      	str	r2, [r5, #0]
 8006b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b7c:	81a3      	strh	r3, [r4, #12]
 8006b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b82:	e033      	b.n	8006bec <__swsetup_r+0x98>
 8006b84:	0758      	lsls	r0, r3, #29
 8006b86:	d512      	bpl.n	8006bae <__swsetup_r+0x5a>
 8006b88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b8a:	b141      	cbz	r1, 8006b9e <__swsetup_r+0x4a>
 8006b8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b90:	4299      	cmp	r1, r3
 8006b92:	d002      	beq.n	8006b9a <__swsetup_r+0x46>
 8006b94:	4628      	mov	r0, r5
 8006b96:	f000 f987 	bl	8006ea8 <_free_r>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	6063      	str	r3, [r4, #4]
 8006baa:	6923      	ldr	r3, [r4, #16]
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	f043 0308 	orr.w	r3, r3, #8
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	b94b      	cbnz	r3, 8006bce <__swsetup_r+0x7a>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bc4:	d003      	beq.n	8006bce <__swsetup_r+0x7a>
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f000 fec3 	bl	8007954 <__smakebuf_r>
 8006bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd2:	f013 0201 	ands.w	r2, r3, #1
 8006bd6:	d00a      	beq.n	8006bee <__swsetup_r+0x9a>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	60a2      	str	r2, [r4, #8]
 8006bdc:	6962      	ldr	r2, [r4, #20]
 8006bde:	4252      	negs	r2, r2
 8006be0:	61a2      	str	r2, [r4, #24]
 8006be2:	6922      	ldr	r2, [r4, #16]
 8006be4:	b942      	cbnz	r2, 8006bf8 <__swsetup_r+0xa4>
 8006be6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006bea:	d1c5      	bne.n	8006b78 <__swsetup_r+0x24>
 8006bec:	bd38      	pop	{r3, r4, r5, pc}
 8006bee:	0799      	lsls	r1, r3, #30
 8006bf0:	bf58      	it	pl
 8006bf2:	6962      	ldrpl	r2, [r4, #20]
 8006bf4:	60a2      	str	r2, [r4, #8]
 8006bf6:	e7f4      	b.n	8006be2 <__swsetup_r+0x8e>
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	e7f7      	b.n	8006bec <__swsetup_r+0x98>
 8006bfc:	20000070 	.word	0x20000070

08006c00 <memset>:
 8006c00:	4402      	add	r2, r0
 8006c02:	4603      	mov	r3, r0
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d100      	bne.n	8006c0a <memset+0xa>
 8006c08:	4770      	bx	lr
 8006c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0e:	e7f9      	b.n	8006c04 <memset+0x4>

08006c10 <strcat>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4602      	mov	r2, r0
 8006c14:	7814      	ldrb	r4, [r2, #0]
 8006c16:	4613      	mov	r3, r2
 8006c18:	3201      	adds	r2, #1
 8006c1a:	2c00      	cmp	r4, #0
 8006c1c:	d1fa      	bne.n	8006c14 <strcat+0x4>
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	d1f9      	bne.n	8006c20 <strcat+0x10>
 8006c2c:	bd10      	pop	{r4, pc}

08006c2e <strncpy>:
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	3901      	subs	r1, #1
 8006c32:	4603      	mov	r3, r0
 8006c34:	b132      	cbz	r2, 8006c44 <strncpy+0x16>
 8006c36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006c3a:	f803 4b01 	strb.w	r4, [r3], #1
 8006c3e:	3a01      	subs	r2, #1
 8006c40:	2c00      	cmp	r4, #0
 8006c42:	d1f7      	bne.n	8006c34 <strncpy+0x6>
 8006c44:	441a      	add	r2, r3
 8006c46:	2100      	movs	r1, #0
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d100      	bne.n	8006c4e <strncpy+0x20>
 8006c4c:	bd10      	pop	{r4, pc}
 8006c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c52:	e7f9      	b.n	8006c48 <strncpy+0x1a>

08006c54 <strtok>:
 8006c54:	4b16      	ldr	r3, [pc, #88]	@ (8006cb0 <strtok+0x5c>)
 8006c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5a:	681f      	ldr	r7, [r3, #0]
 8006c5c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006c5e:	4605      	mov	r5, r0
 8006c60:	460e      	mov	r6, r1
 8006c62:	b9ec      	cbnz	r4, 8006ca0 <strtok+0x4c>
 8006c64:	2050      	movs	r0, #80	@ 0x50
 8006c66:	f7ff fc2f 	bl	80064c8 <malloc>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	6478      	str	r0, [r7, #68]	@ 0x44
 8006c6e:	b920      	cbnz	r0, 8006c7a <strtok+0x26>
 8006c70:	4b10      	ldr	r3, [pc, #64]	@ (8006cb4 <strtok+0x60>)
 8006c72:	4811      	ldr	r0, [pc, #68]	@ (8006cb8 <strtok+0x64>)
 8006c74:	215b      	movs	r1, #91	@ 0x5b
 8006c76:	f000 f8f9 	bl	8006e6c <__assert_func>
 8006c7a:	e9c0 4400 	strd	r4, r4, [r0]
 8006c7e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006c82:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006c86:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006c8a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006c8e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006c92:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006c96:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006c9a:	6184      	str	r4, [r0, #24]
 8006c9c:	7704      	strb	r4, [r0, #28]
 8006c9e:	6244      	str	r4, [r0, #36]	@ 0x24
 8006ca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cac:	f000 b806 	b.w	8006cbc <__strtok_r>
 8006cb0:	20000070 	.word	0x20000070
 8006cb4:	08008d48 	.word	0x08008d48
 8006cb8:	08008d5f 	.word	0x08008d5f

08006cbc <__strtok_r>:
 8006cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	b908      	cbnz	r0, 8006cc6 <__strtok_r+0xa>
 8006cc2:	6814      	ldr	r4, [r2, #0]
 8006cc4:	b144      	cbz	r4, 8006cd8 <__strtok_r+0x1c>
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006ccc:	460f      	mov	r7, r1
 8006cce:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006cd2:	b91e      	cbnz	r6, 8006cdc <__strtok_r+0x20>
 8006cd4:	b965      	cbnz	r5, 8006cf0 <__strtok_r+0x34>
 8006cd6:	6015      	str	r5, [r2, #0]
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e005      	b.n	8006ce8 <__strtok_r+0x2c>
 8006cdc:	42b5      	cmp	r5, r6
 8006cde:	d1f6      	bne.n	8006cce <__strtok_r+0x12>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1f0      	bne.n	8006cc6 <__strtok_r+0xa>
 8006ce4:	6014      	str	r4, [r2, #0]
 8006ce6:	7003      	strb	r3, [r0, #0]
 8006ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cea:	461c      	mov	r4, r3
 8006cec:	e00c      	b.n	8006d08 <__strtok_r+0x4c>
 8006cee:	b915      	cbnz	r5, 8006cf6 <__strtok_r+0x3a>
 8006cf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006cf4:	460e      	mov	r6, r1
 8006cf6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006cfa:	42ab      	cmp	r3, r5
 8006cfc:	d1f7      	bne.n	8006cee <__strtok_r+0x32>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f3      	beq.n	8006cea <__strtok_r+0x2e>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006d08:	6014      	str	r4, [r2, #0]
 8006d0a:	e7ed      	b.n	8006ce8 <__strtok_r+0x2c>

08006d0c <strstr>:
 8006d0c:	780a      	ldrb	r2, [r1, #0]
 8006d0e:	b570      	push	{r4, r5, r6, lr}
 8006d10:	b96a      	cbnz	r2, 8006d2e <strstr+0x22>
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d109      	bne.n	8006d2c <strstr+0x20>
 8006d18:	460c      	mov	r4, r1
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0f6      	beq.n	8006d12 <strstr+0x6>
 8006d24:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006d28:	429e      	cmp	r6, r3
 8006d2a:	d0f7      	beq.n	8006d1c <strstr+0x10>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	7803      	ldrb	r3, [r0, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1ef      	bne.n	8006d14 <strstr+0x8>
 8006d34:	4618      	mov	r0, r3
 8006d36:	e7ec      	b.n	8006d12 <strstr+0x6>

08006d38 <_close_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4d06      	ldr	r5, [pc, #24]	@ (8006d54 <_close_r+0x1c>)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	f7f9 ffd4 	bl	8000cf0 <_close>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_close_r+0x1a>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_close_r+0x1a>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	200010f8 	.word	0x200010f8

08006d58 <_lseek_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d07      	ldr	r5, [pc, #28]	@ (8006d78 <_lseek_r+0x20>)
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	4608      	mov	r0, r1
 8006d60:	4611      	mov	r1, r2
 8006d62:	2200      	movs	r2, #0
 8006d64:	602a      	str	r2, [r5, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	f7f9 ffe9 	bl	8000d3e <_lseek>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d102      	bne.n	8006d76 <_lseek_r+0x1e>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b103      	cbz	r3, 8006d76 <_lseek_r+0x1e>
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	200010f8 	.word	0x200010f8

08006d7c <_read_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d07      	ldr	r5, [pc, #28]	@ (8006d9c <_read_r+0x20>)
 8006d80:	4604      	mov	r4, r0
 8006d82:	4608      	mov	r0, r1
 8006d84:	4611      	mov	r1, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	602a      	str	r2, [r5, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f7f9 ff77 	bl	8000c7e <_read>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_read_r+0x1e>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_read_r+0x1e>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	200010f8 	.word	0x200010f8

08006da0 <_sbrk_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d06      	ldr	r5, [pc, #24]	@ (8006dbc <_sbrk_r+0x1c>)
 8006da4:	2300      	movs	r3, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	f7f9 ffd4 	bl	8000d58 <_sbrk>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_sbrk_r+0x1a>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_sbrk_r+0x1a>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	200010f8 	.word	0x200010f8

08006dc0 <_write_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	@ (8006de0 <_write_r+0x20>)
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	4611      	mov	r1, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f7f9 ff72 	bl	8000cb8 <_write>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_write_r+0x1e>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_write_r+0x1e>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	200010f8 	.word	0x200010f8

08006de4 <__errno>:
 8006de4:	4b01      	ldr	r3, [pc, #4]	@ (8006dec <__errno+0x8>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000070 	.word	0x20000070

08006df0 <__libc_init_array>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	4d0d      	ldr	r5, [pc, #52]	@ (8006e28 <__libc_init_array+0x38>)
 8006df4:	4c0d      	ldr	r4, [pc, #52]	@ (8006e2c <__libc_init_array+0x3c>)
 8006df6:	1b64      	subs	r4, r4, r5
 8006df8:	10a4      	asrs	r4, r4, #2
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	42a6      	cmp	r6, r4
 8006dfe:	d109      	bne.n	8006e14 <__libc_init_array+0x24>
 8006e00:	4d0b      	ldr	r5, [pc, #44]	@ (8006e30 <__libc_init_array+0x40>)
 8006e02:	4c0c      	ldr	r4, [pc, #48]	@ (8006e34 <__libc_init_array+0x44>)
 8006e04:	f000 fea0 	bl	8007b48 <_init>
 8006e08:	1b64      	subs	r4, r4, r5
 8006e0a:	10a4      	asrs	r4, r4, #2
 8006e0c:	2600      	movs	r6, #0
 8006e0e:	42a6      	cmp	r6, r4
 8006e10:	d105      	bne.n	8006e1e <__libc_init_array+0x2e>
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e18:	4798      	blx	r3
 8006e1a:	3601      	adds	r6, #1
 8006e1c:	e7ee      	b.n	8006dfc <__libc_init_array+0xc>
 8006e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e22:	4798      	blx	r3
 8006e24:	3601      	adds	r6, #1
 8006e26:	e7f2      	b.n	8006e0e <__libc_init_array+0x1e>
 8006e28:	08008e30 	.word	0x08008e30
 8006e2c:	08008e30 	.word	0x08008e30
 8006e30:	08008e30 	.word	0x08008e30
 8006e34:	08008e34 	.word	0x08008e34

08006e38 <__retarget_lock_init_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <__retarget_lock_acquire_recursive>:
 8006e3a:	4770      	bx	lr

08006e3c <__retarget_lock_release_recursive>:
 8006e3c:	4770      	bx	lr

08006e3e <strcpy>:
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e44:	f803 2b01 	strb.w	r2, [r3], #1
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	d1f9      	bne.n	8006e40 <strcpy+0x2>
 8006e4c:	4770      	bx	lr

08006e4e <memcpy>:
 8006e4e:	440a      	add	r2, r1
 8006e50:	4291      	cmp	r1, r2
 8006e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e56:	d100      	bne.n	8006e5a <memcpy+0xc>
 8006e58:	4770      	bx	lr
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e64:	4291      	cmp	r1, r2
 8006e66:	d1f9      	bne.n	8006e5c <memcpy+0xe>
 8006e68:	bd10      	pop	{r4, pc}
	...

08006e6c <__assert_func>:
 8006e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e6e:	4614      	mov	r4, r2
 8006e70:	461a      	mov	r2, r3
 8006e72:	4b09      	ldr	r3, [pc, #36]	@ (8006e98 <__assert_func+0x2c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4605      	mov	r5, r0
 8006e78:	68d8      	ldr	r0, [r3, #12]
 8006e7a:	b954      	cbnz	r4, 8006e92 <__assert_func+0x26>
 8006e7c:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <__assert_func+0x30>)
 8006e7e:	461c      	mov	r4, r3
 8006e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e84:	9100      	str	r1, [sp, #0]
 8006e86:	462b      	mov	r3, r5
 8006e88:	4905      	ldr	r1, [pc, #20]	@ (8006ea0 <__assert_func+0x34>)
 8006e8a:	f000 fd2b 	bl	80078e4 <fiprintf>
 8006e8e:	f000 fdd9 	bl	8007a44 <abort>
 8006e92:	4b04      	ldr	r3, [pc, #16]	@ (8006ea4 <__assert_func+0x38>)
 8006e94:	e7f4      	b.n	8006e80 <__assert_func+0x14>
 8006e96:	bf00      	nop
 8006e98:	20000070 	.word	0x20000070
 8006e9c:	08008df4 	.word	0x08008df4
 8006ea0:	08008dc6 	.word	0x08008dc6
 8006ea4:	08008db9 	.word	0x08008db9

08006ea8 <_free_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4605      	mov	r5, r0
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d041      	beq.n	8006f34 <_free_r+0x8c>
 8006eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb4:	1f0c      	subs	r4, r1, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bfb8      	it	lt
 8006eba:	18e4      	addlt	r4, r4, r3
 8006ebc:	f7ff fbae 	bl	800661c <__malloc_lock>
 8006ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f38 <_free_r+0x90>)
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	b933      	cbnz	r3, 8006ed4 <_free_r+0x2c>
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	6014      	str	r4, [r2, #0]
 8006eca:	4628      	mov	r0, r5
 8006ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed0:	f7ff bbaa 	b.w	8006628 <__malloc_unlock>
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d908      	bls.n	8006eea <_free_r+0x42>
 8006ed8:	6820      	ldr	r0, [r4, #0]
 8006eda:	1821      	adds	r1, r4, r0
 8006edc:	428b      	cmp	r3, r1
 8006ede:	bf01      	itttt	eq
 8006ee0:	6819      	ldreq	r1, [r3, #0]
 8006ee2:	685b      	ldreq	r3, [r3, #4]
 8006ee4:	1809      	addeq	r1, r1, r0
 8006ee6:	6021      	streq	r1, [r4, #0]
 8006ee8:	e7ed      	b.n	8006ec6 <_free_r+0x1e>
 8006eea:	461a      	mov	r2, r3
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	b10b      	cbz	r3, 8006ef4 <_free_r+0x4c>
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d9fa      	bls.n	8006eea <_free_r+0x42>
 8006ef4:	6811      	ldr	r1, [r2, #0]
 8006ef6:	1850      	adds	r0, r2, r1
 8006ef8:	42a0      	cmp	r0, r4
 8006efa:	d10b      	bne.n	8006f14 <_free_r+0x6c>
 8006efc:	6820      	ldr	r0, [r4, #0]
 8006efe:	4401      	add	r1, r0
 8006f00:	1850      	adds	r0, r2, r1
 8006f02:	4283      	cmp	r3, r0
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	d1e0      	bne.n	8006eca <_free_r+0x22>
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	6053      	str	r3, [r2, #4]
 8006f0e:	4408      	add	r0, r1
 8006f10:	6010      	str	r0, [r2, #0]
 8006f12:	e7da      	b.n	8006eca <_free_r+0x22>
 8006f14:	d902      	bls.n	8006f1c <_free_r+0x74>
 8006f16:	230c      	movs	r3, #12
 8006f18:	602b      	str	r3, [r5, #0]
 8006f1a:	e7d6      	b.n	8006eca <_free_r+0x22>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf04      	itt	eq
 8006f24:	6819      	ldreq	r1, [r3, #0]
 8006f26:	685b      	ldreq	r3, [r3, #4]
 8006f28:	6063      	str	r3, [r4, #4]
 8006f2a:	bf04      	itt	eq
 8006f2c:	1809      	addeq	r1, r1, r0
 8006f2e:	6021      	streq	r1, [r4, #0]
 8006f30:	6054      	str	r4, [r2, #4]
 8006f32:	e7ca      	b.n	8006eca <_free_r+0x22>
 8006f34:	bd38      	pop	{r3, r4, r5, pc}
 8006f36:	bf00      	nop
 8006f38:	20000fb8 	.word	0x20000fb8

08006f3c <__ssputs_r>:
 8006f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	688e      	ldr	r6, [r1, #8]
 8006f42:	461f      	mov	r7, r3
 8006f44:	42be      	cmp	r6, r7
 8006f46:	680b      	ldr	r3, [r1, #0]
 8006f48:	4682      	mov	sl, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4690      	mov	r8, r2
 8006f4e:	d82d      	bhi.n	8006fac <__ssputs_r+0x70>
 8006f50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f58:	d026      	beq.n	8006fa8 <__ssputs_r+0x6c>
 8006f5a:	6965      	ldr	r5, [r4, #20]
 8006f5c:	6909      	ldr	r1, [r1, #16]
 8006f5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f62:	eba3 0901 	sub.w	r9, r3, r1
 8006f66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f6a:	1c7b      	adds	r3, r7, #1
 8006f6c:	444b      	add	r3, r9
 8006f6e:	106d      	asrs	r5, r5, #1
 8006f70:	429d      	cmp	r5, r3
 8006f72:	bf38      	it	cc
 8006f74:	461d      	movcc	r5, r3
 8006f76:	0553      	lsls	r3, r2, #21
 8006f78:	d527      	bpl.n	8006fca <__ssputs_r+0x8e>
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	f7ff face 	bl	800651c <_malloc_r>
 8006f80:	4606      	mov	r6, r0
 8006f82:	b360      	cbz	r0, 8006fde <__ssputs_r+0xa2>
 8006f84:	6921      	ldr	r1, [r4, #16]
 8006f86:	464a      	mov	r2, r9
 8006f88:	f7ff ff61 	bl	8006e4e <memcpy>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	6126      	str	r6, [r4, #16]
 8006f9a:	6165      	str	r5, [r4, #20]
 8006f9c:	444e      	add	r6, r9
 8006f9e:	eba5 0509 	sub.w	r5, r5, r9
 8006fa2:	6026      	str	r6, [r4, #0]
 8006fa4:	60a5      	str	r5, [r4, #8]
 8006fa6:	463e      	mov	r6, r7
 8006fa8:	42be      	cmp	r6, r7
 8006faa:	d900      	bls.n	8006fae <__ssputs_r+0x72>
 8006fac:	463e      	mov	r6, r7
 8006fae:	6820      	ldr	r0, [r4, #0]
 8006fb0:	4632      	mov	r2, r6
 8006fb2:	4641      	mov	r1, r8
 8006fb4:	f000 fd0a 	bl	80079cc <memmove>
 8006fb8:	68a3      	ldr	r3, [r4, #8]
 8006fba:	1b9b      	subs	r3, r3, r6
 8006fbc:	60a3      	str	r3, [r4, #8]
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	4433      	add	r3, r6
 8006fc2:	6023      	str	r3, [r4, #0]
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fca:	462a      	mov	r2, r5
 8006fcc:	f000 fd41 	bl	8007a52 <_realloc_r>
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d1e0      	bne.n	8006f98 <__ssputs_r+0x5c>
 8006fd6:	6921      	ldr	r1, [r4, #16]
 8006fd8:	4650      	mov	r0, sl
 8006fda:	f7ff ff65 	bl	8006ea8 <_free_r>
 8006fde:	230c      	movs	r3, #12
 8006fe0:	f8ca 3000 	str.w	r3, [sl]
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	e7e9      	b.n	8006fc6 <__ssputs_r+0x8a>
	...

08006ff4 <_svfiprintf_r>:
 8006ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff8:	4698      	mov	r8, r3
 8006ffa:	898b      	ldrh	r3, [r1, #12]
 8006ffc:	061b      	lsls	r3, r3, #24
 8006ffe:	b09d      	sub	sp, #116	@ 0x74
 8007000:	4607      	mov	r7, r0
 8007002:	460d      	mov	r5, r1
 8007004:	4614      	mov	r4, r2
 8007006:	d510      	bpl.n	800702a <_svfiprintf_r+0x36>
 8007008:	690b      	ldr	r3, [r1, #16]
 800700a:	b973      	cbnz	r3, 800702a <_svfiprintf_r+0x36>
 800700c:	2140      	movs	r1, #64	@ 0x40
 800700e:	f7ff fa85 	bl	800651c <_malloc_r>
 8007012:	6028      	str	r0, [r5, #0]
 8007014:	6128      	str	r0, [r5, #16]
 8007016:	b930      	cbnz	r0, 8007026 <_svfiprintf_r+0x32>
 8007018:	230c      	movs	r3, #12
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	b01d      	add	sp, #116	@ 0x74
 8007022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007026:	2340      	movs	r3, #64	@ 0x40
 8007028:	616b      	str	r3, [r5, #20]
 800702a:	2300      	movs	r3, #0
 800702c:	9309      	str	r3, [sp, #36]	@ 0x24
 800702e:	2320      	movs	r3, #32
 8007030:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007034:	f8cd 800c 	str.w	r8, [sp, #12]
 8007038:	2330      	movs	r3, #48	@ 0x30
 800703a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80071d8 <_svfiprintf_r+0x1e4>
 800703e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007042:	f04f 0901 	mov.w	r9, #1
 8007046:	4623      	mov	r3, r4
 8007048:	469a      	mov	sl, r3
 800704a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800704e:	b10a      	cbz	r2, 8007054 <_svfiprintf_r+0x60>
 8007050:	2a25      	cmp	r2, #37	@ 0x25
 8007052:	d1f9      	bne.n	8007048 <_svfiprintf_r+0x54>
 8007054:	ebba 0b04 	subs.w	fp, sl, r4
 8007058:	d00b      	beq.n	8007072 <_svfiprintf_r+0x7e>
 800705a:	465b      	mov	r3, fp
 800705c:	4622      	mov	r2, r4
 800705e:	4629      	mov	r1, r5
 8007060:	4638      	mov	r0, r7
 8007062:	f7ff ff6b 	bl	8006f3c <__ssputs_r>
 8007066:	3001      	adds	r0, #1
 8007068:	f000 80a7 	beq.w	80071ba <_svfiprintf_r+0x1c6>
 800706c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800706e:	445a      	add	r2, fp
 8007070:	9209      	str	r2, [sp, #36]	@ 0x24
 8007072:	f89a 3000 	ldrb.w	r3, [sl]
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 809f 	beq.w	80071ba <_svfiprintf_r+0x1c6>
 800707c:	2300      	movs	r3, #0
 800707e:	f04f 32ff 	mov.w	r2, #4294967295
 8007082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007086:	f10a 0a01 	add.w	sl, sl, #1
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	9307      	str	r3, [sp, #28]
 800708e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007092:	931a      	str	r3, [sp, #104]	@ 0x68
 8007094:	4654      	mov	r4, sl
 8007096:	2205      	movs	r2, #5
 8007098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709c:	484e      	ldr	r0, [pc, #312]	@ (80071d8 <_svfiprintf_r+0x1e4>)
 800709e:	f7f9 f8d7 	bl	8000250 <memchr>
 80070a2:	9a04      	ldr	r2, [sp, #16]
 80070a4:	b9d8      	cbnz	r0, 80070de <_svfiprintf_r+0xea>
 80070a6:	06d0      	lsls	r0, r2, #27
 80070a8:	bf44      	itt	mi
 80070aa:	2320      	movmi	r3, #32
 80070ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070b0:	0711      	lsls	r1, r2, #28
 80070b2:	bf44      	itt	mi
 80070b4:	232b      	movmi	r3, #43	@ 0x2b
 80070b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ba:	f89a 3000 	ldrb.w	r3, [sl]
 80070be:	2b2a      	cmp	r3, #42	@ 0x2a
 80070c0:	d015      	beq.n	80070ee <_svfiprintf_r+0xfa>
 80070c2:	9a07      	ldr	r2, [sp, #28]
 80070c4:	4654      	mov	r4, sl
 80070c6:	2000      	movs	r0, #0
 80070c8:	f04f 0c0a 	mov.w	ip, #10
 80070cc:	4621      	mov	r1, r4
 80070ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070d2:	3b30      	subs	r3, #48	@ 0x30
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d94b      	bls.n	8007170 <_svfiprintf_r+0x17c>
 80070d8:	b1b0      	cbz	r0, 8007108 <_svfiprintf_r+0x114>
 80070da:	9207      	str	r2, [sp, #28]
 80070dc:	e014      	b.n	8007108 <_svfiprintf_r+0x114>
 80070de:	eba0 0308 	sub.w	r3, r0, r8
 80070e2:	fa09 f303 	lsl.w	r3, r9, r3
 80070e6:	4313      	orrs	r3, r2
 80070e8:	9304      	str	r3, [sp, #16]
 80070ea:	46a2      	mov	sl, r4
 80070ec:	e7d2      	b.n	8007094 <_svfiprintf_r+0xa0>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	1d19      	adds	r1, r3, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	9103      	str	r1, [sp, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfbb      	ittet	lt
 80070fa:	425b      	neglt	r3, r3
 80070fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007100:	9307      	strge	r3, [sp, #28]
 8007102:	9307      	strlt	r3, [sp, #28]
 8007104:	bfb8      	it	lt
 8007106:	9204      	strlt	r2, [sp, #16]
 8007108:	7823      	ldrb	r3, [r4, #0]
 800710a:	2b2e      	cmp	r3, #46	@ 0x2e
 800710c:	d10a      	bne.n	8007124 <_svfiprintf_r+0x130>
 800710e:	7863      	ldrb	r3, [r4, #1]
 8007110:	2b2a      	cmp	r3, #42	@ 0x2a
 8007112:	d132      	bne.n	800717a <_svfiprintf_r+0x186>
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	1d1a      	adds	r2, r3, #4
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	9203      	str	r2, [sp, #12]
 800711c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007120:	3402      	adds	r4, #2
 8007122:	9305      	str	r3, [sp, #20]
 8007124:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80071e8 <_svfiprintf_r+0x1f4>
 8007128:	7821      	ldrb	r1, [r4, #0]
 800712a:	2203      	movs	r2, #3
 800712c:	4650      	mov	r0, sl
 800712e:	f7f9 f88f 	bl	8000250 <memchr>
 8007132:	b138      	cbz	r0, 8007144 <_svfiprintf_r+0x150>
 8007134:	9b04      	ldr	r3, [sp, #16]
 8007136:	eba0 000a 	sub.w	r0, r0, sl
 800713a:	2240      	movs	r2, #64	@ 0x40
 800713c:	4082      	lsls	r2, r0
 800713e:	4313      	orrs	r3, r2
 8007140:	3401      	adds	r4, #1
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007148:	4824      	ldr	r0, [pc, #144]	@ (80071dc <_svfiprintf_r+0x1e8>)
 800714a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800714e:	2206      	movs	r2, #6
 8007150:	f7f9 f87e 	bl	8000250 <memchr>
 8007154:	2800      	cmp	r0, #0
 8007156:	d036      	beq.n	80071c6 <_svfiprintf_r+0x1d2>
 8007158:	4b21      	ldr	r3, [pc, #132]	@ (80071e0 <_svfiprintf_r+0x1ec>)
 800715a:	bb1b      	cbnz	r3, 80071a4 <_svfiprintf_r+0x1b0>
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	3307      	adds	r3, #7
 8007160:	f023 0307 	bic.w	r3, r3, #7
 8007164:	3308      	adds	r3, #8
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800716a:	4433      	add	r3, r6
 800716c:	9309      	str	r3, [sp, #36]	@ 0x24
 800716e:	e76a      	b.n	8007046 <_svfiprintf_r+0x52>
 8007170:	fb0c 3202 	mla	r2, ip, r2, r3
 8007174:	460c      	mov	r4, r1
 8007176:	2001      	movs	r0, #1
 8007178:	e7a8      	b.n	80070cc <_svfiprintf_r+0xd8>
 800717a:	2300      	movs	r3, #0
 800717c:	3401      	adds	r4, #1
 800717e:	9305      	str	r3, [sp, #20]
 8007180:	4619      	mov	r1, r3
 8007182:	f04f 0c0a 	mov.w	ip, #10
 8007186:	4620      	mov	r0, r4
 8007188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718c:	3a30      	subs	r2, #48	@ 0x30
 800718e:	2a09      	cmp	r2, #9
 8007190:	d903      	bls.n	800719a <_svfiprintf_r+0x1a6>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0c6      	beq.n	8007124 <_svfiprintf_r+0x130>
 8007196:	9105      	str	r1, [sp, #20]
 8007198:	e7c4      	b.n	8007124 <_svfiprintf_r+0x130>
 800719a:	fb0c 2101 	mla	r1, ip, r1, r2
 800719e:	4604      	mov	r4, r0
 80071a0:	2301      	movs	r3, #1
 80071a2:	e7f0      	b.n	8007186 <_svfiprintf_r+0x192>
 80071a4:	ab03      	add	r3, sp, #12
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	462a      	mov	r2, r5
 80071aa:	4b0e      	ldr	r3, [pc, #56]	@ (80071e4 <_svfiprintf_r+0x1f0>)
 80071ac:	a904      	add	r1, sp, #16
 80071ae:	4638      	mov	r0, r7
 80071b0:	f3af 8000 	nop.w
 80071b4:	1c42      	adds	r2, r0, #1
 80071b6:	4606      	mov	r6, r0
 80071b8:	d1d6      	bne.n	8007168 <_svfiprintf_r+0x174>
 80071ba:	89ab      	ldrh	r3, [r5, #12]
 80071bc:	065b      	lsls	r3, r3, #25
 80071be:	f53f af2d 	bmi.w	800701c <_svfiprintf_r+0x28>
 80071c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071c4:	e72c      	b.n	8007020 <_svfiprintf_r+0x2c>
 80071c6:	ab03      	add	r3, sp, #12
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	462a      	mov	r2, r5
 80071cc:	4b05      	ldr	r3, [pc, #20]	@ (80071e4 <_svfiprintf_r+0x1f0>)
 80071ce:	a904      	add	r1, sp, #16
 80071d0:	4638      	mov	r0, r7
 80071d2:	f000 f9bb 	bl	800754c <_printf_i>
 80071d6:	e7ed      	b.n	80071b4 <_svfiprintf_r+0x1c0>
 80071d8:	08008df5 	.word	0x08008df5
 80071dc:	08008dff 	.word	0x08008dff
 80071e0:	00000000 	.word	0x00000000
 80071e4:	08006f3d 	.word	0x08006f3d
 80071e8:	08008dfb 	.word	0x08008dfb

080071ec <__sfputc_r>:
 80071ec:	6893      	ldr	r3, [r2, #8]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	b410      	push	{r4}
 80071f4:	6093      	str	r3, [r2, #8]
 80071f6:	da08      	bge.n	800720a <__sfputc_r+0x1e>
 80071f8:	6994      	ldr	r4, [r2, #24]
 80071fa:	42a3      	cmp	r3, r4
 80071fc:	db01      	blt.n	8007202 <__sfputc_r+0x16>
 80071fe:	290a      	cmp	r1, #10
 8007200:	d103      	bne.n	800720a <__sfputc_r+0x1e>
 8007202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007206:	f7ff bc66 	b.w	8006ad6 <__swbuf_r>
 800720a:	6813      	ldr	r3, [r2, #0]
 800720c:	1c58      	adds	r0, r3, #1
 800720e:	6010      	str	r0, [r2, #0]
 8007210:	7019      	strb	r1, [r3, #0]
 8007212:	4608      	mov	r0, r1
 8007214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007218:	4770      	bx	lr

0800721a <__sfputs_r>:
 800721a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721c:	4606      	mov	r6, r0
 800721e:	460f      	mov	r7, r1
 8007220:	4614      	mov	r4, r2
 8007222:	18d5      	adds	r5, r2, r3
 8007224:	42ac      	cmp	r4, r5
 8007226:	d101      	bne.n	800722c <__sfputs_r+0x12>
 8007228:	2000      	movs	r0, #0
 800722a:	e007      	b.n	800723c <__sfputs_r+0x22>
 800722c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007230:	463a      	mov	r2, r7
 8007232:	4630      	mov	r0, r6
 8007234:	f7ff ffda 	bl	80071ec <__sfputc_r>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d1f3      	bne.n	8007224 <__sfputs_r+0xa>
 800723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007240 <_vfiprintf_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	460d      	mov	r5, r1
 8007246:	b09d      	sub	sp, #116	@ 0x74
 8007248:	4614      	mov	r4, r2
 800724a:	4698      	mov	r8, r3
 800724c:	4606      	mov	r6, r0
 800724e:	b118      	cbz	r0, 8007258 <_vfiprintf_r+0x18>
 8007250:	6a03      	ldr	r3, [r0, #32]
 8007252:	b90b      	cbnz	r3, 8007258 <_vfiprintf_r+0x18>
 8007254:	f7ff fa7a 	bl	800674c <__sinit>
 8007258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800725a:	07d9      	lsls	r1, r3, #31
 800725c:	d405      	bmi.n	800726a <_vfiprintf_r+0x2a>
 800725e:	89ab      	ldrh	r3, [r5, #12]
 8007260:	059a      	lsls	r2, r3, #22
 8007262:	d402      	bmi.n	800726a <_vfiprintf_r+0x2a>
 8007264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007266:	f7ff fde8 	bl	8006e3a <__retarget_lock_acquire_recursive>
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	071b      	lsls	r3, r3, #28
 800726e:	d501      	bpl.n	8007274 <_vfiprintf_r+0x34>
 8007270:	692b      	ldr	r3, [r5, #16]
 8007272:	b99b      	cbnz	r3, 800729c <_vfiprintf_r+0x5c>
 8007274:	4629      	mov	r1, r5
 8007276:	4630      	mov	r0, r6
 8007278:	f7ff fc6c 	bl	8006b54 <__swsetup_r>
 800727c:	b170      	cbz	r0, 800729c <_vfiprintf_r+0x5c>
 800727e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007280:	07dc      	lsls	r4, r3, #31
 8007282:	d504      	bpl.n	800728e <_vfiprintf_r+0x4e>
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	b01d      	add	sp, #116	@ 0x74
 800728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	0598      	lsls	r0, r3, #22
 8007292:	d4f7      	bmi.n	8007284 <_vfiprintf_r+0x44>
 8007294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007296:	f7ff fdd1 	bl	8006e3c <__retarget_lock_release_recursive>
 800729a:	e7f3      	b.n	8007284 <_vfiprintf_r+0x44>
 800729c:	2300      	movs	r3, #0
 800729e:	9309      	str	r3, [sp, #36]	@ 0x24
 80072a0:	2320      	movs	r3, #32
 80072a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072aa:	2330      	movs	r3, #48	@ 0x30
 80072ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800745c <_vfiprintf_r+0x21c>
 80072b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072b4:	f04f 0901 	mov.w	r9, #1
 80072b8:	4623      	mov	r3, r4
 80072ba:	469a      	mov	sl, r3
 80072bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072c0:	b10a      	cbz	r2, 80072c6 <_vfiprintf_r+0x86>
 80072c2:	2a25      	cmp	r2, #37	@ 0x25
 80072c4:	d1f9      	bne.n	80072ba <_vfiprintf_r+0x7a>
 80072c6:	ebba 0b04 	subs.w	fp, sl, r4
 80072ca:	d00b      	beq.n	80072e4 <_vfiprintf_r+0xa4>
 80072cc:	465b      	mov	r3, fp
 80072ce:	4622      	mov	r2, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ffa1 	bl	800721a <__sfputs_r>
 80072d8:	3001      	adds	r0, #1
 80072da:	f000 80a7 	beq.w	800742c <_vfiprintf_r+0x1ec>
 80072de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072e0:	445a      	add	r2, fp
 80072e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80072e4:	f89a 3000 	ldrb.w	r3, [sl]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 809f 	beq.w	800742c <_vfiprintf_r+0x1ec>
 80072ee:	2300      	movs	r3, #0
 80072f0:	f04f 32ff 	mov.w	r2, #4294967295
 80072f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072f8:	f10a 0a01 	add.w	sl, sl, #1
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	9307      	str	r3, [sp, #28]
 8007300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007304:	931a      	str	r3, [sp, #104]	@ 0x68
 8007306:	4654      	mov	r4, sl
 8007308:	2205      	movs	r2, #5
 800730a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800730e:	4853      	ldr	r0, [pc, #332]	@ (800745c <_vfiprintf_r+0x21c>)
 8007310:	f7f8 ff9e 	bl	8000250 <memchr>
 8007314:	9a04      	ldr	r2, [sp, #16]
 8007316:	b9d8      	cbnz	r0, 8007350 <_vfiprintf_r+0x110>
 8007318:	06d1      	lsls	r1, r2, #27
 800731a:	bf44      	itt	mi
 800731c:	2320      	movmi	r3, #32
 800731e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007322:	0713      	lsls	r3, r2, #28
 8007324:	bf44      	itt	mi
 8007326:	232b      	movmi	r3, #43	@ 0x2b
 8007328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800732c:	f89a 3000 	ldrb.w	r3, [sl]
 8007330:	2b2a      	cmp	r3, #42	@ 0x2a
 8007332:	d015      	beq.n	8007360 <_vfiprintf_r+0x120>
 8007334:	9a07      	ldr	r2, [sp, #28]
 8007336:	4654      	mov	r4, sl
 8007338:	2000      	movs	r0, #0
 800733a:	f04f 0c0a 	mov.w	ip, #10
 800733e:	4621      	mov	r1, r4
 8007340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007344:	3b30      	subs	r3, #48	@ 0x30
 8007346:	2b09      	cmp	r3, #9
 8007348:	d94b      	bls.n	80073e2 <_vfiprintf_r+0x1a2>
 800734a:	b1b0      	cbz	r0, 800737a <_vfiprintf_r+0x13a>
 800734c:	9207      	str	r2, [sp, #28]
 800734e:	e014      	b.n	800737a <_vfiprintf_r+0x13a>
 8007350:	eba0 0308 	sub.w	r3, r0, r8
 8007354:	fa09 f303 	lsl.w	r3, r9, r3
 8007358:	4313      	orrs	r3, r2
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	46a2      	mov	sl, r4
 800735e:	e7d2      	b.n	8007306 <_vfiprintf_r+0xc6>
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	1d19      	adds	r1, r3, #4
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	9103      	str	r1, [sp, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	bfbb      	ittet	lt
 800736c:	425b      	neglt	r3, r3
 800736e:	f042 0202 	orrlt.w	r2, r2, #2
 8007372:	9307      	strge	r3, [sp, #28]
 8007374:	9307      	strlt	r3, [sp, #28]
 8007376:	bfb8      	it	lt
 8007378:	9204      	strlt	r2, [sp, #16]
 800737a:	7823      	ldrb	r3, [r4, #0]
 800737c:	2b2e      	cmp	r3, #46	@ 0x2e
 800737e:	d10a      	bne.n	8007396 <_vfiprintf_r+0x156>
 8007380:	7863      	ldrb	r3, [r4, #1]
 8007382:	2b2a      	cmp	r3, #42	@ 0x2a
 8007384:	d132      	bne.n	80073ec <_vfiprintf_r+0x1ac>
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	1d1a      	adds	r2, r3, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	9203      	str	r2, [sp, #12]
 800738e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007392:	3402      	adds	r4, #2
 8007394:	9305      	str	r3, [sp, #20]
 8007396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800746c <_vfiprintf_r+0x22c>
 800739a:	7821      	ldrb	r1, [r4, #0]
 800739c:	2203      	movs	r2, #3
 800739e:	4650      	mov	r0, sl
 80073a0:	f7f8 ff56 	bl	8000250 <memchr>
 80073a4:	b138      	cbz	r0, 80073b6 <_vfiprintf_r+0x176>
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	eba0 000a 	sub.w	r0, r0, sl
 80073ac:	2240      	movs	r2, #64	@ 0x40
 80073ae:	4082      	lsls	r2, r0
 80073b0:	4313      	orrs	r3, r2
 80073b2:	3401      	adds	r4, #1
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ba:	4829      	ldr	r0, [pc, #164]	@ (8007460 <_vfiprintf_r+0x220>)
 80073bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073c0:	2206      	movs	r2, #6
 80073c2:	f7f8 ff45 	bl	8000250 <memchr>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d03f      	beq.n	800744a <_vfiprintf_r+0x20a>
 80073ca:	4b26      	ldr	r3, [pc, #152]	@ (8007464 <_vfiprintf_r+0x224>)
 80073cc:	bb1b      	cbnz	r3, 8007416 <_vfiprintf_r+0x1d6>
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	3307      	adds	r3, #7
 80073d2:	f023 0307 	bic.w	r3, r3, #7
 80073d6:	3308      	adds	r3, #8
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073dc:	443b      	add	r3, r7
 80073de:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e0:	e76a      	b.n	80072b8 <_vfiprintf_r+0x78>
 80073e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073e6:	460c      	mov	r4, r1
 80073e8:	2001      	movs	r0, #1
 80073ea:	e7a8      	b.n	800733e <_vfiprintf_r+0xfe>
 80073ec:	2300      	movs	r3, #0
 80073ee:	3401      	adds	r4, #1
 80073f0:	9305      	str	r3, [sp, #20]
 80073f2:	4619      	mov	r1, r3
 80073f4:	f04f 0c0a 	mov.w	ip, #10
 80073f8:	4620      	mov	r0, r4
 80073fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073fe:	3a30      	subs	r2, #48	@ 0x30
 8007400:	2a09      	cmp	r2, #9
 8007402:	d903      	bls.n	800740c <_vfiprintf_r+0x1cc>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0c6      	beq.n	8007396 <_vfiprintf_r+0x156>
 8007408:	9105      	str	r1, [sp, #20]
 800740a:	e7c4      	b.n	8007396 <_vfiprintf_r+0x156>
 800740c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007410:	4604      	mov	r4, r0
 8007412:	2301      	movs	r3, #1
 8007414:	e7f0      	b.n	80073f8 <_vfiprintf_r+0x1b8>
 8007416:	ab03      	add	r3, sp, #12
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	462a      	mov	r2, r5
 800741c:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <_vfiprintf_r+0x228>)
 800741e:	a904      	add	r1, sp, #16
 8007420:	4630      	mov	r0, r6
 8007422:	f3af 8000 	nop.w
 8007426:	4607      	mov	r7, r0
 8007428:	1c78      	adds	r0, r7, #1
 800742a:	d1d6      	bne.n	80073da <_vfiprintf_r+0x19a>
 800742c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800742e:	07d9      	lsls	r1, r3, #31
 8007430:	d405      	bmi.n	800743e <_vfiprintf_r+0x1fe>
 8007432:	89ab      	ldrh	r3, [r5, #12]
 8007434:	059a      	lsls	r2, r3, #22
 8007436:	d402      	bmi.n	800743e <_vfiprintf_r+0x1fe>
 8007438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800743a:	f7ff fcff 	bl	8006e3c <__retarget_lock_release_recursive>
 800743e:	89ab      	ldrh	r3, [r5, #12]
 8007440:	065b      	lsls	r3, r3, #25
 8007442:	f53f af1f 	bmi.w	8007284 <_vfiprintf_r+0x44>
 8007446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007448:	e71e      	b.n	8007288 <_vfiprintf_r+0x48>
 800744a:	ab03      	add	r3, sp, #12
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	462a      	mov	r2, r5
 8007450:	4b05      	ldr	r3, [pc, #20]	@ (8007468 <_vfiprintf_r+0x228>)
 8007452:	a904      	add	r1, sp, #16
 8007454:	4630      	mov	r0, r6
 8007456:	f000 f879 	bl	800754c <_printf_i>
 800745a:	e7e4      	b.n	8007426 <_vfiprintf_r+0x1e6>
 800745c:	08008df5 	.word	0x08008df5
 8007460:	08008dff 	.word	0x08008dff
 8007464:	00000000 	.word	0x00000000
 8007468:	0800721b 	.word	0x0800721b
 800746c:	08008dfb 	.word	0x08008dfb

08007470 <_printf_common>:
 8007470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007474:	4616      	mov	r6, r2
 8007476:	4698      	mov	r8, r3
 8007478:	688a      	ldr	r2, [r1, #8]
 800747a:	690b      	ldr	r3, [r1, #16]
 800747c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007480:	4293      	cmp	r3, r2
 8007482:	bfb8      	it	lt
 8007484:	4613      	movlt	r3, r2
 8007486:	6033      	str	r3, [r6, #0]
 8007488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800748c:	4607      	mov	r7, r0
 800748e:	460c      	mov	r4, r1
 8007490:	b10a      	cbz	r2, 8007496 <_printf_common+0x26>
 8007492:	3301      	adds	r3, #1
 8007494:	6033      	str	r3, [r6, #0]
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	0699      	lsls	r1, r3, #26
 800749a:	bf42      	ittt	mi
 800749c:	6833      	ldrmi	r3, [r6, #0]
 800749e:	3302      	addmi	r3, #2
 80074a0:	6033      	strmi	r3, [r6, #0]
 80074a2:	6825      	ldr	r5, [r4, #0]
 80074a4:	f015 0506 	ands.w	r5, r5, #6
 80074a8:	d106      	bne.n	80074b8 <_printf_common+0x48>
 80074aa:	f104 0a19 	add.w	sl, r4, #25
 80074ae:	68e3      	ldr	r3, [r4, #12]
 80074b0:	6832      	ldr	r2, [r6, #0]
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	42ab      	cmp	r3, r5
 80074b6:	dc26      	bgt.n	8007506 <_printf_common+0x96>
 80074b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	3b00      	subs	r3, #0
 80074c0:	bf18      	it	ne
 80074c2:	2301      	movne	r3, #1
 80074c4:	0692      	lsls	r2, r2, #26
 80074c6:	d42b      	bmi.n	8007520 <_printf_common+0xb0>
 80074c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074cc:	4641      	mov	r1, r8
 80074ce:	4638      	mov	r0, r7
 80074d0:	47c8      	blx	r9
 80074d2:	3001      	adds	r0, #1
 80074d4:	d01e      	beq.n	8007514 <_printf_common+0xa4>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	6922      	ldr	r2, [r4, #16]
 80074da:	f003 0306 	and.w	r3, r3, #6
 80074de:	2b04      	cmp	r3, #4
 80074e0:	bf02      	ittt	eq
 80074e2:	68e5      	ldreq	r5, [r4, #12]
 80074e4:	6833      	ldreq	r3, [r6, #0]
 80074e6:	1aed      	subeq	r5, r5, r3
 80074e8:	68a3      	ldr	r3, [r4, #8]
 80074ea:	bf0c      	ite	eq
 80074ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f0:	2500      	movne	r5, #0
 80074f2:	4293      	cmp	r3, r2
 80074f4:	bfc4      	itt	gt
 80074f6:	1a9b      	subgt	r3, r3, r2
 80074f8:	18ed      	addgt	r5, r5, r3
 80074fa:	2600      	movs	r6, #0
 80074fc:	341a      	adds	r4, #26
 80074fe:	42b5      	cmp	r5, r6
 8007500:	d11a      	bne.n	8007538 <_printf_common+0xc8>
 8007502:	2000      	movs	r0, #0
 8007504:	e008      	b.n	8007518 <_printf_common+0xa8>
 8007506:	2301      	movs	r3, #1
 8007508:	4652      	mov	r2, sl
 800750a:	4641      	mov	r1, r8
 800750c:	4638      	mov	r0, r7
 800750e:	47c8      	blx	r9
 8007510:	3001      	adds	r0, #1
 8007512:	d103      	bne.n	800751c <_printf_common+0xac>
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751c:	3501      	adds	r5, #1
 800751e:	e7c6      	b.n	80074ae <_printf_common+0x3e>
 8007520:	18e1      	adds	r1, r4, r3
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	2030      	movs	r0, #48	@ 0x30
 8007526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800752a:	4422      	add	r2, r4
 800752c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007534:	3302      	adds	r3, #2
 8007536:	e7c7      	b.n	80074c8 <_printf_common+0x58>
 8007538:	2301      	movs	r3, #1
 800753a:	4622      	mov	r2, r4
 800753c:	4641      	mov	r1, r8
 800753e:	4638      	mov	r0, r7
 8007540:	47c8      	blx	r9
 8007542:	3001      	adds	r0, #1
 8007544:	d0e6      	beq.n	8007514 <_printf_common+0xa4>
 8007546:	3601      	adds	r6, #1
 8007548:	e7d9      	b.n	80074fe <_printf_common+0x8e>
	...

0800754c <_printf_i>:
 800754c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	7e0f      	ldrb	r7, [r1, #24]
 8007552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007554:	2f78      	cmp	r7, #120	@ 0x78
 8007556:	4691      	mov	r9, r2
 8007558:	4680      	mov	r8, r0
 800755a:	460c      	mov	r4, r1
 800755c:	469a      	mov	sl, r3
 800755e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007562:	d807      	bhi.n	8007574 <_printf_i+0x28>
 8007564:	2f62      	cmp	r7, #98	@ 0x62
 8007566:	d80a      	bhi.n	800757e <_printf_i+0x32>
 8007568:	2f00      	cmp	r7, #0
 800756a:	f000 80d2 	beq.w	8007712 <_printf_i+0x1c6>
 800756e:	2f58      	cmp	r7, #88	@ 0x58
 8007570:	f000 80b9 	beq.w	80076e6 <_printf_i+0x19a>
 8007574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800757c:	e03a      	b.n	80075f4 <_printf_i+0xa8>
 800757e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007582:	2b15      	cmp	r3, #21
 8007584:	d8f6      	bhi.n	8007574 <_printf_i+0x28>
 8007586:	a101      	add	r1, pc, #4	@ (adr r1, 800758c <_printf_i+0x40>)
 8007588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800758c:	080075e5 	.word	0x080075e5
 8007590:	080075f9 	.word	0x080075f9
 8007594:	08007575 	.word	0x08007575
 8007598:	08007575 	.word	0x08007575
 800759c:	08007575 	.word	0x08007575
 80075a0:	08007575 	.word	0x08007575
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	08007575 	.word	0x08007575
 80075ac:	08007575 	.word	0x08007575
 80075b0:	08007575 	.word	0x08007575
 80075b4:	08007575 	.word	0x08007575
 80075b8:	080076f9 	.word	0x080076f9
 80075bc:	08007623 	.word	0x08007623
 80075c0:	080076b3 	.word	0x080076b3
 80075c4:	08007575 	.word	0x08007575
 80075c8:	08007575 	.word	0x08007575
 80075cc:	0800771b 	.word	0x0800771b
 80075d0:	08007575 	.word	0x08007575
 80075d4:	08007623 	.word	0x08007623
 80075d8:	08007575 	.word	0x08007575
 80075dc:	08007575 	.word	0x08007575
 80075e0:	080076bb 	.word	0x080076bb
 80075e4:	6833      	ldr	r3, [r6, #0]
 80075e6:	1d1a      	adds	r2, r3, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6032      	str	r2, [r6, #0]
 80075ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075f4:	2301      	movs	r3, #1
 80075f6:	e09d      	b.n	8007734 <_printf_i+0x1e8>
 80075f8:	6833      	ldr	r3, [r6, #0]
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	1d19      	adds	r1, r3, #4
 80075fe:	6031      	str	r1, [r6, #0]
 8007600:	0606      	lsls	r6, r0, #24
 8007602:	d501      	bpl.n	8007608 <_printf_i+0xbc>
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	e003      	b.n	8007610 <_printf_i+0xc4>
 8007608:	0645      	lsls	r5, r0, #25
 800760a:	d5fb      	bpl.n	8007604 <_printf_i+0xb8>
 800760c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007610:	2d00      	cmp	r5, #0
 8007612:	da03      	bge.n	800761c <_printf_i+0xd0>
 8007614:	232d      	movs	r3, #45	@ 0x2d
 8007616:	426d      	negs	r5, r5
 8007618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800761c:	4859      	ldr	r0, [pc, #356]	@ (8007784 <_printf_i+0x238>)
 800761e:	230a      	movs	r3, #10
 8007620:	e011      	b.n	8007646 <_printf_i+0xfa>
 8007622:	6821      	ldr	r1, [r4, #0]
 8007624:	6833      	ldr	r3, [r6, #0]
 8007626:	0608      	lsls	r0, r1, #24
 8007628:	f853 5b04 	ldr.w	r5, [r3], #4
 800762c:	d402      	bmi.n	8007634 <_printf_i+0xe8>
 800762e:	0649      	lsls	r1, r1, #25
 8007630:	bf48      	it	mi
 8007632:	b2ad      	uxthmi	r5, r5
 8007634:	2f6f      	cmp	r7, #111	@ 0x6f
 8007636:	4853      	ldr	r0, [pc, #332]	@ (8007784 <_printf_i+0x238>)
 8007638:	6033      	str	r3, [r6, #0]
 800763a:	bf14      	ite	ne
 800763c:	230a      	movne	r3, #10
 800763e:	2308      	moveq	r3, #8
 8007640:	2100      	movs	r1, #0
 8007642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007646:	6866      	ldr	r6, [r4, #4]
 8007648:	60a6      	str	r6, [r4, #8]
 800764a:	2e00      	cmp	r6, #0
 800764c:	bfa2      	ittt	ge
 800764e:	6821      	ldrge	r1, [r4, #0]
 8007650:	f021 0104 	bicge.w	r1, r1, #4
 8007654:	6021      	strge	r1, [r4, #0]
 8007656:	b90d      	cbnz	r5, 800765c <_printf_i+0x110>
 8007658:	2e00      	cmp	r6, #0
 800765a:	d04b      	beq.n	80076f4 <_printf_i+0x1a8>
 800765c:	4616      	mov	r6, r2
 800765e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007662:	fb03 5711 	mls	r7, r3, r1, r5
 8007666:	5dc7      	ldrb	r7, [r0, r7]
 8007668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800766c:	462f      	mov	r7, r5
 800766e:	42bb      	cmp	r3, r7
 8007670:	460d      	mov	r5, r1
 8007672:	d9f4      	bls.n	800765e <_printf_i+0x112>
 8007674:	2b08      	cmp	r3, #8
 8007676:	d10b      	bne.n	8007690 <_printf_i+0x144>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	07df      	lsls	r7, r3, #31
 800767c:	d508      	bpl.n	8007690 <_printf_i+0x144>
 800767e:	6923      	ldr	r3, [r4, #16]
 8007680:	6861      	ldr	r1, [r4, #4]
 8007682:	4299      	cmp	r1, r3
 8007684:	bfde      	ittt	le
 8007686:	2330      	movle	r3, #48	@ 0x30
 8007688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800768c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007690:	1b92      	subs	r2, r2, r6
 8007692:	6122      	str	r2, [r4, #16]
 8007694:	f8cd a000 	str.w	sl, [sp]
 8007698:	464b      	mov	r3, r9
 800769a:	aa03      	add	r2, sp, #12
 800769c:	4621      	mov	r1, r4
 800769e:	4640      	mov	r0, r8
 80076a0:	f7ff fee6 	bl	8007470 <_printf_common>
 80076a4:	3001      	adds	r0, #1
 80076a6:	d14a      	bne.n	800773e <_printf_i+0x1f2>
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ac:	b004      	add	sp, #16
 80076ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	f043 0320 	orr.w	r3, r3, #32
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	4833      	ldr	r0, [pc, #204]	@ (8007788 <_printf_i+0x23c>)
 80076bc:	2778      	movs	r7, #120	@ 0x78
 80076be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	6831      	ldr	r1, [r6, #0]
 80076c6:	061f      	lsls	r7, r3, #24
 80076c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80076cc:	d402      	bmi.n	80076d4 <_printf_i+0x188>
 80076ce:	065f      	lsls	r7, r3, #25
 80076d0:	bf48      	it	mi
 80076d2:	b2ad      	uxthmi	r5, r5
 80076d4:	6031      	str	r1, [r6, #0]
 80076d6:	07d9      	lsls	r1, r3, #31
 80076d8:	bf44      	itt	mi
 80076da:	f043 0320 	orrmi.w	r3, r3, #32
 80076de:	6023      	strmi	r3, [r4, #0]
 80076e0:	b11d      	cbz	r5, 80076ea <_printf_i+0x19e>
 80076e2:	2310      	movs	r3, #16
 80076e4:	e7ac      	b.n	8007640 <_printf_i+0xf4>
 80076e6:	4827      	ldr	r0, [pc, #156]	@ (8007784 <_printf_i+0x238>)
 80076e8:	e7e9      	b.n	80076be <_printf_i+0x172>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	f023 0320 	bic.w	r3, r3, #32
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	e7f6      	b.n	80076e2 <_printf_i+0x196>
 80076f4:	4616      	mov	r6, r2
 80076f6:	e7bd      	b.n	8007674 <_printf_i+0x128>
 80076f8:	6833      	ldr	r3, [r6, #0]
 80076fa:	6825      	ldr	r5, [r4, #0]
 80076fc:	6961      	ldr	r1, [r4, #20]
 80076fe:	1d18      	adds	r0, r3, #4
 8007700:	6030      	str	r0, [r6, #0]
 8007702:	062e      	lsls	r6, r5, #24
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	d501      	bpl.n	800770c <_printf_i+0x1c0>
 8007708:	6019      	str	r1, [r3, #0]
 800770a:	e002      	b.n	8007712 <_printf_i+0x1c6>
 800770c:	0668      	lsls	r0, r5, #25
 800770e:	d5fb      	bpl.n	8007708 <_printf_i+0x1bc>
 8007710:	8019      	strh	r1, [r3, #0]
 8007712:	2300      	movs	r3, #0
 8007714:	6123      	str	r3, [r4, #16]
 8007716:	4616      	mov	r6, r2
 8007718:	e7bc      	b.n	8007694 <_printf_i+0x148>
 800771a:	6833      	ldr	r3, [r6, #0]
 800771c:	1d1a      	adds	r2, r3, #4
 800771e:	6032      	str	r2, [r6, #0]
 8007720:	681e      	ldr	r6, [r3, #0]
 8007722:	6862      	ldr	r2, [r4, #4]
 8007724:	2100      	movs	r1, #0
 8007726:	4630      	mov	r0, r6
 8007728:	f7f8 fd92 	bl	8000250 <memchr>
 800772c:	b108      	cbz	r0, 8007732 <_printf_i+0x1e6>
 800772e:	1b80      	subs	r0, r0, r6
 8007730:	6060      	str	r0, [r4, #4]
 8007732:	6863      	ldr	r3, [r4, #4]
 8007734:	6123      	str	r3, [r4, #16]
 8007736:	2300      	movs	r3, #0
 8007738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773c:	e7aa      	b.n	8007694 <_printf_i+0x148>
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	4632      	mov	r2, r6
 8007742:	4649      	mov	r1, r9
 8007744:	4640      	mov	r0, r8
 8007746:	47d0      	blx	sl
 8007748:	3001      	adds	r0, #1
 800774a:	d0ad      	beq.n	80076a8 <_printf_i+0x15c>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	079b      	lsls	r3, r3, #30
 8007750:	d413      	bmi.n	800777a <_printf_i+0x22e>
 8007752:	68e0      	ldr	r0, [r4, #12]
 8007754:	9b03      	ldr	r3, [sp, #12]
 8007756:	4298      	cmp	r0, r3
 8007758:	bfb8      	it	lt
 800775a:	4618      	movlt	r0, r3
 800775c:	e7a6      	b.n	80076ac <_printf_i+0x160>
 800775e:	2301      	movs	r3, #1
 8007760:	4632      	mov	r2, r6
 8007762:	4649      	mov	r1, r9
 8007764:	4640      	mov	r0, r8
 8007766:	47d0      	blx	sl
 8007768:	3001      	adds	r0, #1
 800776a:	d09d      	beq.n	80076a8 <_printf_i+0x15c>
 800776c:	3501      	adds	r5, #1
 800776e:	68e3      	ldr	r3, [r4, #12]
 8007770:	9903      	ldr	r1, [sp, #12]
 8007772:	1a5b      	subs	r3, r3, r1
 8007774:	42ab      	cmp	r3, r5
 8007776:	dcf2      	bgt.n	800775e <_printf_i+0x212>
 8007778:	e7eb      	b.n	8007752 <_printf_i+0x206>
 800777a:	2500      	movs	r5, #0
 800777c:	f104 0619 	add.w	r6, r4, #25
 8007780:	e7f5      	b.n	800776e <_printf_i+0x222>
 8007782:	bf00      	nop
 8007784:	08008e06 	.word	0x08008e06
 8007788:	08008e17 	.word	0x08008e17

0800778c <__sflush_r>:
 800778c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007794:	0716      	lsls	r6, r2, #28
 8007796:	4605      	mov	r5, r0
 8007798:	460c      	mov	r4, r1
 800779a:	d454      	bmi.n	8007846 <__sflush_r+0xba>
 800779c:	684b      	ldr	r3, [r1, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dc02      	bgt.n	80077a8 <__sflush_r+0x1c>
 80077a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	dd48      	ble.n	800783a <__sflush_r+0xae>
 80077a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077aa:	2e00      	cmp	r6, #0
 80077ac:	d045      	beq.n	800783a <__sflush_r+0xae>
 80077ae:	2300      	movs	r3, #0
 80077b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077b4:	682f      	ldr	r7, [r5, #0]
 80077b6:	6a21      	ldr	r1, [r4, #32]
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	d030      	beq.n	800781e <__sflush_r+0x92>
 80077bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	0759      	lsls	r1, r3, #29
 80077c2:	d505      	bpl.n	80077d0 <__sflush_r+0x44>
 80077c4:	6863      	ldr	r3, [r4, #4]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077ca:	b10b      	cbz	r3, 80077d0 <__sflush_r+0x44>
 80077cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077ce:	1ad2      	subs	r2, r2, r3
 80077d0:	2300      	movs	r3, #0
 80077d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077d4:	6a21      	ldr	r1, [r4, #32]
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b0      	blx	r6
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	d106      	bne.n	80077ee <__sflush_r+0x62>
 80077e0:	6829      	ldr	r1, [r5, #0]
 80077e2:	291d      	cmp	r1, #29
 80077e4:	d82b      	bhi.n	800783e <__sflush_r+0xb2>
 80077e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007890 <__sflush_r+0x104>)
 80077e8:	410a      	asrs	r2, r1
 80077ea:	07d6      	lsls	r6, r2, #31
 80077ec:	d427      	bmi.n	800783e <__sflush_r+0xb2>
 80077ee:	2200      	movs	r2, #0
 80077f0:	6062      	str	r2, [r4, #4]
 80077f2:	04d9      	lsls	r1, r3, #19
 80077f4:	6922      	ldr	r2, [r4, #16]
 80077f6:	6022      	str	r2, [r4, #0]
 80077f8:	d504      	bpl.n	8007804 <__sflush_r+0x78>
 80077fa:	1c42      	adds	r2, r0, #1
 80077fc:	d101      	bne.n	8007802 <__sflush_r+0x76>
 80077fe:	682b      	ldr	r3, [r5, #0]
 8007800:	b903      	cbnz	r3, 8007804 <__sflush_r+0x78>
 8007802:	6560      	str	r0, [r4, #84]	@ 0x54
 8007804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007806:	602f      	str	r7, [r5, #0]
 8007808:	b1b9      	cbz	r1, 800783a <__sflush_r+0xae>
 800780a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800780e:	4299      	cmp	r1, r3
 8007810:	d002      	beq.n	8007818 <__sflush_r+0x8c>
 8007812:	4628      	mov	r0, r5
 8007814:	f7ff fb48 	bl	8006ea8 <_free_r>
 8007818:	2300      	movs	r3, #0
 800781a:	6363      	str	r3, [r4, #52]	@ 0x34
 800781c:	e00d      	b.n	800783a <__sflush_r+0xae>
 800781e:	2301      	movs	r3, #1
 8007820:	4628      	mov	r0, r5
 8007822:	47b0      	blx	r6
 8007824:	4602      	mov	r2, r0
 8007826:	1c50      	adds	r0, r2, #1
 8007828:	d1c9      	bne.n	80077be <__sflush_r+0x32>
 800782a:	682b      	ldr	r3, [r5, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0c6      	beq.n	80077be <__sflush_r+0x32>
 8007830:	2b1d      	cmp	r3, #29
 8007832:	d001      	beq.n	8007838 <__sflush_r+0xac>
 8007834:	2b16      	cmp	r3, #22
 8007836:	d11e      	bne.n	8007876 <__sflush_r+0xea>
 8007838:	602f      	str	r7, [r5, #0]
 800783a:	2000      	movs	r0, #0
 800783c:	e022      	b.n	8007884 <__sflush_r+0xf8>
 800783e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007842:	b21b      	sxth	r3, r3
 8007844:	e01b      	b.n	800787e <__sflush_r+0xf2>
 8007846:	690f      	ldr	r7, [r1, #16]
 8007848:	2f00      	cmp	r7, #0
 800784a:	d0f6      	beq.n	800783a <__sflush_r+0xae>
 800784c:	0793      	lsls	r3, r2, #30
 800784e:	680e      	ldr	r6, [r1, #0]
 8007850:	bf08      	it	eq
 8007852:	694b      	ldreq	r3, [r1, #20]
 8007854:	600f      	str	r7, [r1, #0]
 8007856:	bf18      	it	ne
 8007858:	2300      	movne	r3, #0
 800785a:	eba6 0807 	sub.w	r8, r6, r7
 800785e:	608b      	str	r3, [r1, #8]
 8007860:	f1b8 0f00 	cmp.w	r8, #0
 8007864:	dde9      	ble.n	800783a <__sflush_r+0xae>
 8007866:	6a21      	ldr	r1, [r4, #32]
 8007868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800786a:	4643      	mov	r3, r8
 800786c:	463a      	mov	r2, r7
 800786e:	4628      	mov	r0, r5
 8007870:	47b0      	blx	r6
 8007872:	2800      	cmp	r0, #0
 8007874:	dc08      	bgt.n	8007888 <__sflush_r+0xfc>
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007888:	4407      	add	r7, r0
 800788a:	eba8 0800 	sub.w	r8, r8, r0
 800788e:	e7e7      	b.n	8007860 <__sflush_r+0xd4>
 8007890:	dfbffffe 	.word	0xdfbffffe

08007894 <_fflush_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	690b      	ldr	r3, [r1, #16]
 8007898:	4605      	mov	r5, r0
 800789a:	460c      	mov	r4, r1
 800789c:	b913      	cbnz	r3, 80078a4 <_fflush_r+0x10>
 800789e:	2500      	movs	r5, #0
 80078a0:	4628      	mov	r0, r5
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	b118      	cbz	r0, 80078ae <_fflush_r+0x1a>
 80078a6:	6a03      	ldr	r3, [r0, #32]
 80078a8:	b90b      	cbnz	r3, 80078ae <_fflush_r+0x1a>
 80078aa:	f7fe ff4f 	bl	800674c <__sinit>
 80078ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f3      	beq.n	800789e <_fflush_r+0xa>
 80078b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078b8:	07d0      	lsls	r0, r2, #31
 80078ba:	d404      	bmi.n	80078c6 <_fflush_r+0x32>
 80078bc:	0599      	lsls	r1, r3, #22
 80078be:	d402      	bmi.n	80078c6 <_fflush_r+0x32>
 80078c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078c2:	f7ff faba 	bl	8006e3a <__retarget_lock_acquire_recursive>
 80078c6:	4628      	mov	r0, r5
 80078c8:	4621      	mov	r1, r4
 80078ca:	f7ff ff5f 	bl	800778c <__sflush_r>
 80078ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078d0:	07da      	lsls	r2, r3, #31
 80078d2:	4605      	mov	r5, r0
 80078d4:	d4e4      	bmi.n	80078a0 <_fflush_r+0xc>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	059b      	lsls	r3, r3, #22
 80078da:	d4e1      	bmi.n	80078a0 <_fflush_r+0xc>
 80078dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078de:	f7ff faad 	bl	8006e3c <__retarget_lock_release_recursive>
 80078e2:	e7dd      	b.n	80078a0 <_fflush_r+0xc>

080078e4 <fiprintf>:
 80078e4:	b40e      	push	{r1, r2, r3}
 80078e6:	b503      	push	{r0, r1, lr}
 80078e8:	4601      	mov	r1, r0
 80078ea:	ab03      	add	r3, sp, #12
 80078ec:	4805      	ldr	r0, [pc, #20]	@ (8007904 <fiprintf+0x20>)
 80078ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f2:	6800      	ldr	r0, [r0, #0]
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	f7ff fca3 	bl	8007240 <_vfiprintf_r>
 80078fa:	b002      	add	sp, #8
 80078fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007900:	b003      	add	sp, #12
 8007902:	4770      	bx	lr
 8007904:	20000070 	.word	0x20000070

08007908 <__swhatbuf_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	460c      	mov	r4, r1
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	2900      	cmp	r1, #0
 8007912:	b096      	sub	sp, #88	@ 0x58
 8007914:	4615      	mov	r5, r2
 8007916:	461e      	mov	r6, r3
 8007918:	da0d      	bge.n	8007936 <__swhatbuf_r+0x2e>
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007920:	f04f 0100 	mov.w	r1, #0
 8007924:	bf14      	ite	ne
 8007926:	2340      	movne	r3, #64	@ 0x40
 8007928:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800792c:	2000      	movs	r0, #0
 800792e:	6031      	str	r1, [r6, #0]
 8007930:	602b      	str	r3, [r5, #0]
 8007932:	b016      	add	sp, #88	@ 0x58
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	466a      	mov	r2, sp
 8007938:	f000 f862 	bl	8007a00 <_fstat_r>
 800793c:	2800      	cmp	r0, #0
 800793e:	dbec      	blt.n	800791a <__swhatbuf_r+0x12>
 8007940:	9901      	ldr	r1, [sp, #4]
 8007942:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007946:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800794a:	4259      	negs	r1, r3
 800794c:	4159      	adcs	r1, r3
 800794e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007952:	e7eb      	b.n	800792c <__swhatbuf_r+0x24>

08007954 <__smakebuf_r>:
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007958:	079d      	lsls	r5, r3, #30
 800795a:	4606      	mov	r6, r0
 800795c:	460c      	mov	r4, r1
 800795e:	d507      	bpl.n	8007970 <__smakebuf_r+0x1c>
 8007960:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	6123      	str	r3, [r4, #16]
 8007968:	2301      	movs	r3, #1
 800796a:	6163      	str	r3, [r4, #20]
 800796c:	b003      	add	sp, #12
 800796e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007970:	ab01      	add	r3, sp, #4
 8007972:	466a      	mov	r2, sp
 8007974:	f7ff ffc8 	bl	8007908 <__swhatbuf_r>
 8007978:	9f00      	ldr	r7, [sp, #0]
 800797a:	4605      	mov	r5, r0
 800797c:	4639      	mov	r1, r7
 800797e:	4630      	mov	r0, r6
 8007980:	f7fe fdcc 	bl	800651c <_malloc_r>
 8007984:	b948      	cbnz	r0, 800799a <__smakebuf_r+0x46>
 8007986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800798a:	059a      	lsls	r2, r3, #22
 800798c:	d4ee      	bmi.n	800796c <__smakebuf_r+0x18>
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	f043 0302 	orr.w	r3, r3, #2
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	e7e2      	b.n	8007960 <__smakebuf_r+0xc>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	6020      	str	r0, [r4, #0]
 800799e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079aa:	b15b      	cbz	r3, 80079c4 <__smakebuf_r+0x70>
 80079ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 f837 	bl	8007a24 <_isatty_r>
 80079b6:	b128      	cbz	r0, 80079c4 <__smakebuf_r+0x70>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	431d      	orrs	r5, r3
 80079c8:	81a5      	strh	r5, [r4, #12]
 80079ca:	e7cf      	b.n	800796c <__smakebuf_r+0x18>

080079cc <memmove>:
 80079cc:	4288      	cmp	r0, r1
 80079ce:	b510      	push	{r4, lr}
 80079d0:	eb01 0402 	add.w	r4, r1, r2
 80079d4:	d902      	bls.n	80079dc <memmove+0x10>
 80079d6:	4284      	cmp	r4, r0
 80079d8:	4623      	mov	r3, r4
 80079da:	d807      	bhi.n	80079ec <memmove+0x20>
 80079dc:	1e43      	subs	r3, r0, #1
 80079de:	42a1      	cmp	r1, r4
 80079e0:	d008      	beq.n	80079f4 <memmove+0x28>
 80079e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ea:	e7f8      	b.n	80079de <memmove+0x12>
 80079ec:	4402      	add	r2, r0
 80079ee:	4601      	mov	r1, r0
 80079f0:	428a      	cmp	r2, r1
 80079f2:	d100      	bne.n	80079f6 <memmove+0x2a>
 80079f4:	bd10      	pop	{r4, pc}
 80079f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079fe:	e7f7      	b.n	80079f0 <memmove+0x24>

08007a00 <_fstat_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d07      	ldr	r5, [pc, #28]	@ (8007a20 <_fstat_r+0x20>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f7f9 f97b 	bl	8000d08 <_fstat>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d102      	bne.n	8007a1c <_fstat_r+0x1c>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	b103      	cbz	r3, 8007a1c <_fstat_r+0x1c>
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
 8007a1e:	bf00      	nop
 8007a20:	200010f8 	.word	0x200010f8

08007a24 <_isatty_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d06      	ldr	r5, [pc, #24]	@ (8007a40 <_isatty_r+0x1c>)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	f7f9 f97a 	bl	8000d28 <_isatty>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_isatty_r+0x1a>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_isatty_r+0x1a>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	200010f8 	.word	0x200010f8

08007a44 <abort>:
 8007a44:	b508      	push	{r3, lr}
 8007a46:	2006      	movs	r0, #6
 8007a48:	f000 f85a 	bl	8007b00 <raise>
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	f7f9 f90b 	bl	8000c68 <_exit>

08007a52 <_realloc_r>:
 8007a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a56:	4680      	mov	r8, r0
 8007a58:	4615      	mov	r5, r2
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	b921      	cbnz	r1, 8007a68 <_realloc_r+0x16>
 8007a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	4611      	mov	r1, r2
 8007a64:	f7fe bd5a 	b.w	800651c <_malloc_r>
 8007a68:	b92a      	cbnz	r2, 8007a76 <_realloc_r+0x24>
 8007a6a:	f7ff fa1d 	bl	8006ea8 <_free_r>
 8007a6e:	2400      	movs	r4, #0
 8007a70:	4620      	mov	r0, r4
 8007a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a76:	f000 f85f 	bl	8007b38 <_malloc_usable_size_r>
 8007a7a:	4285      	cmp	r5, r0
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	d802      	bhi.n	8007a86 <_realloc_r+0x34>
 8007a80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007a84:	d8f4      	bhi.n	8007a70 <_realloc_r+0x1e>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4640      	mov	r0, r8
 8007a8a:	f7fe fd47 	bl	800651c <_malloc_r>
 8007a8e:	4607      	mov	r7, r0
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d0ec      	beq.n	8007a6e <_realloc_r+0x1c>
 8007a94:	42b5      	cmp	r5, r6
 8007a96:	462a      	mov	r2, r5
 8007a98:	4621      	mov	r1, r4
 8007a9a:	bf28      	it	cs
 8007a9c:	4632      	movcs	r2, r6
 8007a9e:	f7ff f9d6 	bl	8006e4e <memcpy>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	f7ff f9ff 	bl	8006ea8 <_free_r>
 8007aaa:	463c      	mov	r4, r7
 8007aac:	e7e0      	b.n	8007a70 <_realloc_r+0x1e>

08007aae <_raise_r>:
 8007aae:	291f      	cmp	r1, #31
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	d904      	bls.n	8007ac2 <_raise_r+0x14>
 8007ab8:	2316      	movs	r3, #22
 8007aba:	6003      	str	r3, [r0, #0]
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
 8007ac2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007ac4:	b112      	cbz	r2, 8007acc <_raise_r+0x1e>
 8007ac6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aca:	b94b      	cbnz	r3, 8007ae0 <_raise_r+0x32>
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 f831 	bl	8007b34 <_getpid_r>
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4601      	mov	r1, r0
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007adc:	f000 b818 	b.w	8007b10 <_kill_r>
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d00a      	beq.n	8007afa <_raise_r+0x4c>
 8007ae4:	1c59      	adds	r1, r3, #1
 8007ae6:	d103      	bne.n	8007af0 <_raise_r+0x42>
 8007ae8:	2316      	movs	r3, #22
 8007aea:	6003      	str	r3, [r0, #0]
 8007aec:	2001      	movs	r0, #1
 8007aee:	e7e7      	b.n	8007ac0 <_raise_r+0x12>
 8007af0:	2100      	movs	r1, #0
 8007af2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007af6:	4620      	mov	r0, r4
 8007af8:	4798      	blx	r3
 8007afa:	2000      	movs	r0, #0
 8007afc:	e7e0      	b.n	8007ac0 <_raise_r+0x12>
	...

08007b00 <raise>:
 8007b00:	4b02      	ldr	r3, [pc, #8]	@ (8007b0c <raise+0xc>)
 8007b02:	4601      	mov	r1, r0
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	f7ff bfd2 	b.w	8007aae <_raise_r>
 8007b0a:	bf00      	nop
 8007b0c:	20000070 	.word	0x20000070

08007b10 <_kill_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d07      	ldr	r5, [pc, #28]	@ (8007b30 <_kill_r+0x20>)
 8007b14:	2300      	movs	r3, #0
 8007b16:	4604      	mov	r4, r0
 8007b18:	4608      	mov	r0, r1
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	602b      	str	r3, [r5, #0]
 8007b1e:	f7f9 f893 	bl	8000c48 <_kill>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	d102      	bne.n	8007b2c <_kill_r+0x1c>
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	b103      	cbz	r3, 8007b2c <_kill_r+0x1c>
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	bd38      	pop	{r3, r4, r5, pc}
 8007b2e:	bf00      	nop
 8007b30:	200010f8 	.word	0x200010f8

08007b34 <_getpid_r>:
 8007b34:	f7f9 b880 	b.w	8000c38 <_getpid>

08007b38 <_malloc_usable_size_r>:
 8007b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b3c:	1f18      	subs	r0, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfbc      	itt	lt
 8007b42:	580b      	ldrlt	r3, [r1, r0]
 8007b44:	18c0      	addlt	r0, r0, r3
 8007b46:	4770      	bx	lr

08007b48 <_init>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr

08007b54 <_fini>:
 8007b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b56:	bf00      	nop
 8007b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5a:	bc08      	pop	{r3}
 8007b5c:	469e      	mov	lr, r3
 8007b5e:	4770      	bx	lr
