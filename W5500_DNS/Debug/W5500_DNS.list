
W5500_DNS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000672c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b84  08006b84  000080c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006b84  08006b84  00007b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b8c  08006b8c  000080c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b8c  08006b8c  00007b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b90  08006b90  00007b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08006b94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200000c8  08006c5c  000080c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08006c5c  0000846c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119ff  00000000  00000000  000080f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2f  00000000  00000000  00019af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba9  00000000  00000000  0001d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270b5  00000000  00000000  0001e1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001284d  00000000  00000000  000452a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f172f  00000000  00000000  00057af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000461c  00000000  00000000  00149268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0014d884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000c8 	.word	0x200000c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080068f4 	.word	0x080068f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000cc 	.word	0x200000cc
 800021c:	080068f4 	.word	0x080068f4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005c6:	f002 fec0 	bl	800334a <HAL_Init>

	/* USER CODE BEGIN Init */
	setbuf(stdout, NULL);
 80005ca:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <main+0xbc>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 fa46 	bl	8005a64 <setbuf>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d8:	f000 f864 	bl	80006a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005dc:	f000 f93e 	bl	800085c <MX_GPIO_Init>
	MX_SPI1_Init();
 80005e0:	f000 f8aa 	bl	8000738 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80005e4:	f000 f8ee 	bl	80007c4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	W5500Init();
 80005e8:	f002 f886 	bl	80026f8 <W5500Init>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO2);
 80005ec:	4924      	ldr	r1, [pc, #144]	@ (8000680 <main+0xc0>)
 80005ee:	2000      	movs	r0, #0
 80005f0:	f002 fa9c 	bl	8002b2c <ctlnetwork>

	wiz_PhyConf phyconf;

	phyconf.by = PHY_CONFBY_SW;
 80005f4:	2301      	movs	r3, #1
 80005f6:	703b      	strb	r3, [r7, #0]
	phyconf.duplex = PHY_DUPLEX_FULL;
 80005f8:	2301      	movs	r3, #1
 80005fa:	70fb      	strb	r3, [r7, #3]
	phyconf.speed = PHY_SPEED_10;
 80005fc:	2300      	movs	r3, #0
 80005fe:	70bb      	strb	r3, [r7, #2]
	phyconf.mode = PHY_MODE_AUTONEGO;
 8000600:	2301      	movs	r3, #1
 8000602:	707b      	strb	r3, [r7, #1]

	ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	200a      	movs	r0, #10
 800060a:	f002 f9af 	bl	800296c <ctlwizchip>

	PHYStatusCheck();
 800060e:	f000 f997 	bl	8000940 <PHYStatusCheck>
	PrintPHYConf();
 8000612:	f000 f9bb 	bl	800098c <PrintPHYConf>
	/* USER CODE END 2 */

	printf("\r\n***************** W5500 DNS Example Program! ******************\r\n");
 8000616:	481b      	ldr	r0, [pc, #108]	@ (8000684 <main+0xc4>)
 8000618:	f005 fa1c 	bl	8005a54 <puts>
	DNS_init(SOCKET_ID_FOR_DNS, dns_buff);
 800061c:	491a      	ldr	r1, [pc, #104]	@ (8000688 <main+0xc8>)
 800061e:	2006      	movs	r0, #6
 8000620:	f000 ff76 	bl	8001510 <DNS_init>

	printf("Resolving IP of %s\r\n ", broker_name);
 8000624:	4919      	ldr	r1, [pc, #100]	@ (800068c <main+0xcc>)
 8000626:	481a      	ldr	r0, [pc, #104]	@ (8000690 <main+0xd0>)
 8000628:	f005 f9ac 	bl	8005984 <iprintf>

	result=DNS_run(dns_ip, broker_name, broker_ip);
 800062c:	4a19      	ldr	r2, [pc, #100]	@ (8000694 <main+0xd4>)
 800062e:	4917      	ldr	r1, [pc, #92]	@ (800068c <main+0xcc>)
 8000630:	4819      	ldr	r0, [pc, #100]	@ (8000698 <main+0xd8>)
 8000632:	f000 ff89 	bl	8001548 <DNS_run>
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]

	if(result!=1)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d004      	beq.n	800064a <main+0x8a>
	{
	  printf("FAILED!");
 8000640:	4816      	ldr	r0, [pc, #88]	@ (800069c <main+0xdc>)
 8000642:	f005 f99f 	bl	8005984 <iprintf>

	  while(1);
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <main+0x86>
	}

	printf("Success! The IP of %s is %d.%d.%d.%d", broker_name, broker_ip[0], broker_ip[1], broker_ip[2], broker_ip[3]);
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <main+0xd4>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4619      	mov	r1, r3
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <main+0xd4>)
 8000652:	785b      	ldrb	r3, [r3, #1]
 8000654:	4618      	mov	r0, r3
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <main+0xd4>)
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	461a      	mov	r2, r3
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <main+0xd4>)
 800065e:	78db      	ldrb	r3, [r3, #3]
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	9200      	str	r2, [sp, #0]
 8000664:	4603      	mov	r3, r0
 8000666:	460a      	mov	r2, r1
 8000668:	4908      	ldr	r1, [pc, #32]	@ (800068c <main+0xcc>)
 800066a:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <main+0xe0>)
 800066c:	f005 f98a 	bl	8005984 <iprintf>


	while (1)
	{
	  HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000674:	f002 feda 	bl	800342c <HAL_Delay>
 8000678:	e7fa      	b.n	8000670 <main+0xb0>
 800067a:	bf00      	nop
 800067c:	20000078 	.word	0x20000078
 8000680:	20000000 	.word	0x20000000
 8000684:	0800690c 	.word	0x0800690c
 8000688:	200001dc 	.word	0x200001dc
 800068c:	2000001c 	.word	0x2000001c
 8000690:	08006950 	.word	0x08006950
 8000694:	200002dc 	.word	0x200002dc
 8000698:	20000018 	.word	0x20000018
 800069c:	08006968 	.word	0x08006968
 80006a0:	08006970 	.word	0x08006970

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	2238      	movs	r2, #56	@ 0x38
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fb6a 	bl	8005d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ca:	f003 f94f 	bl	800396c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006dc:	2303      	movs	r3, #3
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 f9eb 	bl	8003ad4 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000704:	f000 f986 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2303      	movs	r3, #3
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2101      	movs	r1, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fce9 	bl	80040f8 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800072c:	f000 f972 	bl	8000a14 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	@ 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_SPI1_Init+0x84>)
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <MX_SPI1_Init+0x88>)
 8000740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000742:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_SPI1_Init+0x84>)
 8000744:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_SPI1_Init+0x84>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_SPI1_Init+0x84>)
 8000752:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000756:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_SPI1_Init+0x84>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_SPI1_Init+0x84>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_SPI1_Init+0x84>)
 8000766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800076a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_SPI1_Init+0x84>)
 800076e:	2208      	movs	r2, #8
 8000770:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_SPI1_Init+0x84>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_SPI1_Init+0x84>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_SPI1_Init+0x84>)
 8000780:	2200      	movs	r2, #0
 8000782:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000784:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <MX_SPI1_Init+0x84>)
 8000786:	2207      	movs	r2, #7
 8000788:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_SPI1_Init+0x84>)
 800078c:	2200      	movs	r2, #0
 800078e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_SPI1_Init+0x84>)
 8000792:	2208      	movs	r2, #8
 8000794:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000796:	4809      	ldr	r0, [pc, #36]	@ (80007bc <MX_SPI1_Init+0x84>)
 8000798:	f004 f918 	bl	80049cc <HAL_SPI_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007a2:	f000 f937 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <MX_SPI1_Init+0x84>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <MX_SPI1_Init+0x84>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007b4:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000e4 	.word	0x200000e4
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 80007ca:	4a23      	ldr	r2, [pc, #140]	@ (8000858 <MX_USART2_UART_Init+0x94>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ce:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 80007d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080c:	4811      	ldr	r0, [pc, #68]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 800080e:	f004 f988 	bl	8004b22 <HAL_UART_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000818:	f000 f8fc 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	480d      	ldr	r0, [pc, #52]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 8000820:	f004 ff24 	bl	800566c <HAL_UARTEx_SetTxFifoThreshold>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800082a:	f000 f8f3 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4808      	ldr	r0, [pc, #32]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 8000832:	f004 ff59 	bl	80056e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800083c:	f000 f8ea 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_USART2_UART_Init+0x90>)
 8000842:	f004 feda 	bl	80055fa <HAL_UARTEx_DisableFifoMode>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 f8e2 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000148 	.word	0x20000148
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_GPIO_Init+0x90>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	4a1d      	ldr	r2, [pc, #116]	@ (80008ec <MX_GPIO_Init+0x90>)
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_GPIO_Init+0x90>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_GPIO_Init+0x90>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <MX_GPIO_Init+0x90>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_GPIO_Init+0x90>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_GPIO_Init+0x90>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a11      	ldr	r2, [pc, #68]	@ (80008ec <MX_GPIO_Init+0x90>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_GPIO_Init+0x90>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2103      	movs	r1, #3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c2:	f003 f83b 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008c6:	2303      	movs	r3, #3
 80008c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f002 feaa 	bl	8003638 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000

080008f0 <UWriteData>:

/* USER CODE BEGIN 4 */
void UWriteData(const char data)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 80008fa:	bf00      	nop
 80008fc:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <UWriteData+0x30>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	2b80      	cmp	r3, #128	@ 0x80
 8000908:	d1f8      	bne.n	80008fc <UWriteData+0xc>

	huart2.Instance->TDR=data;
 800090a:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <UWriteData+0x30>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	79fa      	ldrb	r2, [r7, #7]
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000148 	.word	0x20000148

08000924 <__io_putchar>:

int __io_putchar(int ch)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ffdd 	bl	80008f0 <UWriteData>
	return ch;
 8000936:	687b      	ldr	r3, [r7, #4]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
	uint8_t tmp;


	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 8000946:	480e      	ldr	r0, [pc, #56]	@ (8000980 <PHYStatusCheck+0x40>)
 8000948:	f005 f81c 	bl	8005984 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	4619      	mov	r1, r3
 8000950:	200f      	movs	r0, #15
 8000952:	f002 f80b 	bl	800296c <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d106      	bne.n	800096a <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 800095c:	4809      	ldr	r0, [pc, #36]	@ (8000984 <PHYStatusCheck+0x44>)
 800095e:	f005 f811 	bl	8005984 <iprintf>
			HAL_Delay(1500);
 8000962:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000966:	f002 fd61 	bl	800342c <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0ea      	beq.n	8000946 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <PHYStatusCheck+0x48>)
 8000972:	f005 f807 	bl	8005984 <iprintf>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	08006998 	.word	0x08006998
 8000984:	080069c0 	.word	0x080069c0
 8000988:	080069d4 	.word	0x080069d4

0800098c <PrintPHYConf>:

void PrintPHYConf(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4619      	mov	r1, r3
 8000996:	200b      	movs	r0, #11
 8000998:	f001 ffe8 	bl	800296c <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 800099c:	793b      	ldrb	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 80009a2:	4814      	ldr	r0, [pc, #80]	@ (80009f4 <PrintPHYConf+0x68>)
 80009a4:	f004 ffee 	bl	8005984 <iprintf>
 80009a8:	e002      	b.n	80009b0 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 80009aa:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <PrintPHYConf+0x6c>)
 80009ac:	f004 ffea 	bl	8005984 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 80009b0:	797b      	ldrb	r3, [r7, #5]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d103      	bne.n	80009be <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 80009b6:	4811      	ldr	r0, [pc, #68]	@ (80009fc <PrintPHYConf+0x70>)
 80009b8:	f004 ffe4 	bl	8005984 <iprintf>
 80009bc:	e002      	b.n	80009c4 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 80009be:	4810      	ldr	r0, [pc, #64]	@ (8000a00 <PrintPHYConf+0x74>)
 80009c0:	f004 ffe0 	bl	8005984 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d103      	bne.n	80009d2 <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 80009ca:	480e      	ldr	r0, [pc, #56]	@ (8000a04 <PrintPHYConf+0x78>)
 80009cc:	f004 ffda 	bl	8005984 <iprintf>
 80009d0:	e002      	b.n	80009d8 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 80009d2:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <PrintPHYConf+0x7c>)
 80009d4:	f004 ffd6 	bl	8005984 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 80009d8:	79bb      	ldrb	r3, [r7, #6]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 80009de:	480b      	ldr	r0, [pc, #44]	@ (8000a0c <PrintPHYConf+0x80>)
 80009e0:	f004 ffd0 	bl	8005984 <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 80009e4:	e002      	b.n	80009ec <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 80009e6:	480a      	ldr	r0, [pc, #40]	@ (8000a10 <PrintPHYConf+0x84>)
 80009e8:	f004 ffcc 	bl	8005984 <iprintf>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	080069f0 	.word	0x080069f0
 80009f8:	08006a14 	.word	0x08006a14
 80009fc:	08006a34 	.word	0x08006a34
 8000a00:	08006a50 	.word	0x08006a50
 8000a04:	08006a70 	.word	0x08006a70
 8000a08:	08006a84 	.word	0x08006a84
 8000a0c:	08006a98 	.word	0x08006a98
 8000a10:	08006aa8 	.word	0x08006aa8

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <Error_Handler+0x8>

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a42:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a56:	f003 f82d 	bl	8003ab4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a25      	ldr	r2, [pc, #148]	@ (8000b1c <HAL_SPI_MspInit+0xb4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d144      	bne.n	8000b14 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a8a:	4b25      	ldr	r3, [pc, #148]	@ (8000b20 <HAL_SPI_MspInit+0xb8>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	4a24      	ldr	r2, [pc, #144]	@ (8000b20 <HAL_SPI_MspInit+0xb8>)
 8000a90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a96:	4b22      	ldr	r3, [pc, #136]	@ (8000b20 <HAL_SPI_MspInit+0xb8>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <HAL_SPI_MspInit+0xb8>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b20 <HAL_SPI_MspInit+0xb8>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <HAL_SPI_MspInit+0xb8>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <HAL_SPI_MspInit+0xb8>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a18      	ldr	r2, [pc, #96]	@ (8000b20 <HAL_SPI_MspInit+0xb8>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <HAL_SPI_MspInit+0xb8>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad2:	23c0      	movs	r3, #192	@ 0xc0
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af0:	f002 fda2 	bl	8003638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000af4:	2308      	movs	r3, #8
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b04:	2305      	movs	r3, #5
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <HAL_SPI_MspInit+0xbc>)
 8000b10:	f002 fd92 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48000400 	.word	0x48000400

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09e      	sub	sp, #120	@ 0x78
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2254      	movs	r2, #84	@ 0x54
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f005 f91f 	bl	8005d8c <memset>
  if(huart->Instance==USART2)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd0 <HAL_UART_MspInit+0xa8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d136      	bne.n	8000bc6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 fce3 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b70:	f7ff ff50 	bl	8000a14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b74:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <HAL_UART_MspInit+0xac>)
 8000b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b78:	4a16      	ldr	r2, [pc, #88]	@ (8000bd4 <HAL_UART_MspInit+0xac>)
 8000b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_UART_MspInit+0xac>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_UART_MspInit+0xac>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b90:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <HAL_UART_MspInit+0xac>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b98:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_UART_MspInit+0xac>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ba4:	230c      	movs	r3, #12
 8000ba6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc2:	f002 fd39 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3778      	adds	r7, #120	@ 0x78
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f002 fbde 	bl	80033f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //One second callback for DHCP Module
  static uint16_t milli_count;
  milli_count++;
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <SysTick_Handler+0x2c>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <SysTick_Handler+0x2c>)
 8000c3e:	801a      	strh	r2, [r3, #0]
  if(milli_count==1000)
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <SysTick_Handler+0x2c>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c48:	d104      	bne.n	8000c54 <SysTick_Handler+0x28>
  {
	  milli_count=0;
 8000c4a:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <SysTick_Handler+0x2c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	801a      	strh	r2, [r3, #0]
	  DNS_time_handler();//for DNS interface
 8000c50:	f000 fd00 	bl	8001654 <DNS_time_handler>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200002e0 	.word	0x200002e0

08000c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI15_10_IRQn 0 */
//  BSP_PB_IRQHandler(BUTTON_USER);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	e00a      	b.n	8000c92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7c:	f3af 8000 	nop.w
 8000c80:	4601      	mov	r1, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	b2ca      	uxtb	r2, r1
 8000c8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dbf0      	blt.n	8000c7c <_read+0x12>
  }

  return len;
 8000c9a:	687b      	ldr	r3, [r7, #4]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e009      	b.n	8000cca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	60ba      	str	r2, [r7, #8]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fe30 	bl	8000924 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbf1      	blt.n	8000cb6 <_write+0x12>
  }
  return len;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_close>:

int _close(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
  return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_isatty>:

int _isatty(int file)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1c:	2301      	movs	r3, #1
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	@ (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f005 f878 	bl	8005e68 <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20020000 	.word	0x20020000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	200002e4 	.word	0x200002e4
 8000dac:	20000470 	.word	0x20000470

08000db0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	4413      	add	r3, r2
 8000df2:	81fb      	strh	r3, [r7, #14]
	return i;
 8000df4:	89fb      	ldrh	r3, [r7, #14]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b299      	uxth	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	b2ca      	uxtb	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	887a      	ldrh	r2, [r7, #2]
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	701a      	strb	r2, [r3, #0]
	return s;
 8000e2a:	687b      	ldr	r3, [r7, #4]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b08b      	sub	sp, #44	@ 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	623a      	str	r2, [r7, #32]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <parse_name+0x34>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8000e6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8000e74:	d117      	bne.n	8000ea6 <parse_name+0x6e>
		{
			if (!indirect)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <parse_name+0x4a>
				clen++;
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8000e86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8000e8e:	6a3a      	ldr	r2, [r7, #32]
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8000e9c:	6a3b      	ldr	r3, [r7, #32]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	623a      	str	r2, [r7, #32]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8000ea6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d02b      	beq.n	8000f04 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8000eba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da02      	bge.n	8000ec8 <parse_name+0x90>
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e038      	b.n	8000f3a <parse_name+0x102>

		if (!indirect) clen += slen;
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <parse_name+0xb0>
 8000ece:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8000ed6:	e007      	b.n	8000ee8 <parse_name+0xb0>
 8000ed8:	6a3a      	ldr	r2, [r7, #32]
 8000eda:	1c53      	adds	r3, r2, #1
 8000edc:	623b      	str	r3, [r7, #32]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	1c59      	adds	r1, r3, #1
 8000ee2:	6079      	str	r1, [r7, #4]
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000eea:	1e5a      	subs	r2, r3, #1
 8000eec:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f2      	bne.n	8000ed8 <parse_name+0xa0>
		*buf++ = '.';
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	222e      	movs	r2, #46	@ 0x2e
 8000efa:	701a      	strb	r2, [r3, #0]
		nseg++;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8000f02:	e7a8      	b.n	8000e56 <parse_name+0x1e>
			break;
 8000f04:	bf00      	nop
	}

	if (nseg == 0)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10a      	bne.n	8000f22 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	222e      	movs	r2, #46	@ 0x2e
 8000f14:	701a      	strb	r2, [r3, #0]
		len--;
 8000f16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	len--;
 8000f2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	3b01      	subs	r3, #1
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8000f38:	69fb      	ldr	r3, [r7, #28]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	372c      	adds	r7, #44	@ 0x2c
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b0b4      	sub	sp, #208	@ 0xd0
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8000f50:	f107 020c 	add.w	r2, r7, #12
 8000f54:	23c0      	movs	r3, #192	@ 0xc0
 8000f56:	6839      	ldr	r1, [r7, #0]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff6d 	bl	8000e38 <parse_name>
 8000f5e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 8000f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6a:	d101      	bne.n	8000f70 <dns_question+0x2a>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e00b      	b.n	8000f88 <dns_question+0x42>

	cp += len;
 8000f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	3302      	adds	r3, #2
 8000f84:	603b      	str	r3, [r7, #0]

	return cp;
 8000f86:	683b      	ldr	r3, [r7, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	37d0      	adds	r7, #208	@ 0xd0
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0b6      	sub	sp, #216	@ 0xd8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8000f9c:	f107 0210 	add.w	r2, r7, #16
 8000fa0:	23c0      	movs	r3, #192	@ 0xc0
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff ff47 	bl	8000e38 <parse_name>
 8000faa:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 8000fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb6:	d101      	bne.n	8000fbc <dns_answer+0x2c>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e0f9      	b.n	80011b0 <dns_answer+0x220>

	cp += len;
 8000fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8000fc6:	68b8      	ldr	r0, [r7, #8]
 8000fc8:	f7ff ff04 	bl	8000dd4 <get16>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	60bb      	str	r3, [r7, #8]


	switch (type)
 8000fea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000fee:	2b10      	cmp	r3, #16
 8000ff0:	f000 80da 	beq.w	80011a8 <dns_answer+0x218>
 8000ff4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000ff8:	2b10      	cmp	r3, #16
 8000ffa:	f300 80d7 	bgt.w	80011ac <dns_answer+0x21c>
 8000ffe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001002:	2b0f      	cmp	r3, #15
 8001004:	d07d      	beq.n	8001102 <dns_answer+0x172>
 8001006:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800100a:	2b0f      	cmp	r3, #15
 800100c:	f300 80ce 	bgt.w	80011ac <dns_answer+0x21c>
 8001010:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001014:	2b0c      	cmp	r3, #12
 8001016:	dc26      	bgt.n	8001066 <dns_answer+0xd6>
 8001018:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800101c:	2b00      	cmp	r3, #0
 800101e:	f340 80c5 	ble.w	80011ac <dns_answer+0x21c>
 8001022:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001026:	2201      	movs	r2, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 8001030:	401a      	ands	r2, r3
 8001032:	2a00      	cmp	r2, #0
 8001034:	bf14      	ite	ne
 8001036:	2201      	movne	r2, #1
 8001038:	2200      	moveq	r2, #0
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	2a00      	cmp	r2, #0
 800103e:	d133      	bne.n	80010a8 <dns_answer+0x118>
 8001040:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001044:	2a00      	cmp	r2, #0
 8001046:	bf14      	ite	ne
 8001048:	2201      	movne	r2, #1
 800104a:	2200      	moveq	r2, #0
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	2a00      	cmp	r2, #0
 8001050:	d170      	bne.n	8001134 <dns_answer+0x1a4>
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf14      	ite	ne
 800105a:	2301      	movne	r3, #1
 800105c:	2300      	moveq	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8001064:	e0a2      	b.n	80011ac <dns_answer+0x21c>
	switch (type)
 8001066:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800106a:	2b0d      	cmp	r3, #13
 800106c:	d032      	beq.n	80010d4 <dns_answer+0x144>
		break;
 800106e:	e09d      	b.n	80011ac <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	781a      	ldrb	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	60ba      	str	r2, [r7, #8]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	3201      	adds	r2, #1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	60ba      	str	r2, [r7, #8]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	3202      	adds	r2, #2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	3203      	adds	r2, #3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	7013      	strb	r3, [r2, #0]
		break;
 80010a6:	e082      	b.n	80011ae <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	23c0      	movs	r3, #192	@ 0xc0
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff fec1 	bl	8000e38 <parse_name>
 80010b6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80010ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c2:	d101      	bne.n	80010c8 <dns_answer+0x138>
 80010c4:	2300      	movs	r3, #0
 80010c6:	e073      	b.n	80011b0 <dns_answer+0x220>
		cp += len;
 80010c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
		break;
 80010d2:	e06c      	b.n	80011ae <dns_answer+0x21e>
		len = *cp++;
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80010e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	4413      	add	r3, r2
 80010e8:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	60ba      	str	r2, [r7, #8]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80010f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	4413      	add	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
		break;
 8001100:	e055      	b.n	80011ae <dns_answer+0x21e>
		cp += 2;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3302      	adds	r3, #2
 8001106:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8001108:	f107 0210 	add.w	r2, r7, #16
 800110c:	23c0      	movs	r3, #192	@ 0xc0
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff fe91 	bl	8000e38 <parse_name>
 8001116:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800111a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001122:	d101      	bne.n	8001128 <dns_answer+0x198>
 8001124:	2300      	movs	r3, #0
 8001126:	e043      	b.n	80011b0 <dns_answer+0x220>
		cp += len;
 8001128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	4413      	add	r3, r2
 8001130:	60bb      	str	r3, [r7, #8]
		break;
 8001132:	e03c      	b.n	80011ae <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8001134:	f107 0210 	add.w	r2, r7, #16
 8001138:	23c0      	movs	r3, #192	@ 0xc0
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff fe7b 	bl	8000e38 <parse_name>
 8001142:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8001146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114e:	d101      	bne.n	8001154 <dns_answer+0x1c4>
 8001150:	2300      	movs	r3, #0
 8001152:	e02d      	b.n	80011b0 <dns_answer+0x220>
		cp += len;
 8001154:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	4413      	add	r3, r2
 800115c:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 800115e:	f107 0210 	add.w	r2, r7, #16
 8001162:	23c0      	movs	r3, #192	@ 0xc0
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff fe66 	bl	8000e38 <parse_name>
 800116c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8001170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d101      	bne.n	800117e <dns_answer+0x1ee>
 800117a:	2300      	movs	r3, #0
 800117c:	e018      	b.n	80011b0 <dns_answer+0x220>
		cp += len;
 800117e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	4413      	add	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3304      	adds	r3, #4
 800118c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3304      	adds	r3, #4
 8001192:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3304      	adds	r3, #4
 8001198:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3304      	adds	r3, #4
 800119e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	3304      	adds	r3, #4
 80011a4:	60bb      	str	r3, [r7, #8]
		break;
 80011a6:	e002      	b.n	80011ae <dns_answer+0x21e>
		break;
 80011a8:	bf00      	nop
 80011aa:	e000      	b.n	80011ae <dns_answer+0x21e>
		break;
 80011ac:	bf00      	nop
	}

	return cp;
 80011ae:	68bb      	ldr	r3, [r7, #8]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	37d8      	adds	r7, #216	@ 0xd8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 80011c8:	2212      	movs	r2, #18
 80011ca:	2100      	movs	r1, #0
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f004 fddd 	bl	8005d8c <memset>

	pdhdr->id = get16(&msg[0]);
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff fdfe 	bl	8000dd4 <get16>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3302      	adds	r3, #2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fdf5 	bl	8000dd4 <get16>
 80011ea:	4603      	mov	r3, r0
 80011ec:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80011ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	da02      	bge.n	80011fc <parseDNSMSG+0x44>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2201      	movs	r2, #1
 80011fa:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 80011fc:	8a7b      	ldrh	r3, [r7, #18]
 80011fe:	0adb      	lsrs	r3, r3, #11
 8001200:	b29b      	uxth	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800120e:	8a7b      	ldrh	r3, [r7, #18]
 8001210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <parseDNSMSG+0x66>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2201      	movs	r2, #1
 800121c:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800121e:	8a7b      	ldrh	r3, [r7, #18]
 8001220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <parseDNSMSG+0x76>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 800122e:	8a7b      	ldrh	r3, [r7, #18]
 8001230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <parseDNSMSG+0x86>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2201      	movs	r2, #1
 800123c:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 800123e:	8a7b      	ldrh	r3, [r7, #18]
 8001240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <parseDNSMSG+0x96>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2201      	movs	r2, #1
 800124c:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 800124e:	8a7b      	ldrh	r3, [r7, #18]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	b2da      	uxtb	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3304      	adds	r3, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fdb7 	bl	8000dd4 <get16>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3306      	adds	r3, #6
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fdae 	bl	8000dd4 <get16>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3308      	adds	r3, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fda5 	bl	8000dd4 <get16>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	330a      	adds	r3, #10
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fd9c 	bl	8000dd4 <get16>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	330c      	adds	r3, #12
 80012a8:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	83fb      	strh	r3, [r7, #30]
 80012ae:	e00d      	b.n	80012cc <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 80012b0:	69b9      	ldr	r1, [r7, #24]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff fe47 	bl	8000f46 <dns_question>
 80012b8:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <parseDNSMSG+0x10e>
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	e03b      	b.n	800133e <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 80012c6:	8bfb      	ldrh	r3, [r7, #30]
 80012c8:	3301      	adds	r3, #1
 80012ca:	83fb      	strh	r3, [r7, #30]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	895b      	ldrh	r3, [r3, #10]
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3ec      	bcc.n	80012b0 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	83fb      	strh	r3, [r7, #30]
 80012da:	e00e      	b.n	80012fa <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	69b9      	ldr	r1, [r7, #24]
 80012e0:	6978      	ldr	r0, [r7, #20]
 80012e2:	f7ff fe55 	bl	8000f90 <dns_answer>
 80012e6:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <parseDNSMSG+0x13c>
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e024      	b.n	800133e <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 80012f4:	8bfb      	ldrh	r3, [r7, #30]
 80012f6:	3301      	adds	r3, #1
 80012f8:	83fb      	strh	r3, [r7, #30]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	899b      	ldrh	r3, [r3, #12]
 80012fe:	8bfa      	ldrh	r2, [r7, #30]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3eb      	bcc.n	80012dc <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	83fb      	strh	r3, [r7, #30]
 8001308:	e002      	b.n	8001310 <parseDNSMSG+0x158>
 800130a:	8bfb      	ldrh	r3, [r7, #30]
 800130c:	3301      	adds	r3, #1
 800130e:	83fb      	strh	r3, [r7, #30]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	89db      	ldrh	r3, [r3, #14]
 8001314:	8bfa      	ldrh	r2, [r7, #30]
 8001316:	429a      	cmp	r2, r3
 8001318:	d3f7      	bcc.n	800130a <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 800131a:	2300      	movs	r3, #0
 800131c:	83fb      	strh	r3, [r7, #30]
 800131e:	e002      	b.n	8001326 <parseDNSMSG+0x16e>
 8001320:	8bfb      	ldrh	r3, [r7, #30]
 8001322:	3301      	adds	r3, #1
 8001324:	83fb      	strh	r3, [r7, #30]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8a1b      	ldrh	r3, [r3, #16]
 800132a:	8bfa      	ldrh	r2, [r7, #30]
 800132c:	429a      	cmp	r2, r3
 800132e:	d3f7      	bcc.n	8001320 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	7a1b      	ldrb	r3, [r3, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <parseDNSMSG+0x184>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <parseDNSMSG+0x186>
	else return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0b8      	sub	sp, #224	@ 0xe0
 800134c:	af00      	add	r7, sp, #0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	461a      	mov	r2, r3
 8001354:	4603      	mov	r3, r0
 8001356:	81fb      	strh	r3, [r7, #14]
 8001358:	4613      	mov	r3, r2
 800135a:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 8001362:	4b57      	ldr	r3, [pc, #348]	@ (80014c0 <dns_makequery+0x178>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b55      	ldr	r3, [pc, #340]	@ (80014c0 <dns_makequery+0x178>)
 800136c:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 800136e:	4b54      	ldr	r3, [pc, #336]	@ (80014c0 <dns_makequery+0x178>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8001378:	f7ff fd43 	bl	8000e02 <put16>
 800137c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	02db      	lsls	r3, r3, #11
 8001384:	b21b      	sxth	r3, r3
 8001386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138a:	b21b      	sxth	r3, r3
 800138c:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 8001390:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8001394:	4619      	mov	r1, r3
 8001396:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800139a:	f7ff fd32 	bl	8000e02 <put16>
 800139e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 80013a2:	2101      	movs	r1, #1
 80013a4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80013a8:	f7ff fd2b 	bl	8000e02 <put16>
 80013ac:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80013b0:	2100      	movs	r1, #0
 80013b2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80013b6:	f7ff fd24 	bl	8000e02 <put16>
 80013ba:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80013be:	2100      	movs	r1, #0
 80013c0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80013c4:	f7ff fd1d 	bl	8000e02 <put16>
 80013c8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80013d2:	f7ff fd16 	bl	8000e02 <put16>
 80013d6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fd6e 	bl	8005ec2 <strcpy>
	dname = sname;
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 80013ee:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80013f2:	f7fe ff15 	bl	8000220 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 80013fc:	212e      	movs	r1, #46	@ 0x2e
 80013fe:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001402:	f004 fccb 	bl	8005d9c <strchr>
 8001406:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 800140a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <dns_makequery+0xd8>
 8001412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	81bb      	strh	r3, [r7, #12]
 800141e:	e002      	b.n	8001426 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8001420:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8001424:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8001426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001430:	89ba      	ldrh	r2, [r7, #12]
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8001436:	89bb      	ldrh	r3, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d029      	beq.n	8001490 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 800143c:	89bb      	ldrh	r3, [r7, #12]
 800143e:	461a      	mov	r2, r3
 8001440:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8001444:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8001448:	f004 fcb5 	bl	8005db6 <strncpy>
		cp += len;
 800144c:	89bb      	ldrh	r3, [r7, #12]
 800144e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001452:	4413      	add	r3, r2
 8001454:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 8001458:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8001460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
			break;
 800146e:	e010      	b.n	8001492 <dns_makequery+0x14a>
		}
		dname += len+1;
 8001470:	89bb      	ldrh	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8001478:	4413      	add	r3, r2
 800147a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 800147e:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8001482:	89bb      	ldrh	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b01      	subs	r3, #1
 800148a:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 800148e:	e7b5      	b.n	80013fc <dns_makequery+0xb4>
		if (len == 0) break;
 8001490:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8001492:	2101      	movs	r1, #1
 8001494:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8001498:	f7ff fcb3 	bl	8000e02 <put16>
 800149c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 80014a0:	2101      	movs	r1, #1
 80014a2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80014a6:	f7ff fcac 	bl	8000e02 <put16>
 80014aa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 80014ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b21b      	sxth	r3, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	37e0      	adds	r7, #224	@ 0xe0
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002ee 	.word	0x200002ee

080014c4 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <check_DNS_timeout+0x44>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d914      	bls.n	80014fa <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <check_DNS_timeout+0x44>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <check_DNS_timeout+0x48>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d905      	bls.n	80014ea <check_DNS_timeout+0x26>
			retry_count = 0;
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <check_DNS_timeout+0x48>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	e008      	b.n	80014fc <check_DNS_timeout+0x38>
		}
		retry_count++;
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <check_DNS_timeout+0x48>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <check_DNS_timeout+0x48>)
 80014f4:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200002f0 	.word	0x200002f0
 800150c:	200002f4 	.word	0x200002f4

08001510 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 800151c:	4a07      	ldr	r2, [pc, #28]	@ (800153c <DNS_init+0x2c>)
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8001522:	4a07      	ldr	r2, [pc, #28]	@ (8001540 <DNS_init+0x30>)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <DNS_init+0x34>)
 800152a:	f241 1222 	movw	r2, #4386	@ 0x1122
 800152e:	801a      	strh	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	200002ec 	.word	0x200002ec
 8001540:	200002e8 	.word	0x200002e8
 8001544:	200002ee 	.word	0x200002ee

08001548 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b08f      	sub	sp, #60	@ 0x3c
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8001554:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <DNS_run+0xfc>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 800155a:	4b3b      	ldr	r3, [pc, #236]	@ (8001648 <DNS_run+0x100>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8001560:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <DNS_run+0x104>)
 8001562:	7818      	ldrb	r0, [r3, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	2200      	movs	r2, #0
 8001568:	2102      	movs	r1, #2
 800156a:	f000 fb67 	bl	8001c3c <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 800156e:	4b38      	ldr	r3, [pc, #224]	@ (8001650 <DNS_run+0x108>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fee5 	bl	8001348 <dns_makequery>
 800157e:	4603      	mov	r3, r0
 8001580:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8001582:	4b32      	ldr	r3, [pc, #200]	@ (800164c <DNS_run+0x104>)
 8001584:	7818      	ldrb	r0, [r3, #0]
 8001586:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <DNS_run+0x108>)
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800158c:	2335      	movs	r3, #53	@ 0x35
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f000 fcd5 	bl	8001f40 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <DNS_run+0x104>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fa0b 	bl	80019b6 <getSn_RX_RSR>
 80015a0:	4603      	mov	r3, r0
 80015a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80015a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d029      	beq.n	80015fe <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 80015aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015b0:	d902      	bls.n	80015b8 <DNS_run+0x70>
 80015b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 80015b8:	4b24      	ldr	r3, [pc, #144]	@ (800164c <DNS_run+0x104>)
 80015ba:	7818      	ldrb	r0, [r3, #0]
 80015bc:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <DNS_run+0x108>)
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	f107 0414 	add.w	r4, r7, #20
 80015c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80015c6:	f107 0312 	add.w	r3, r7, #18
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	4623      	mov	r3, r4
 80015ce:	f000 fdeb 	bl	80021a8 <recvfrom>
 80015d2:	4603      	mov	r3, r0
 80015d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <DNS_run+0x108>)
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fde9 	bl	80011b8 <parseDNSMSG>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 80015ec:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <DNS_run+0x104>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fc36 	bl	8001e64 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 80015f8:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80015fc:	e01e      	b.n	800163c <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 80015fe:	f7ff ff61 	bl	80014c4 <check_DNS_timeout>
 8001602:	4603      	mov	r3, r0
 8001604:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 8001608:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800160c:	2b00      	cmp	r3, #0
 800160e:	da06      	bge.n	800161e <DNS_run+0xd6>
			close(DNS_SOCKET);
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <DNS_run+0x104>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fc25 	bl	8001e64 <close>
			return 0; // timeout occurred
 800161a:	2300      	movs	r3, #0
 800161c:	e00e      	b.n	800163c <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 800161e:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1b7      	bne.n	8001596 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <DNS_run+0x104>)
 8001628:	7818      	ldrb	r0, [r3, #0]
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <DNS_run+0x108>)
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001630:	2335      	movs	r3, #53	@ 0x35
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f000 fc83 	bl	8001f40 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 800163a:	e7ac      	b.n	8001596 <DNS_run+0x4e>
}
 800163c:	4618      	mov	r0, r3
 800163e:	3734      	adds	r7, #52	@ 0x34
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	200002f4 	.word	0x200002f4
 8001648:	200002f0 	.word	0x200002f0
 800164c:	200002ec 	.word	0x200002ec
 8001650:	200002e8 	.word	0x200002e8

08001654 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <DNS_time_handler+0x18>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a03      	ldr	r2, [pc, #12]	@ (800166c <DNS_time_handler+0x18>)
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	200002f0 	.word	0x200002f0

08001670 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001678:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <WIZCHIP_READ+0x94>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <WIZCHIP_READ+0x94>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001684:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <WIZCHIP_READ+0x94>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <WIZCHIP_READ+0x24>
 800168c:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <WIZCHIP_READ+0x94>)
 800168e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001690:	2b00      	cmp	r3, #0
 8001692:	d114      	bne.n	80016be <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001694:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <WIZCHIP_READ+0x94>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	0c12      	lsrs	r2, r2, #16
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	4610      	mov	r0, r2
 80016a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <WIZCHIP_READ+0x94>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	0a12      	lsrs	r2, r2, #8
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	4610      	mov	r0, r2
 80016ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <WIZCHIP_READ+0x94>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	4610      	mov	r0, r2
 80016ba:	4798      	blx	r3
 80016bc:	e011      	b.n	80016e2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <WIZCHIP_READ+0x94>)
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	f107 020c 	add.w	r2, r7, #12
 80016dc:	2103      	movs	r1, #3
 80016de:	4610      	mov	r0, r2
 80016e0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <WIZCHIP_READ+0x94>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4798      	blx	r3
 80016e8:	4603      	mov	r3, r0
 80016ea:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <WIZCHIP_READ+0x94>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <WIZCHIP_READ+0x94>)
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	4798      	blx	r3
   return ret;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000038 	.word	0x20000038

08001708 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001714:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4798      	blx	r3
   WIZCHIP.CS._select();
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	d119      	bne.n	8001764 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001730:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	0c12      	lsrs	r2, r2, #16
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	4610      	mov	r0, r2
 800173c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800173e:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	0a12      	lsrs	r2, r2, #8
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	4610      	mov	r0, r2
 800174a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	4610      	mov	r0, r2
 8001756:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	4610      	mov	r0, r2
 8001760:	4798      	blx	r3
 8001762:	e013      	b.n	800178c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	b2db      	uxtb	r3, r3
 800176a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b2db      	uxtb	r3, r3
 8001772:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800177e:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 8001780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001782:	f107 020c 	add.w	r2, r7, #12
 8001786:	2104      	movs	r1, #4
 8001788:	4610      	mov	r0, r2
 800178a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001792:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <WIZCHIP_WRITE+0x98>)
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	4798      	blx	r3
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000038 	.word	0x20000038

080017a4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80017b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80017b8:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80017be:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <WIZCHIP_READ_BUF+0x2a>
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 80017c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d126      	bne.n	800181c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	0c12      	lsrs	r2, r2, #16
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	4610      	mov	r0, r2
 80017da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	0a12      	lsrs	r2, r2, #8
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	4610      	mov	r0, r2
 80017e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80017ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	4610      	mov	r0, r2
 80017f4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	82fb      	strh	r3, [r7, #22]
 80017fa:	e00a      	b.n	8001812 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	8afa      	ldrh	r2, [r7, #22]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	188c      	adds	r4, r1, r2
 8001806:	4798      	blx	r3
 8001808:	4603      	mov	r3, r0
 800180a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800180c:	8afb      	ldrh	r3, [r7, #22]
 800180e:	3301      	adds	r3, #1
 8001810:	82fb      	strh	r3, [r7, #22]
 8001812:	8afa      	ldrh	r2, [r7, #22]
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	429a      	cmp	r2, r3
 8001818:	d3f0      	bcc.n	80017fc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800181a:	e017      	b.n	800184c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	0c1b      	lsrs	r3, r3, #16
 8001820:	b2db      	uxtb	r3, r3
 8001822:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	b2db      	uxtb	r3, r3
 800182a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001836:	f107 0210 	add.w	r2, r7, #16
 800183a:	2103      	movs	r1, #3
 800183c:	4610      	mov	r0, r2
 800183e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	4611      	mov	r1, r2
 8001848:	68b8      	ldr	r0, [r7, #8]
 800184a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001852:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <WIZCHIP_READ_BUF+0xbc>)
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	4798      	blx	r3
}
 8001858:	bf00      	nop
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	20000038 	.word	0x20000038

08001864 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	4613      	mov	r3, r2
 8001870:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001872:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001886:	4b26      	ldr	r3, [pc, #152]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	d126      	bne.n	80018dc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800188e:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	0c12      	lsrs	r2, r2, #16
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	4610      	mov	r0, r2
 800189a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800189c:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	0a12      	lsrs	r2, r2, #8
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	4610      	mov	r0, r2
 80018a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80018aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	4610      	mov	r0, r2
 80018b4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e00a      	b.n	80018d2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80018bc:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	8afa      	ldrh	r2, [r7, #22]
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	440a      	add	r2, r1
 80018c6:	7812      	ldrb	r2, [r2, #0]
 80018c8:	4610      	mov	r0, r2
 80018ca:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80018cc:	8afb      	ldrh	r3, [r7, #22]
 80018ce:	3301      	adds	r3, #1
 80018d0:	82fb      	strh	r3, [r7, #22]
 80018d2:	8afa      	ldrh	r2, [r7, #22]
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3f0      	bcc.n	80018bc <WIZCHIP_WRITE_BUF+0x58>
 80018da:	e017      	b.n	800190c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80018f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	f107 0210 	add.w	r2, r7, #16
 80018fa:	2103      	movs	r1, #3
 80018fc:	4610      	mov	r0, r2
 80018fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001900:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	88fa      	ldrh	r2, [r7, #6]
 8001906:	4611      	mov	r1, r2
 8001908:	68b8      	ldr	r0, [r7, #8]
 800190a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001912:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <WIZCHIP_WRITE_BUF+0xbc>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	4798      	blx	r3
}
 8001918:	bf00      	nop
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000038 	.word	0x20000038

08001924 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800192e:	2300      	movs	r3, #0
 8001930:	81fb      	strh	r3, [r7, #14]
 8001932:	2300      	movs	r3, #0
 8001934:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	3301      	adds	r3, #1
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fe94 	bl	8001670 <WIZCHIP_READ>
 8001948:	4603      	mov	r3, r0
 800194a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800194c:	89bb      	ldrh	r3, [r7, #12]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	b29c      	uxth	r4, r3
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	3301      	adds	r3, #1
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fe86 	bl	8001670 <WIZCHIP_READ>
 8001964:	4603      	mov	r3, r0
 8001966:	4423      	add	r3, r4
 8001968:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800196a:	89bb      	ldrh	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d019      	beq.n	80019a4 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	3301      	adds	r3, #1
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe77 	bl	8001670 <WIZCHIP_READ>
 8001982:	4603      	mov	r3, r0
 8001984:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b29c      	uxth	r4, r3
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	3301      	adds	r3, #1
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe69 	bl	8001670 <WIZCHIP_READ>
 800199e:	4603      	mov	r3, r0
 80019a0:	4423      	add	r3, r4
 80019a2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80019a4:	89fa      	ldrh	r2, [r7, #14]
 80019a6:	89bb      	ldrh	r3, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1c4      	bne.n	8001936 <getSn_TX_FSR+0x12>
   return val;
 80019ac:	89fb      	ldrh	r3, [r7, #14]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}

080019b6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80019b6:	b590      	push	{r4, r7, lr}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	81fb      	strh	r3, [r7, #14]
 80019c4:	2300      	movs	r3, #0
 80019c6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	3301      	adds	r3, #1
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fe4b 	bl	8001670 <WIZCHIP_READ>
 80019da:	4603      	mov	r3, r0
 80019dc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80019de:	89bb      	ldrh	r3, [r7, #12]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b29c      	uxth	r4, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	3301      	adds	r3, #1
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fe3d 	bl	8001670 <WIZCHIP_READ>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4423      	add	r3, r4
 80019fa:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80019fc:	89bb      	ldrh	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d019      	beq.n	8001a36 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	3301      	adds	r3, #1
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fe2e 	bl	8001670 <WIZCHIP_READ>
 8001a14:	4603      	mov	r3, r0
 8001a16:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	b29c      	uxth	r4, r3
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	3301      	adds	r3, #1
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fe20 	bl	8001670 <WIZCHIP_READ>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4423      	add	r3, r4
 8001a34:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001a36:	89fa      	ldrh	r2, [r7, #14]
 8001a38:	89bb      	ldrh	r3, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d1c4      	bne.n	80019c8 <getSn_RX_RSR+0x12>
   return val;
 8001a3e:	89fb      	ldrh	r3, [r7, #14]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd90      	pop	{r4, r7, pc}

08001a48 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001a60:	88bb      	ldrh	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d046      	beq.n	8001af4 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fdfc 	bl	8001670 <WIZCHIP_READ>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b29c      	uxth	r4, r3
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	3301      	adds	r3, #1
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fdf0 	bl	8001670 <WIZCHIP_READ>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4423      	add	r3, r4
 8001a94:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001a96:	89fb      	ldrh	r3, [r7, #14]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	79fa      	ldrb	r2, [r7, #7]
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	3202      	adds	r2, #2
 8001aa0:	00d2      	lsls	r2, r2, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	68b8      	ldr	r0, [r7, #8]
 8001aae:	f7ff fed9 	bl	8001864 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001ab2:	89fa      	ldrh	r2, [r7, #14]
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	3301      	adds	r3, #1
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	89fb      	ldrh	r3, [r7, #14]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f7ff fe18 	bl	8001708 <WIZCHIP_WRITE>
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	3301      	adds	r3, #1
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4619      	mov	r1, r3
 8001aec:	4610      	mov	r0, r2
 8001aee:	f7ff fe0b 	bl	8001708 <WIZCHIP_WRITE>
 8001af2:	e000      	b.n	8001af6 <wiz_send_data+0xae>
   if(len == 0)  return;
 8001af4:	bf00      	nop
}
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}

08001afc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d046      	beq.n	8001ba8 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3301      	adds	r3, #1
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fda2 	bl	8001670 <WIZCHIP_READ>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b29c      	uxth	r4, r3
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	3301      	adds	r3, #1
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fd96 	bl	8001670 <WIZCHIP_READ>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4423      	add	r3, r4
 8001b48:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	79fa      	ldrb	r2, [r7, #7]
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	3203      	adds	r2, #3
 8001b54:	00d2      	lsls	r2, r2, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	68b8      	ldr	r0, [r7, #8]
 8001b62:	f7ff fe1f 	bl	80017a4 <WIZCHIP_READ_BUF>
   ptr += len;
 8001b66:	89fa      	ldrh	r2, [r7, #14]
 8001b68:	88bb      	ldrh	r3, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3301      	adds	r3, #1
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f7ff fdbe 	bl	8001708 <WIZCHIP_WRITE>
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	3301      	adds	r3, #1
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8001b98:	461a      	mov	r2, r3
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f7ff fdb1 	bl	8001708 <WIZCHIP_WRITE>
 8001ba6:	e000      	b.n	8001baa <wiz_recv_data+0xae>
   if(len == 0) return;
 8001ba8:	bf00      	nop
}
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}

08001bb0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460a      	mov	r2, r1
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3301      	adds	r3, #1
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fd4d 	bl	8001670 <WIZCHIP_READ>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b29c      	uxth	r4, r3
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	3301      	adds	r3, #1
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fd41 	bl	8001670 <WIZCHIP_READ>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4423      	add	r3, r4
 8001bf2:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8001bf4:	89fa      	ldrh	r2, [r7, #14]
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3301      	adds	r3, #1
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8001c08:	461a      	mov	r2, r3
 8001c0a:	89fb      	ldrh	r3, [r7, #14]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	4619      	mov	r1, r3
 8001c14:	4610      	mov	r0, r2
 8001c16:	f7ff fd77 	bl	8001708 <WIZCHIP_WRITE>
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	3301      	adds	r3, #1
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8001c26:	461a      	mov	r2, r3
 8001c28:	89fb      	ldrh	r3, [r7, #14]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f7ff fd6a 	bl	8001708 <WIZCHIP_WRITE>
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}

08001c3c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71bb      	strb	r3, [r7, #6]
 8001c52:	460b      	mov	r3, r1
 8001c54:	80bb      	strh	r3, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d902      	bls.n	8001c66 <socket+0x2a>
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	e0f0      	b.n	8001e48 <socket+0x20c>
	switch(protocol)
 8001c66:	79bb      	ldrb	r3, [r7, #6]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d005      	beq.n	8001c78 <socket+0x3c>
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	dd11      	ble.n	8001c94 <socket+0x58>
 8001c70:	3b02      	subs	r3, #2
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d80e      	bhi.n	8001c94 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001c76:	e011      	b.n	8001c9c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001c84:	f7ff fd8e 	bl	80017a4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <socket+0x5e>
 8001c8e:	f06f 0302 	mvn.w	r3, #2
 8001c92:	e0d9      	b.n	8001e48 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001c94:	f06f 0304 	mvn.w	r3, #4
 8001c98:	e0d6      	b.n	8001e48 <socket+0x20c>
	    break;
 8001c9a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <socket+0x70>
 8001ca6:	f06f 0305 	mvn.w	r3, #5
 8001caa:	e0cd      	b.n	8001e48 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d028      	beq.n	8001d04 <socket+0xc8>
	{
   	switch(protocol)
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d002      	beq.n	8001cbe <socket+0x82>
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d008      	beq.n	8001cce <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001cbc:	e022      	b.n	8001d04 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d11a      	bne.n	8001cfe <socket+0xc2>
 8001cc8:	f06f 0305 	mvn.w	r3, #5
 8001ccc:	e0bc      	b.n	8001e48 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db02      	blt.n	8001ce6 <socket+0xaa>
 8001ce0:	f06f 0305 	mvn.w	r3, #5
 8001ce4:	e0b0      	b.n	8001e48 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db04      	blt.n	8001d02 <socket+0xc6>
 8001cf8:	f06f 0305 	mvn.w	r3, #5
 8001cfc:	e0a4      	b.n	8001e48 <socket+0x20c>
   	      break;
 8001cfe:	bf00      	nop
 8001d00:	e000      	b.n	8001d04 <socket+0xc8>
   	      break;
 8001d02:	bf00      	nop
   	}
   }
	close(sn);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f8ac 	bl	8001e64 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	3301      	adds	r3, #1
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d1a:	f023 030f 	bic.w	r3, r3, #15
 8001d1e:	b25a      	sxtb	r2, r3
 8001d20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7ff fcec 	bl	8001708 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001d30:	88bb      	ldrh	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d110      	bne.n	8001d58 <socket+0x11c>
	{
	   port = sock_any_port++;
 8001d36:	4b46      	ldr	r3, [pc, #280]	@ (8001e50 <socket+0x214>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	b291      	uxth	r1, r2
 8001d3e:	4a44      	ldr	r2, [pc, #272]	@ (8001e50 <socket+0x214>)
 8001d40:	8011      	strh	r1, [r2, #0]
 8001d42:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001d44:	4b42      	ldr	r3, [pc, #264]	@ (8001e50 <socket+0x214>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d103      	bne.n	8001d58 <socket+0x11c>
 8001d50:	4b3f      	ldr	r3, [pc, #252]	@ (8001e50 <socket+0x214>)
 8001d52:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001d56:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d64:	461a      	mov	r2, r3
 8001d66:	88bb      	ldrh	r3, [r7, #4]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4610      	mov	r0, r2
 8001d72:	f7ff fcc9 	bl	8001708 <WIZCHIP_WRITE>
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	88bb      	ldrh	r3, [r7, #4]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7ff fcbc 	bl	8001708 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	3301      	adds	r3, #1
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fcb2 	bl	8001708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001da4:	bf00      	nop
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	3301      	adds	r3, #1
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fc5c 	bl	8001670 <WIZCHIP_READ>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f3      	bne.n	8001da6 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	4b21      	ldr	r3, [pc, #132]	@ (8001e54 <socket+0x218>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e54 <socket+0x218>)
 8001dda:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 0201 	and.w	r2, r3, #1
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <socket+0x218>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <socket+0x218>)
 8001df8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	4b13      	ldr	r3, [pc, #76]	@ (8001e58 <socket+0x21c>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	4013      	ands	r3, r2
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <socket+0x21c>)
 8001e16:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4a10      	ldr	r2, [pc, #64]	@ (8001e5c <socket+0x220>)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	4a0e      	ldr	r2, [pc, #56]	@ (8001e60 <socket+0x224>)
 8001e26:	2100      	movs	r1, #0
 8001e28:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001e2a:	bf00      	nop
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	3301      	adds	r3, #1
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fc19 	bl	8001670 <WIZCHIP_READ>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f3      	beq.n	8001e2c <socket+0x1f0>
   return (int8_t)sn;
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	20000034 	.word	0x20000034
 8001e54:	200002f6 	.word	0x200002f6
 8001e58:	200002f8 	.word	0x200002f8
 8001e5c:	200002fc 	.word	0x200002fc
 8001e60:	2000030c 	.word	0x2000030c

08001e64 <close>:

int8_t close(uint8_t sn)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d902      	bls.n	8001e7a <close+0x16>
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295
 8001e78:	e055      	b.n	8001f26 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	3301      	adds	r3, #1
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001e86:	2110      	movs	r1, #16
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fc3d 	bl	8001708 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001e8e:	bf00      	nop
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	3301      	adds	r3, #1
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fbe7 	bl	8001670 <WIZCHIP_READ>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f3      	bne.n	8001e90 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3301      	adds	r3, #1
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001eb4:	211f      	movs	r1, #31
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fc26 	bl	8001708 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <close+0xcc>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <close+0xcc>)
 8001ed8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2201      	movs	r2, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <close+0xd0>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4013      	ands	r3, r2
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <close+0xd0>)
 8001ef6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	@ (8001f38 <close+0xd4>)
 8001efc:	2100      	movs	r1, #0
 8001efe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	@ (8001f3c <close+0xd8>)
 8001f06:	2100      	movs	r1, #0
 8001f08:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001f0a:	bf00      	nop
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	3301      	adds	r3, #1
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fba9 	bl	8001670 <WIZCHIP_READ>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f3      	bne.n	8001f0c <close+0xa8>
	return SOCK_OK;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200002f6 	.word	0x200002f6
 8001f34:	200002f8 	.word	0x200002f8
 8001f38:	200002fc 	.word	0x200002fc
 8001f3c:	2000030c 	.word	0x2000030c

08001f40 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d902      	bls.n	8001f66 <sendto+0x26>
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	e11a      	b.n	800219c <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fb7e 	bl	8001670 <WIZCHIP_READ>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b02      	subs	r3, #2
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d902      	bls.n	8001f86 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001f80:	f06f 0304 	mvn.w	r3, #4
 8001f84:	e10a      	b.n	800219c <sendto+0x25c>
         break;
 8001f86:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001f88:	89bb      	ldrh	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <sendto+0x54>
 8001f8e:	f06f 030d 	mvn.w	r3, #13
 8001f92:	e103      	b.n	800219c <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	3201      	adds	r2, #1
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	3202      	adds	r2, #2
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	3203      	adds	r2, #3
 8001fbe:	7812      	ldrb	r2, [r2, #0]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <sendto+0xa8>
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3301      	adds	r3, #1
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fb4c 	bl	8001670 <WIZCHIP_READ>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d002      	beq.n	8001fe8 <sendto+0xa8>
 8001fe2:	f06f 030b 	mvn.w	r3, #11
 8001fe6:	e0d9      	b.n	800219c <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001fe8:	8c3b      	ldrh	r3, [r7, #32]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10e      	bne.n	800200c <sendto+0xcc>
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fb3a 	bl	8001670 <WIZCHIP_READ>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d002      	beq.n	800200c <sendto+0xcc>
 8002006:	f06f 030a 	mvn.w	r3, #10
 800200a:	e0c7      	b.n	800219c <sendto+0x25c>
   tmp = getSn_SR(sn);
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	3301      	adds	r3, #1
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fb29 	bl	8001670 <WIZCHIP_READ>
 800201e:	4603      	mov	r3, r0
 8002020:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	2b42      	cmp	r3, #66	@ 0x42
 8002026:	d008      	beq.n	800203a <sendto+0xfa>
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b22      	cmp	r3, #34	@ 0x22
 800202c:	d005      	beq.n	800203a <sendto+0xfa>
 800202e:	7dfb      	ldrb	r3, [r7, #23]
 8002030:	2b32      	cmp	r3, #50	@ 0x32
 8002032:	d002      	beq.n	800203a <sendto+0xfa>
 8002034:	f06f 0306 	mvn.w	r3, #6
 8002038:	e0b0      	b.n	800219c <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	3301      	adds	r3, #1
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002046:	2204      	movs	r2, #4
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fc0a 	bl	8001864 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	3301      	adds	r3, #1
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205c:	461a      	mov	r2, r3
 800205e:	8c3b      	ldrh	r3, [r7, #32]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4619      	mov	r1, r3
 8002068:	4610      	mov	r0, r2
 800206a:	f7ff fb4d 	bl	8001708 <WIZCHIP_WRITE>
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	3301      	adds	r3, #1
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800207a:	461a      	mov	r2, r3
 800207c:	8c3b      	ldrh	r3, [r7, #32]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7ff fb40 	bl	8001708 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	3301      	adds	r3, #1
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff faeb 	bl	8001670 <WIZCHIP_READ>
 800209a:	4603      	mov	r3, r0
 800209c:	029b      	lsls	r3, r3, #10
 800209e:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80020a0:	89ba      	ldrh	r2, [r7, #12]
 80020a2:	8abb      	ldrh	r3, [r7, #20]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d901      	bls.n	80020ac <sendto+0x16c>
 80020a8:	8abb      	ldrh	r3, [r7, #20]
 80020aa:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fc38 	bl	8001924 <getSn_TX_FSR>
 80020b4:	4603      	mov	r3, r0
 80020b6:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	3301      	adds	r3, #1
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fad3 	bl	8001670 <WIZCHIP_READ>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <sendto+0x196>
 80020d0:	f06f 0303 	mvn.w	r3, #3
 80020d4:	e062      	b.n	800219c <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80020d6:	4b33      	ldr	r3, [pc, #204]	@ (80021a4 <sendto+0x264>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	fa42 f303 	asr.w	r3, r2, r3
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <sendto+0x1b6>
 80020ea:	89ba      	ldrh	r2, [r7, #12]
 80020ec:	8abb      	ldrh	r3, [r7, #20]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d901      	bls.n	80020f6 <sendto+0x1b6>
 80020f2:	2300      	movs	r3, #0
 80020f4:	e052      	b.n	800219c <sendto+0x25c>
      if(len <= freesize) break;
 80020f6:	89ba      	ldrh	r2, [r7, #12]
 80020f8:	8abb      	ldrh	r3, [r7, #20]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d900      	bls.n	8002100 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 80020fe:	e7d5      	b.n	80020ac <sendto+0x16c>
      if(len <= freesize) break;
 8002100:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8002102:	89ba      	ldrh	r2, [r7, #12]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fc9d 	bl	8001a48 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	3301      	adds	r3, #1
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800211a:	2120      	movs	r1, #32
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff faf3 	bl	8001708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002122:	bf00      	nop
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	3301      	adds	r3, #1
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fa9d 	bl	8001670 <WIZCHIP_READ>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f3      	bne.n	8002124 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	3301      	adds	r3, #1
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fa91 	bl	8001670 <WIZCHIP_READ>
 800214e:	4603      	mov	r3, r0
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8002156:	7dfb      	ldrb	r3, [r7, #23]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00c      	beq.n	800217a <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	3301      	adds	r3, #1
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800216c:	2110      	movs	r1, #16
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff faca 	bl	8001708 <WIZCHIP_WRITE>
         break;
 8002174:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002176:	89bb      	ldrh	r3, [r7, #12]
 8002178:	e010      	b.n	800219c <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0db      	beq.n	800213c <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3301      	adds	r3, #1
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002190:	2108      	movs	r1, #8
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fab8 	bl	8001708 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8002198:	f06f 030c 	mvn.w	r3, #12
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200002f6 	.word	0x200002f6

080021a8 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4603      	mov	r3, r0
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	4613      	mov	r3, r2
 80021b8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d902      	bls.n	80021ca <recvfrom+0x22>
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	e1d2      	b.n	8002570 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	3301      	adds	r3, #1
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fa4c 	bl	8001670 <WIZCHIP_READ>
 80021d8:	4603      	mov	r3, r0
 80021da:	777b      	strb	r3, [r7, #29]
 80021dc:	7f7b      	ldrb	r3, [r7, #29]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b02      	subs	r3, #2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d902      	bls.n	80021ee <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80021e8:	f06f 0304 	mvn.w	r3, #4
 80021ec:	e1c0      	b.n	8002570 <recvfrom+0x3c8>
         break;
 80021ee:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80021f0:	89bb      	ldrh	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <recvfrom+0x54>
 80021f6:	f06f 030d 	mvn.w	r3, #13
 80021fa:	e1b9      	b.n	8002570 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	4a87      	ldr	r2, [pc, #540]	@ (800241c <recvfrom+0x274>)
 8002200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d128      	bne.n	800225a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fbd3 	bl	80019b6 <getSn_RX_RSR>
 8002210:	4603      	mov	r3, r0
 8002212:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	3301      	adds	r3, #1
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fa25 	bl	8001670 <WIZCHIP_READ>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <recvfrom+0x8a>
 800222c:	f06f 0303 	mvn.w	r3, #3
 8002230:	e19e      	b.n	8002570 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8002232:	4b7b      	ldr	r3, [pc, #492]	@ (8002420 <recvfrom+0x278>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	fa42 f303 	asr.w	r3, r2, r3
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <recvfrom+0xa8>
 8002246:	8bfb      	ldrh	r3, [r7, #30]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <recvfrom+0xa8>
 800224c:	2300      	movs	r3, #0
 800224e:	e18f      	b.n	8002570 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8002250:	8bfb      	ldrh	r3, [r7, #30]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d100      	bne.n	8002258 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8002256:	e7d7      	b.n	8002208 <recvfrom+0x60>
         if(pack_len != 0) break;
 8002258:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800225a:	7f7b      	ldrb	r3, [r7, #29]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	2b04      	cmp	r3, #4
 8002262:	d078      	beq.n	8002356 <recvfrom+0x1ae>
 8002264:	2b04      	cmp	r3, #4
 8002266:	f300 8140 	bgt.w	80024ea <recvfrom+0x342>
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <recvfrom+0xce>
 800226e:	2b03      	cmp	r3, #3
 8002270:	f000 80da 	beq.w	8002428 <recvfrom+0x280>
 8002274:	e139      	b.n	80024ea <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	4a68      	ldr	r2, [pc, #416]	@ (800241c <recvfrom+0x274>)
 800227a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d151      	bne.n	8002326 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8002282:	f107 0114 	add.w	r1, r7, #20
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2208      	movs	r2, #8
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fc36 	bl	8001afc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	3301      	adds	r3, #1
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800229c:	2140      	movs	r1, #64	@ 0x40
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fa32 	bl	8001708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80022a4:	bf00      	nop
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	3301      	adds	r3, #1
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f9dc 	bl	8001670 <WIZCHIP_READ>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f3      	bne.n	80022a6 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80022be:	7d3a      	ldrb	r2, [r7, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3301      	adds	r3, #1
 80022c8:	7d7a      	ldrb	r2, [r7, #21]
 80022ca:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3302      	adds	r3, #2
 80022d0:	7dba      	ldrb	r2, [r7, #22]
 80022d2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3303      	adds	r3, #3
 80022d8:	7dfa      	ldrb	r2, [r7, #23]
 80022da:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80022dc:	7e3b      	ldrb	r3, [r7, #24]
 80022de:	461a      	mov	r2, r3
 80022e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80022e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	7e7a      	ldrb	r2, [r7, #25]
 80022ee:	4413      	add	r3, r2
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f4:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80022f6:	7eba      	ldrb	r2, [r7, #26]
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4a47      	ldr	r2, [pc, #284]	@ (800241c <recvfrom+0x274>)
 80022fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	4a45      	ldr	r2, [pc, #276]	@ (800241c <recvfrom+0x274>)
 8002306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	b29a      	uxth	r2, r3
 800230e:	7efb      	ldrb	r3, [r7, #27]
 8002310:	4619      	mov	r1, r3
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	440a      	add	r2, r1
 8002316:	b291      	uxth	r1, r2
 8002318:	4a40      	ldr	r2, [pc, #256]	@ (800241c <recvfrom+0x274>)
 800231a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	4a40      	ldr	r2, [pc, #256]	@ (8002424 <recvfrom+0x27c>)
 8002322:	2180      	movs	r1, #128	@ 0x80
 8002324:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4a3c      	ldr	r2, [pc, #240]	@ (800241c <recvfrom+0x274>)
 800232a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800232e:	89ba      	ldrh	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d202      	bcs.n	800233a <recvfrom+0x192>
 8002334:	89bb      	ldrh	r3, [r7, #12]
 8002336:	83fb      	strh	r3, [r7, #30]
 8002338:	e004      	b.n	8002344 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	4a37      	ldr	r2, [pc, #220]	@ (800241c <recvfrom+0x274>)
 800233e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002342:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8002344:	8bfb      	ldrh	r3, [r7, #30]
 8002346:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002348:	8bfa      	ldrh	r2, [r7, #30]
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fbd4 	bl	8001afc <wiz_recv_data>
			break;
 8002354:	e0d5      	b.n	8002502 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	4a30      	ldr	r2, [pc, #192]	@ (800241c <recvfrom+0x274>)
 800235a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d145      	bne.n	80023ee <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8002362:	f107 0114 	add.w	r1, r7, #20
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2202      	movs	r2, #2
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fbc6 	bl	8001afc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	3301      	adds	r3, #1
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800237c:	2140      	movs	r1, #64	@ 0x40
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f9c2 	bl	8001708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002384:	bf00      	nop
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	3301      	adds	r3, #1
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f96c 	bl	8001670 <WIZCHIP_READ>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f3      	bne.n	8002386 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800239e:	7d3a      	ldrb	r2, [r7, #20]
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4a1d      	ldr	r2, [pc, #116]	@ (800241c <recvfrom+0x274>)
 80023a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	4a1b      	ldr	r2, [pc, #108]	@ (800241c <recvfrom+0x274>)
 80023ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	7d7a      	ldrb	r2, [r7, #21]
 80023b8:	4413      	add	r3, r2
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3a02      	subs	r2, #2
 80023c0:	b291      	uxth	r1, r2
 80023c2:	4a16      	ldr	r2, [pc, #88]	@ (800241c <recvfrom+0x274>)
 80023c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	4a14      	ldr	r2, [pc, #80]	@ (800241c <recvfrom+0x274>)
 80023cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023d0:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d906      	bls.n	80023e6 <recvfrom+0x23e>
   			{
   			   close(sn);
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fd42 	bl	8001e64 <close>
   			   return SOCKFATAL_PACKLEN;
 80023e0:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 80023e4:	e0c4      	b.n	8002570 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002424 <recvfrom+0x27c>)
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <recvfrom+0x274>)
 80023f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023f6:	89ba      	ldrh	r2, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d202      	bcs.n	8002402 <recvfrom+0x25a>
 80023fc:	89bb      	ldrh	r3, [r7, #12]
 80023fe:	83fb      	strh	r3, [r7, #30]
 8002400:	e004      	b.n	800240c <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	4a05      	ldr	r2, [pc, #20]	@ (800241c <recvfrom+0x274>)
 8002406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800240a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800240c:	8bfa      	ldrh	r2, [r7, #30]
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fb72 	bl	8001afc <wiz_recv_data>
		   break;
 8002418:	e073      	b.n	8002502 <recvfrom+0x35a>
 800241a:	bf00      	nop
 800241c:	200002fc 	.word	0x200002fc
 8002420:	200002f6 	.word	0x200002f6
 8002424:	2000030c 	.word	0x2000030c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	4a53      	ldr	r2, [pc, #332]	@ (8002578 <recvfrom+0x3d0>)
 800242c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d144      	bne.n	80024be <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8002434:	f107 0114 	add.w	r1, r7, #20
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2206      	movs	r2, #6
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fb5d 	bl	8001afc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	3301      	adds	r3, #1
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800244e:	2140      	movs	r1, #64	@ 0x40
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff f959 	bl	8001708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002456:	bf00      	nop
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	3301      	adds	r3, #1
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f903 	bl	8001670 <WIZCHIP_READ>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f3      	bne.n	8002458 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8002470:	7d3a      	ldrb	r2, [r7, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3301      	adds	r3, #1
 800247a:	7d7a      	ldrb	r2, [r7, #21]
 800247c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3302      	adds	r3, #2
 8002482:	7dba      	ldrb	r2, [r7, #22]
 8002484:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3303      	adds	r3, #3
 800248a:	7dfa      	ldrb	r2, [r7, #23]
 800248c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800248e:	7e3a      	ldrb	r2, [r7, #24]
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	4611      	mov	r1, r2
 8002494:	4a38      	ldr	r2, [pc, #224]	@ (8002578 <recvfrom+0x3d0>)
 8002496:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	4a36      	ldr	r2, [pc, #216]	@ (8002578 <recvfrom+0x3d0>)
 800249e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	7e7b      	ldrb	r3, [r7, #25]
 80024a8:	4619      	mov	r1, r3
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	440a      	add	r2, r1
 80024ae:	b291      	uxth	r1, r2
 80024b0:	4a31      	ldr	r2, [pc, #196]	@ (8002578 <recvfrom+0x3d0>)
 80024b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	4a30      	ldr	r2, [pc, #192]	@ (800257c <recvfrom+0x3d4>)
 80024ba:	2180      	movs	r1, #128	@ 0x80
 80024bc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002578 <recvfrom+0x3d0>)
 80024c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024c6:	89ba      	ldrh	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d202      	bcs.n	80024d2 <recvfrom+0x32a>
 80024cc:	89bb      	ldrh	r3, [r7, #12]
 80024ce:	83fb      	strh	r3, [r7, #30]
 80024d0:	e004      	b.n	80024dc <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	4a28      	ldr	r2, [pc, #160]	@ (8002578 <recvfrom+0x3d0>)
 80024d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024da:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80024dc:	8bfa      	ldrh	r2, [r7, #30]
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fb0a 	bl	8001afc <wiz_recv_data>
			break;
 80024e8:	e00b      	b.n	8002502 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80024ea:	8bfa      	ldrh	r2, [r7, #30]
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fb5d 	bl	8001bb0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	491f      	ldr	r1, [pc, #124]	@ (8002578 <recvfrom+0x3d0>)
 80024fa:	8bfa      	ldrh	r2, [r7, #30]
 80024fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002500:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	3301      	adds	r3, #1
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800250e:	2140      	movs	r1, #64	@ 0x40
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff f8f9 	bl	8001708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002516:	bf00      	nop
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	3301      	adds	r3, #1
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff f8a3 	bl	8001670 <WIZCHIP_READ>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f3      	bne.n	8002518 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	4a11      	ldr	r2, [pc, #68]	@ (8002578 <recvfrom+0x3d0>)
 8002534:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	8bfa      	ldrh	r2, [r7, #30]
 800253c:	1a8a      	subs	r2, r1, r2
 800253e:	b291      	uxth	r1, r2
 8002540:	4a0d      	ldr	r2, [pc, #52]	@ (8002578 <recvfrom+0x3d0>)
 8002542:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	4a0b      	ldr	r2, [pc, #44]	@ (8002578 <recvfrom+0x3d0>)
 800254a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	4a09      	ldr	r2, [pc, #36]	@ (800257c <recvfrom+0x3d4>)
 8002556:	5cd2      	ldrb	r2, [r2, r3]
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	b2d1      	uxtb	r1, r2
 8002560:	4a06      	ldr	r2, [pc, #24]	@ (800257c <recvfrom+0x3d4>)
 8002562:	54d1      	strb	r1, [r2, r3]
 8002564:	e003      	b.n	800256e <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <recvfrom+0x3d4>)
 800256a:	2100      	movs	r1, #0
 800256c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800256e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200002fc 	.word	0x200002fc
 800257c:	2000030c 	.word	0x2000030c

08002580 <SPIReadWrite>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800258a:	bf00      	nop
 800258c:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <SPIReadWrite+0x4c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d1f8      	bne.n	800258c <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 800259a:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <SPIReadWrite+0x4c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	330c      	adds	r3, #12
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 80025a4:	bf00      	nop
 80025a6:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <SPIReadWrite+0x4c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d1f8      	bne.n	80025a6 <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <SPIReadWrite+0x4c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	200000e4 	.word	0x200000e4

080025d0 <wizchip_select>:

void  wizchip_select(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2102      	movs	r1, #2
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025dc:	f001 f9ae 	bl	800393c <HAL_GPIO_WritePin>
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80025e8:	2201      	movs	r2, #1
 80025ea:	2102      	movs	r1, #2
 80025ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025f0:	f001 f9a4 	bl	800393c <HAL_GPIO_WritePin>
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <wizchip_read>:

uint8_t wizchip_read()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7ff ffbe 	bl	8002580 <SPIReadWrite>
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
	return rb;
 8002608:	79fb      	ldrb	r3, [r7, #7]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ffae 	bl	8002580 <SPIReadWrite>
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8002638:	2300      	movs	r3, #0
 800263a:	81fb      	strh	r3, [r7, #14]
 800263c:	e00c      	b.n	8002658 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff9e 	bl	8002580 <SPIReadWrite>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	701a      	strb	r2, [r3, #0]
		pBuf++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3301      	adds	r3, #1
 8002650:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8002652:	89fb      	ldrh	r3, [r7, #14]
 8002654:	3301      	adds	r3, #1
 8002656:	81fb      	strh	r3, [r7, #14]
 8002658:	89fa      	ldrh	r2, [r7, #14]
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	429a      	cmp	r2, r3
 800265e:	d3ee      	bcc.n	800263e <wizchip_readburst+0x12>
	}
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8002676:	2300      	movs	r3, #0
 8002678:	81fb      	strh	r3, [r7, #14]
 800267a:	e00a      	b.n	8002692 <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff7d 	bl	8002580 <SPIReadWrite>
		pBuf++;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3301      	adds	r3, #1
 800268a:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	3301      	adds	r3, #1
 8002690:	81fb      	strh	r3, [r7, #14]
 8002692:	89fa      	ldrh	r2, [r7, #14]
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	429a      	cmp	r2, r3
 8002698:	d3f0      	bcc.n	800267c <wizchip_writeburst+0x12>
	}
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <W5500IOInit>:

void W5500IOInit()
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA10
	 * and
	 * CS->PA11
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <W5500IOInit+0x50>)
 80026ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026bc:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <W5500IOInit+0x50>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <W5500IOInit+0x50>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026d0:	2303      	movs	r3, #3
 80026d2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d4:	2301      	movs	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026dc:	2302      	movs	r3, #2
 80026de:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	4619      	mov	r1, r3
 80026e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026e8:	f000 ffa6 	bl	8003638 <HAL_GPIO_Init>
}
 80026ec:	bf00      	nop
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000

080026f8 <W5500Init>:

void W5500Init()
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 80026fe:	4b21      	ldr	r3, [pc, #132]	@ (8002784 <W5500Init+0x8c>)
 8002700:	1d3c      	adds	r4, r7, #4
 8002702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002704:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 8002708:	f7ff ffcc 	bl	80026a4 <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default
 800270c:	2201      	movs	r2, #1
 800270e:	2102      	movs	r1, #2
 8002710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002714:	f001 f912 	bl	800393c <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	2101      	movs	r1, #1
 800271c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002720:	f001 f90c 	bl	800393c <HAL_GPIO_WritePin>
	tmp = 0xFF;
 8002724:	23ff      	movs	r3, #255	@ 0xff
 8002726:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 8002728:	bf00      	nop
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	75fa      	strb	r2, [r7, #23]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1fa      	bne.n	800272a <W5500Init+0x32>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8002734:	2201      	movs	r2, #1
 8002736:	2101      	movs	r1, #1
 8002738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800273c:	f001 f8fe 	bl	800393c <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8002740:	4911      	ldr	r1, [pc, #68]	@ (8002788 <W5500Init+0x90>)
 8002742:	4812      	ldr	r0, [pc, #72]	@ (800278c <W5500Init+0x94>)
 8002744:	f000 f894 	bl	8002870 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8002748:	4911      	ldr	r1, [pc, #68]	@ (8002790 <W5500Init+0x98>)
 800274a:	4812      	ldr	r0, [pc, #72]	@ (8002794 <W5500Init+0x9c>)
 800274c:	f000 f8b6 	bl	80028bc <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8002750:	4911      	ldr	r1, [pc, #68]	@ (8002798 <W5500Init+0xa0>)
 8002752:	4812      	ldr	r0, [pc, #72]	@ (800279c <W5500Init+0xa4>)
 8002754:	f000 f8de 	bl	8002914 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	4619      	mov	r1, r3
 800275c:	2001      	movs	r0, #1
 800275e:	f000 f905 	bl	800296c <ctlwizchip>
 8002762:	4603      	mov	r3, r0
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d104      	bne.n	8002774 <W5500Init+0x7c>
		printf("WIZCHIP Initialized Failed.\r\n");
 800276a:	480d      	ldr	r0, [pc, #52]	@ (80027a0 <W5500Init+0xa8>)
 800276c:	f003 f972 	bl	8005a54 <puts>
		while (1);
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <W5500Init+0x78>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 8002774:	480b      	ldr	r0, [pc, #44]	@ (80027a4 <W5500Init+0xac>)
 8002776:	f003 f96d 	bl	8005a54 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	bf00      	nop
 8002784:	08006b00 	.word	0x08006b00
 8002788:	080025e5 	.word	0x080025e5
 800278c:	080025d1 	.word	0x080025d1
 8002790:	08002613 	.word	0x08002613
 8002794:	080025f9 	.word	0x080025f9
 8002798:	0800266b 	.word	0x0800266b
 800279c:	0800262d 	.word	0x0800262d
 80027a0:	08006abc 	.word	0x08006abc
 80027a4:	08006adc 	.word	0x08006adc

080027a8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
 800281c:	2300      	movs	r3, #0
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	807b      	strh	r3, [r7, #2]
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	807b      	strh	r3, [r7, #2]
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <reg_wizchip_cs_cbfunc+0x16>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002886:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <reg_wizchip_cs_cbfunc+0x40>)
 8002888:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <reg_wizchip_cs_cbfunc+0x44>)
 800288a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800288c:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <reg_wizchip_cs_cbfunc+0x40>)
 800288e:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <reg_wizchip_cs_cbfunc+0x48>)
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	e006      	b.n	80028a2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002894:	4a06      	ldr	r2, [pc, #24]	@ (80028b0 <reg_wizchip_cs_cbfunc+0x40>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800289a:	4a05      	ldr	r2, [pc, #20]	@ (80028b0 <reg_wizchip_cs_cbfunc+0x40>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6193      	str	r3, [r2, #24]
   }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000038 	.word	0x20000038
 80028b4:	080027c5 	.word	0x080027c5
 80028b8:	080027d3 	.word	0x080027d3

080028bc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80028c6:	bf00      	nop
 80028c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002908 <reg_wizchip_spi_cbfunc+0x4c>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f9      	beq.n	80028c8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <reg_wizchip_spi_cbfunc+0x24>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80028e0:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <reg_wizchip_spi_cbfunc+0x4c>)
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <reg_wizchip_spi_cbfunc+0x50>)
 80028e4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80028e6:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <reg_wizchip_spi_cbfunc+0x4c>)
 80028e8:	4a09      	ldr	r2, [pc, #36]	@ (8002910 <reg_wizchip_spi_cbfunc+0x54>)
 80028ea:	621a      	str	r2, [r3, #32]
 80028ec:	e006      	b.n	80028fc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80028ee:	4a06      	ldr	r2, [pc, #24]	@ (8002908 <reg_wizchip_spi_cbfunc+0x4c>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80028f4:	4a04      	ldr	r2, [pc, #16]	@ (8002908 <reg_wizchip_spi_cbfunc+0x4c>)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6213      	str	r3, [r2, #32]
   }
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	20000038 	.word	0x20000038
 800290c:	08002819 	.word	0x08002819
 8002910:	08002829 	.word	0x08002829

08002914 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800291e:	bf00      	nop
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f9      	beq.n	8002920 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <reg_wizchip_spiburst_cbfunc+0x24>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002938:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800293a:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <reg_wizchip_spiburst_cbfunc+0x50>)
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002940:	4a09      	ldr	r2, [pc, #36]	@ (8002968 <reg_wizchip_spiburst_cbfunc+0x54>)
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28
 8002944:	e006      	b.n	8002954 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8002946:	4a06      	ldr	r2, [pc, #24]	@ (8002960 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800294c:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	20000038 	.word	0x20000038
 8002964:	0800283f 	.word	0x0800283f
 8002968:	08002857 	.word	0x08002857

0800296c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f200 80c5 	bhi.w	8002b16 <ctlwizchip+0x1aa>
 800298c:	a201      	add	r2, pc, #4	@ (adr r2, 8002994 <ctlwizchip+0x28>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029d5 	.word	0x080029d5
 8002998:	080029db 	.word	0x080029db
 800299c:	08002a07 	.word	0x08002a07
 80029a0:	080029fb 	.word	0x080029fb
 80029a4:	08002a15 	.word	0x08002a15
 80029a8:	08002a21 	.word	0x08002a21
 80029ac:	08002a2f 	.word	0x08002a2f
 80029b0:	08002a55 	.word	0x08002a55
 80029b4:	08002a77 	.word	0x08002a77
 80029b8:	08002abb 	.word	0x08002abb
 80029bc:	08002ac1 	.word	0x08002ac1
 80029c0:	08002ac9 	.word	0x08002ac9
 80029c4:	08002b1d 	.word	0x08002b1d
 80029c8:	08002ad1 	.word	0x08002ad1
 80029cc:	08002adf 	.word	0x08002adf
 80029d0:	08002afb 	.word	0x08002afb
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80029d4:	f000 f8e8 	bl	8002ba8 <wizchip_sw_reset>
         break;
 80029d8:	e0a1      	b.n	8002b1e <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3308      	adds	r3, #8
 80029e8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 f925 	bl	8002c40 <wizchip_init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	e092      	b.n	8002b20 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f9aa 	bl	8002d58 <wizchip_clrinterrupt>
         break;
 8002a04:	e08b      	b.n	8002b1e <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002a06:	f000 f9db 	bl	8002dc0 <wizchip_getinterrupt>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	801a      	strh	r2, [r3, #0]
         break;
 8002a12:	e084      	b.n	8002b1e <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f9f6 	bl	8002e0a <wizchip_setinterruptmask>
         break;         
 8002a1e:	e07e      	b.n	8002b1e <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002a20:	f000 fa0e 	bl	8002e40 <wizchip_getinterruptmask>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	801a      	strh	r2, [r3, #0]
         break;
 8002a2c:	e077      	b.n	8002b1e <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8002a3e:	f7fe fe63 	bl	8001708 <WIZCHIP_WRITE>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8002a4e:	f7fe fe5b 	bl	8001708 <WIZCHIP_WRITE>
         break;
 8002a52:	e064      	b.n	8002b1e <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002a54:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8002a58:	f7fe fe0a 	bl	8001670 <WIZCHIP_READ>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	b29c      	uxth	r4, r3
 8002a62:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8002a66:	f7fe fe03 	bl	8001670 <WIZCHIP_READ>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4423      	add	r3, r4
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	801a      	strh	r2, [r3, #0]
         break;
 8002a74:	e053      	b.n	8002b1e <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002a76:	4b2c      	ldr	r3, [pc, #176]	@ (8002b28 <ctlwizchip+0x1bc>)
 8002a78:	789a      	ldrb	r2, [r3, #2]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a29      	ldr	r2, [pc, #164]	@ (8002b28 <ctlwizchip+0x1bc>)
 8002a84:	78d2      	ldrb	r2, [r2, #3]
 8002a86:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	4a26      	ldr	r2, [pc, #152]	@ (8002b28 <ctlwizchip+0x1bc>)
 8002a8e:	7912      	ldrb	r2, [r2, #4]
 8002a90:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	3303      	adds	r3, #3
 8002a96:	4a24      	ldr	r2, [pc, #144]	@ (8002b28 <ctlwizchip+0x1bc>)
 8002a98:	7952      	ldrb	r2, [r2, #5]
 8002a9a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4a21      	ldr	r2, [pc, #132]	@ (8002b28 <ctlwizchip+0x1bc>)
 8002aa2:	7992      	ldrb	r2, [r2, #6]
 8002aa4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	3305      	adds	r3, #5
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b28 <ctlwizchip+0x1bc>)
 8002aac:	79d2      	ldrb	r2, [r2, #7]
 8002aae:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	3306      	adds	r3, #6
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
         break;
 8002ab8:	e031      	b.n	8002b1e <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002aba:	f000 fa13 	bl	8002ee4 <wizphy_reset>
         break;
 8002abe:	e02e      	b.n	8002b1e <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002ac0:	6838      	ldr	r0, [r7, #0]
 8002ac2:	f000 fa36 	bl	8002f32 <wizphy_setphyconf>
         break;
 8002ac6:	e02a      	b.n	8002b1e <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002ac8:	6838      	ldr	r0, [r7, #0]
 8002aca:	f000 fa75 	bl	8002fb8 <wizphy_getphyconf>
         break;
 8002ace:	e026      	b.n	8002b1e <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fad9 	bl	800308c <wizphy_setphypmode>
 8002ada:	4603      	mov	r3, r0
 8002adc:	e020      	b.n	8002b20 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002ade:	f000 f9e8 	bl	8002eb2 <wizphy_getphypmode>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2bff      	cmp	r3, #255	@ 0xff
 8002aea:	d102      	bne.n	8002af2 <ctlwizchip+0x186>
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	e016      	b.n	8002b20 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	7dfa      	ldrb	r2, [r7, #23]
 8002af6:	701a      	strb	r2, [r3, #0]
         break;
 8002af8:	e011      	b.n	8002b1e <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002afa:	f000 f9c4 	bl	8002e86 <wizphy_getphylink>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
 8002b04:	2bff      	cmp	r3, #255	@ 0xff
 8002b06:	d102      	bne.n	8002b0e <ctlwizchip+0x1a2>
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0c:	e008      	b.n	8002b20 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	7dfa      	ldrb	r2, [r7, #23]
 8002b12:	701a      	strb	r2, [r3, #0]
         break;
 8002b14:	e003      	b.n	8002b1e <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	e001      	b.n	8002b20 <ctlwizchip+0x1b4>
         break;
 8002b1c:	bf00      	nop
   }
   return 0;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	20000038 	.word	0x20000038

08002b2c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d82c      	bhi.n	8002b98 <ctlnetwork+0x6c>
 8002b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b44 <ctlnetwork+0x18>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b5d 	.word	0x08002b5d
 8002b48:	08002b65 	.word	0x08002b65
 8002b4c:	08002b6d 	.word	0x08002b6d
 8002b50:	08002b7b 	.word	0x08002b7b
 8002b54:	08002b89 	.word	0x08002b89
 8002b58:	08002b91 	.word	0x08002b91
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002b5c:	6838      	ldr	r0, [r7, #0]
 8002b5e:	f000 fadf 	bl	8003120 <wizchip_setnetinfo>
         break;
 8002b62:	e01c      	b.n	8002b9e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002b64:	6838      	ldr	r0, [r7, #0]
 8002b66:	f000 fb1b 	bl	80031a0 <wizchip_getnetinfo>
         break;
 8002b6a:	e018      	b.n	8002b9e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fb55 	bl	8003220 <wizchip_setnetmode>
 8002b76:	4603      	mov	r3, r0
 8002b78:	e012      	b.n	8002ba0 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8002b7a:	f000 fb73 	bl	8003264 <wizchip_getnetmode>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	701a      	strb	r2, [r3, #0]
         break;
 8002b86:	e00a      	b.n	8002b9e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002b88:	6838      	ldr	r0, [r7, #0]
 8002b8a:	f000 fb73 	bl	8003274 <wizchip_settimeout>
         break;
 8002b8e:	e006      	b.n	8002b9e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002b90:	6838      	ldr	r0, [r7, #0]
 8002b92:	f000 fb90 	bl	80032b6 <wizchip_gettimeout>
         break;
 8002b96:	e002      	b.n	8002b9e <ctlnetwork+0x72>
      default:
         return -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	e000      	b.n	8002ba0 <ctlnetwork+0x74>
   }
   return 0;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	2206      	movs	r2, #6
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002bb8:	f7fe fdf4 	bl	80017a4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002bc8:	f7fe fdec 	bl	80017a4 <WIZCHIP_READ_BUF>
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002bd8:	f7fe fde4 	bl	80017a4 <WIZCHIP_READ_BUF>
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	2204      	movs	r2, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002be8:	f7fe fddc 	bl	80017a4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002bec:	2180      	movs	r1, #128	@ 0x80
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fe fd8a 	bl	8001708 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fe fd3b 	bl	8001670 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2206      	movs	r2, #6
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002c04:	f7fe fe2e 	bl	8001864 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c14:	f7fe fe26 	bl	8001864 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002c18:	f107 0310 	add.w	r3, r7, #16
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002c24:	f7fe fe1e 	bl	8001864 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002c28:	f107 030c 	add.w	r3, r7, #12
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002c34:	f7fe fe16 	bl	8001864 <WIZCHIP_WRITE_BUF>
}
 8002c38:	bf00      	nop
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002c4e:	f7ff ffab 	bl	8002ba8 <wizchip_sw_reset>
   if(txsize)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d03b      	beq.n	8002cd0 <wizchip_init+0x90>
   {
      tmp = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e015      	b.n	8002c8e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	7bbb      	ldrb	r3, [r7, #14]
 8002c6e:	4413      	add	r3, r2
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	dd02      	ble.n	8002c82 <wizchip_init+0x42>
 8002c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c80:	e066      	b.n	8002d50 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	2b07      	cmp	r3, #7
 8002c94:	dde5      	ble.n	8002c62 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	e015      	b.n	8002cc8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002caa:	4618      	mov	r0, r3
 8002cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fe fd26 	bl	8001708 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ccc:	2b07      	cmp	r3, #7
 8002cce:	dde5      	ble.n	8002c9c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03b      	beq.n	8002d4e <wizchip_init+0x10e>
   {
      tmp = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e015      	b.n	8002d0c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	4413      	add	r3, r2
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002cf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	dd02      	ble.n	8002d00 <wizchip_init+0xc0>
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e027      	b.n	8002d50 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d10:	2b07      	cmp	r3, #7
 8002d12:	dde5      	ble.n	8002ce0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e015      	b.n	8002d46 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	3301      	adds	r3, #1
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fe fce7 	bl	8001708 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4a:	2b07      	cmp	r3, #7
 8002d4c:	dde5      	ble.n	8002d1a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	f023 030f 	bic.w	r3, r3, #15
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8002d7c:	f7fe fcc4 	bl	8001708 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e014      	b.n	8002db0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8002d86:	7bba      	ldrb	r2, [r7, #14]
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	fa42 f303 	asr.w	r3, r2, r3
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <wizchip_clrinterrupt+0x52>
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002da2:	211f      	movs	r1, #31
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe fcaf 	bl	8001708 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	3301      	adds	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b07      	cmp	r3, #7
 8002db4:	d9e7      	bls.n	8002d86 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002dd2:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8002dd6:	f7fe fc4b 	bl	8001670 <WIZCHIP_READ>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f023 030f 	bic.w	r3, r3, #15
 8002de0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002de2:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8002de6:	f7fe fc43 	bl	8001670 <WIZCHIP_READ>
 8002dea:	4603      	mov	r3, r0
 8002dec:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002dee:	79bb      	ldrb	r3, [r7, #6]
 8002df0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002df2:	88bb      	ldrh	r3, [r7, #4]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002e00:	88bb      	ldrh	r3, [r7, #4]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	4619      	mov	r1, r3
 8002e24:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8002e28:	f7fe fc6e 	bl	8001708 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002e2c:	7bbb      	ldrb	r3, [r7, #14]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8002e34:	f7fe fc68 	bl	8001708 <WIZCHIP_WRITE>
#endif   
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002e52:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8002e56:	f7fe fc0b 	bl	8001670 <WIZCHIP_READ>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002e5e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8002e62:	f7fe fc05 	bl	8001670 <WIZCHIP_READ>
 8002e66:	4603      	mov	r3, r0
 8002e68:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002e6a:	79bb      	ldrb	r3, [r7, #6]
 8002e6c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002e7c:	88bb      	ldrh	r3, [r7, #4]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002e90:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002e94:	f7fe fbec 	bl	8001670 <WIZCHIP_READ>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002ebc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002ec0:	f7fe fbd6 	bl	8001670 <WIZCHIP_READ>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eca:	2b30      	cmp	r3, #48	@ 0x30
 8002ecc:	d102      	bne.n	8002ed4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	71fb      	strb	r3, [r7, #7]
 8002ed2:	e001      	b.n	8002ed8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002eea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002eee:	f7fe fbbf 	bl	8001670 <WIZCHIP_READ>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002efc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4619      	mov	r1, r3
 8002f02:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002f06:	f7fe fbff 	bl	8001708 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002f0a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002f0e:	f7fe fbaf 	bl	8001670 <WIZCHIP_READ>
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f1c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	4619      	mov	r1, r3
 8002f22:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002f26:	f7fe fbef 	bl	8001708 <WIZCHIP_WRITE>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d104      	bne.n	8002f50 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e003      	b.n	8002f58 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f56:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	785b      	ldrb	r3, [r3, #1]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d104      	bne.n	8002f6a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e019      	b.n	8002f9e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	78db      	ldrb	r3, [r3, #3]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10d      	bne.n	8002f8e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	789b      	ldrb	r3, [r3, #2]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d104      	bne.n	8002f84 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	f043 0318 	orr.w	r3, r3, #24
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	e00c      	b.n	8002f9e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	f043 0308 	orr.w	r3, r3, #8
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	e007      	b.n	8002f9e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	789b      	ldrb	r3, [r3, #2]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d103      	bne.n	8002f9e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	f043 0310 	orr.w	r3, r3, #16
 8002f9c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002fa6:	f7fe fbaf 	bl	8001708 <WIZCHIP_WRITE>
   wizphy_reset();
 8002faa:	f7ff ff9b 	bl	8002ee4 <wizphy_reset>
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002fc4:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002fc8:	f7fe fb52 	bl	8001670 <WIZCHIP_READ>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	119b      	asrs	r3, r3, #6
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d001      	beq.n	8002fee <wizphy_getphyconf+0x36>
 8002fea:	2b38      	cmp	r3, #56	@ 0x38
 8002fec:	d103      	bne.n	8002ff6 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	705a      	strb	r2, [r3, #1]
         break;
 8002ff4:	e003      	b.n	8002ffe <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	705a      	strb	r2, [r3, #1]
         break;
 8002ffc:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003004:	3b10      	subs	r3, #16
 8003006:	2b10      	cmp	r3, #16
 8003008:	bf8c      	ite	hi
 800300a:	2201      	movhi	r2, #1
 800300c:	2200      	movls	r2, #0
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	2a00      	cmp	r2, #0
 8003012:	d10f      	bne.n	8003034 <wizphy_getphyconf+0x7c>
 8003014:	4a1b      	ldr	r2, [pc, #108]	@ (8003084 <wizphy_getphyconf+0xcc>)
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	709a      	strb	r2, [r3, #2]
         break;
 8003032:	e003      	b.n	800303c <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	709a      	strb	r2, [r3, #2]
         break;
 800303a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003042:	3b08      	subs	r3, #8
 8003044:	2b18      	cmp	r3, #24
 8003046:	bf8c      	ite	hi
 8003048:	2201      	movhi	r2, #1
 800304a:	2200      	movls	r2, #0
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	2a00      	cmp	r2, #0
 8003050:	d10f      	bne.n	8003072 <wizphy_getphyconf+0xba>
 8003052:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <wizphy_getphyconf+0xd0>)
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	70da      	strb	r2, [r3, #3]
         break;
 8003070:	e003      	b.n	800307a <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	70da      	strb	r2, [r3, #3]
         break;
 8003078:	bf00      	nop
   }
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	00010101 	.word	0x00010101
 8003088:	01010001 	.word	0x01010001

0800308c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800309a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800309e:	f7fe fae7 	bl	8001670 <WIZCHIP_READ>
 80030a2:	4603      	mov	r3, r0
 80030a4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <wizphy_setphypmode+0x2a>
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
 80030b4:	e030      	b.n	8003118 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80030bc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d104      	bne.n	80030ce <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e003      	b.n	80030d6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80030d4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	4619      	mov	r1, r3
 80030da:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80030de:	f7fe fb13 	bl	8001708 <WIZCHIP_WRITE>
   wizphy_reset();
 80030e2:	f7ff feff 	bl	8002ee4 <wizphy_reset>
   tmp = getPHYCFGR();
 80030e6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80030ea:	f7fe fac1 	bl	8001670 <WIZCHIP_READ>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <wizphy_setphypmode+0x88>
 8003102:	2300      	movs	r3, #0
 8003104:	e008      	b.n	8003118 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <wizphy_setphypmode+0x88>
 8003110:	2300      	movs	r3, #0
 8003112:	e001      	b.n	8003118 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2206      	movs	r2, #6
 800312c:	4619      	mov	r1, r3
 800312e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003132:	f7fe fb97 	bl	8001864 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	330e      	adds	r3, #14
 800313a:	2204      	movs	r2, #4
 800313c:	4619      	mov	r1, r3
 800313e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003142:	f7fe fb8f 	bl	8001864 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	330a      	adds	r3, #10
 800314a:	2204      	movs	r2, #4
 800314c:	4619      	mov	r1, r3
 800314e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003152:	f7fe fb87 	bl	8001864 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3306      	adds	r3, #6
 800315a:	2204      	movs	r2, #4
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003162:	f7fe fb7f 	bl	8001864 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7c9a      	ldrb	r2, [r3, #18]
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <wizchip_setnetinfo+0x78>)
 800316c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7cda      	ldrb	r2, [r3, #19]
 8003172:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <wizchip_setnetinfo+0x78>)
 8003174:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7d1a      	ldrb	r2, [r3, #20]
 800317a:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <wizchip_setnetinfo+0x78>)
 800317c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7d5a      	ldrb	r2, [r3, #21]
 8003182:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <wizchip_setnetinfo+0x78>)
 8003184:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7d9a      	ldrb	r2, [r3, #22]
 800318a:	4b04      	ldr	r3, [pc, #16]	@ (800319c <wizchip_setnetinfo+0x7c>)
 800318c:	701a      	strb	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000314 	.word	0x20000314
 800319c:	20000318 	.word	0x20000318

080031a0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2206      	movs	r2, #6
 80031ac:	4619      	mov	r1, r3
 80031ae:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80031b2:	f7fe faf7 	bl	80017a4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	330e      	adds	r3, #14
 80031ba:	2204      	movs	r2, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80031c2:	f7fe faef 	bl	80017a4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	330a      	adds	r3, #10
 80031ca:	2204      	movs	r2, #4
 80031cc:	4619      	mov	r1, r3
 80031ce:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80031d2:	f7fe fae7 	bl	80017a4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3306      	adds	r3, #6
 80031da:	2204      	movs	r2, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80031e2:	f7fe fadf 	bl	80017a4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80031e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <wizchip_getnetinfo+0x78>)
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80031ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <wizchip_getnetinfo+0x78>)
 80031f0:	785a      	ldrb	r2, [r3, #1]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80031f6:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <wizchip_getnetinfo+0x78>)
 80031f8:	789a      	ldrb	r2, [r3, #2]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <wizchip_getnetinfo+0x78>)
 8003200:	78da      	ldrb	r2, [r3, #3]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003206:	4b05      	ldr	r3, [pc, #20]	@ (800321c <wizchip_getnetinfo+0x7c>)
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	759a      	strb	r2, [r3, #22]
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000314 	.word	0x20000314
 800321c:	20000318 	.word	0x20000318

08003220 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <wizchip_setnetmode+0x1e>
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	e00e      	b.n	800325c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800323e:	2000      	movs	r0, #0
 8003240:	f7fe fa16 	bl	8001670 <WIZCHIP_READ>
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	4313      	orrs	r3, r2
 800324e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	4619      	mov	r1, r3
 8003254:	2000      	movs	r0, #0
 8003256:	f7fe fa57 	bl	8001708 <WIZCHIP_WRITE>
   return 0;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003268:	2000      	movs	r0, #0
 800326a:	f7fe fa01 	bl	8001670 <WIZCHIP_READ>
 800326e:	4603      	mov	r3, r0
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}

08003274 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8003286:	f7fe fa3f 	bl	8001708 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	885b      	ldrh	r3, [r3, #2]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	b29b      	uxth	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	4619      	mov	r1, r3
 8003296:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800329a:	f7fe fa35 	bl	8001708 <WIZCHIP_WRITE>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	885b      	ldrh	r3, [r3, #2]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	4619      	mov	r1, r3
 80032a6:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80032aa:	f7fe fa2d 	bl	8001708 <WIZCHIP_WRITE>
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80032b6:	b590      	push	{r4, r7, lr}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80032be:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80032c2:	f7fe f9d5 	bl	8001670 <WIZCHIP_READ>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80032ce:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80032d2:	f7fe f9cd 	bl	8001670 <WIZCHIP_READ>
 80032d6:	4603      	mov	r3, r0
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	b29c      	uxth	r4, r3
 80032dc:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80032e0:	f7fe f9c6 	bl	8001670 <WIZCHIP_READ>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4423      	add	r3, r4
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	805a      	strh	r2, [r3, #2]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd90      	pop	{r4, r7, pc}
	...

080032f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032f8:	480d      	ldr	r0, [pc, #52]	@ (8003330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032fc:	f7fd fd58 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003300:	480c      	ldr	r0, [pc, #48]	@ (8003334 <LoopForever+0x6>)
  ldr r1, =_edata
 8003302:	490d      	ldr	r1, [pc, #52]	@ (8003338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003304:	4a0d      	ldr	r2, [pc, #52]	@ (800333c <LoopForever+0xe>)
  movs r3, #0
 8003306:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003308:	e002      	b.n	8003310 <LoopCopyDataInit>

0800330a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800330a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800330c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800330e:	3304      	adds	r3, #4

08003310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003314:	d3f9      	bcc.n	800330a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003316:	4a0a      	ldr	r2, [pc, #40]	@ (8003340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003318:	4c0a      	ldr	r4, [pc, #40]	@ (8003344 <LoopForever+0x16>)
  movs r3, #0
 800331a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800331c:	e001      	b.n	8003322 <LoopFillZerobss>

0800331e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800331e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003320:	3204      	adds	r2, #4

08003322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003324:	d3fb      	bcc.n	800331e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003326:	f002 fda5 	bl	8005e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800332a:	f7fd f949 	bl	80005c0 <main>

0800332e <LoopForever>:

LoopForever:
    b LoopForever
 800332e:	e7fe      	b.n	800332e <LoopForever>
  ldr   r0, =_estack
 8003330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003338:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800333c:	08006b94 	.word	0x08006b94
  ldr r2, =_sbss
 8003340:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8003344:	2000046c 	.word	0x2000046c

08003348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003348:	e7fe      	b.n	8003348 <ADC1_2_IRQHandler>

0800334a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003354:	2003      	movs	r0, #3
 8003356:	f000 f93d 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800335a:	2000      	movs	r0, #0
 800335c:	f000 f80e 	bl	800337c <HAL_InitTick>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	71fb      	strb	r3, [r7, #7]
 800336a:	e001      	b.n	8003370 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800336c:	f7fd fb58 	bl	8000a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003370:	79fb      	ldrb	r3, [r7, #7]

}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003388:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <HAL_InitTick+0x68>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d022      	beq.n	80033d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003390:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <HAL_InitTick+0x6c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b13      	ldr	r3, [pc, #76]	@ (80033e4 <HAL_InitTick+0x68>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800339c:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 f93a 	bl	800361e <HAL_SYSTICK_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10f      	bne.n	80033d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	d809      	bhi.n	80033ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b6:	2200      	movs	r2, #0
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	f04f 30ff 	mov.w	r0, #4294967295
 80033be:	f000 f914 	bl	80035ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033c2:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <HAL_InitTick+0x70>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e007      	b.n	80033da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
 80033ce:	e004      	b.n	80033da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e001      	b.n	80033da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033da:	7bfb      	ldrb	r3, [r7, #15]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000068 	.word	0x20000068
 80033e8:	20000030 	.word	0x20000030
 80033ec:	20000064 	.word	0x20000064

080033f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f4:	4b05      	ldr	r3, [pc, #20]	@ (800340c <HAL_IncTick+0x1c>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_IncTick+0x20>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	4a03      	ldr	r2, [pc, #12]	@ (800340c <HAL_IncTick+0x1c>)
 8003400:	6013      	str	r3, [r2, #0]
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	2000031c 	.word	0x2000031c
 8003410:	20000068 	.word	0x20000068

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	@ (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	2000031c 	.word	0x2000031c

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff ffee 	bl	8003414 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d004      	beq.n	8003450 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b09      	ldr	r3, [pc, #36]	@ (800346c <HAL_Delay+0x40>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4413      	add	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  }

   while ((HAL_GetTick() - tickstart) < wait)
 8003450:	bf00      	nop
 8003452:	f7ff ffdf 	bl	8003414 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	429a      	cmp	r2, r3
 8003460:	d8f7      	bhi.n	8003452 <HAL_Delay+0x26>
  {
  }
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000068 	.word	0x20000068

08003470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003480:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800349c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a2:	4a04      	ldr	r2, [pc, #16]	@ (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	60d3      	str	r3, [r2, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034bc:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <__NVIC_GetPriorityGrouping+0x18>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0307 	and.w	r3, r3, #7
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db0a      	blt.n	80034fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	490c      	ldr	r1, [pc, #48]	@ (8003520 <__NVIC_SetPriority+0x4c>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034fc:	e00a      	b.n	8003514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4908      	ldr	r1, [pc, #32]	@ (8003524 <__NVIC_SetPriority+0x50>)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3b04      	subs	r3, #4
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	440b      	add	r3, r1
 8003512:	761a      	strb	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	@ 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f1c3 0307 	rsb	r3, r3, #7
 8003542:	2b04      	cmp	r3, #4
 8003544:	bf28      	it	cs
 8003546:	2304      	movcs	r3, #4
 8003548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	2b06      	cmp	r3, #6
 8003550:	d902      	bls.n	8003558 <NVIC_EncodePriority+0x30>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3b03      	subs	r3, #3
 8003556:	e000      	b.n	800355a <NVIC_EncodePriority+0x32>
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	f04f 32ff 	mov.w	r2, #4294967295
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43d9      	mvns	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	4313      	orrs	r3, r2
         );
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	@ 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035a0:	d301      	bcc.n	80035a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <SysTick_Config+0x40>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ae:	210f      	movs	r1, #15
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f7ff ff8e 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <SysTick_Config+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <SysTick_Config+0x40>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff47 	bl	8003470 <__NVIC_SetPriorityGrouping>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035f8:	f7ff ff5e 	bl	80034b8 <__NVIC_GetPriorityGrouping>
 80035fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	f7ff ff90 	bl	8003528 <NVIC_EncodePriority>
 8003608:	4602      	mov	r2, r0
 800360a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff5f 	bl	80034d4 <__NVIC_SetPriority>
}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ffb2 	bl	8003590 <SysTick_Config>
 800362c:	4603      	mov	r3, r0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003646:	e15a      	b.n	80038fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	4013      	ands	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 814c 	beq.w	80038f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d005      	beq.n	8003678 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003674:	2b02      	cmp	r3, #2
 8003676:	d130      	bne.n	80036da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ae:	2201      	movs	r2, #1
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0201 	and.w	r2, r3, #1
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d017      	beq.n	8003716 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2203      	movs	r2, #3
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d123      	bne.n	800376a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	08da      	lsrs	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3208      	adds	r2, #8
 800372a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	220f      	movs	r2, #15
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	6939      	ldr	r1, [r7, #16]
 8003766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	2203      	movs	r2, #3
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0203 	and.w	r2, r3, #3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80a6 	beq.w	80038f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ac:	4b5b      	ldr	r3, [pc, #364]	@ (800391c <HAL_GPIO_Init+0x2e4>)
 80037ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b0:	4a5a      	ldr	r2, [pc, #360]	@ (800391c <HAL_GPIO_Init+0x2e4>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80037b8:	4b58      	ldr	r3, [pc, #352]	@ (800391c <HAL_GPIO_Init+0x2e4>)
 80037ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c4:	4a56      	ldr	r2, [pc, #344]	@ (8003920 <HAL_GPIO_Init+0x2e8>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	220f      	movs	r2, #15
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037ee:	d01f      	beq.n	8003830 <HAL_GPIO_Init+0x1f8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d019      	beq.n	800382c <HAL_GPIO_Init+0x1f4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003928 <HAL_GPIO_Init+0x2f0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d013      	beq.n	8003828 <HAL_GPIO_Init+0x1f0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a4a      	ldr	r2, [pc, #296]	@ (800392c <HAL_GPIO_Init+0x2f4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00d      	beq.n	8003824 <HAL_GPIO_Init+0x1ec>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a49      	ldr	r2, [pc, #292]	@ (8003930 <HAL_GPIO_Init+0x2f8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <HAL_GPIO_Init+0x1e8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a48      	ldr	r2, [pc, #288]	@ (8003934 <HAL_GPIO_Init+0x2fc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_GPIO_Init+0x1e4>
 8003818:	2305      	movs	r3, #5
 800381a:	e00a      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 800381c:	2306      	movs	r3, #6
 800381e:	e008      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003820:	2304      	movs	r3, #4
 8003822:	e006      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003824:	2303      	movs	r3, #3
 8003826:	e004      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003828:	2302      	movs	r3, #2
 800382a:	e002      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_GPIO_Init+0x1fa>
 8003830:	2300      	movs	r3, #0
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	f002 0203 	and.w	r2, r2, #3
 8003838:	0092      	lsls	r2, r2, #2
 800383a:	4093      	lsls	r3, r2
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003842:	4937      	ldr	r1, [pc, #220]	@ (8003920 <HAL_GPIO_Init+0x2e8>)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3302      	adds	r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003850:	4b39      	ldr	r3, [pc, #228]	@ (8003938 <HAL_GPIO_Init+0x300>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003874:	4a30      	ldr	r2, [pc, #192]	@ (8003938 <HAL_GPIO_Init+0x300>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800387a:	4b2f      	ldr	r3, [pc, #188]	@ (8003938 <HAL_GPIO_Init+0x300>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800389e:	4a26      	ldr	r2, [pc, #152]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038a4:	4b24      	ldr	r3, [pc, #144]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038f2:	4a11      	ldr	r2, [pc, #68]	@ (8003938 <HAL_GPIO_Init+0x300>)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	3301      	adds	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	f47f ae9d 	bne.w	8003648 <HAL_GPIO_Init+0x10>
  }
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40021000 	.word	0x40021000
 8003920:	40010000 	.word	0x40010000
 8003924:	48000400 	.word	0x48000400
 8003928:	48000800 	.word	0x48000800
 800392c:	48000c00 	.word	0x48000c00
 8003930:	48001000 	.word	0x48001000
 8003934:	48001400 	.word	0x48001400
 8003938:	40010400 	.word	0x40010400

0800393c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
 8003948:	4613      	mov	r3, r2
 800394a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003958:	e002      	b.n	8003960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d141      	bne.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800397a:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003986:	d131      	bne.n	80039ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003988:	4b47      	ldr	r3, [pc, #284]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800398e:	4a46      	ldr	r2, [pc, #280]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003994:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003998:	4b43      	ldr	r3, [pc, #268]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039a0:	4a41      	ldr	r2, [pc, #260]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039a8:	4b40      	ldr	r3, [pc, #256]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2232      	movs	r2, #50	@ 0x32
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	0c9b      	lsrs	r3, r3, #18
 80039ba:	3301      	adds	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039be:	e002      	b.n	80039c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c6:	4b38      	ldr	r3, [pc, #224]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d2:	d102      	bne.n	80039da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f2      	bne.n	80039c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039da:	4b33      	ldr	r3, [pc, #204]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e6:	d158      	bne.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e057      	b.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039ec:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f2:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039fc:	e04d      	b.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a04:	d141      	bne.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a06:	4b28      	ldr	r3, [pc, #160]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a12:	d131      	bne.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a14:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a1a:	4a23      	ldr	r2, [pc, #140]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a24:	4b20      	ldr	r3, [pc, #128]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a34:	4b1d      	ldr	r3, [pc, #116]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2232      	movs	r2, #50	@ 0x32
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4a:	e002      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a52:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5e:	d102      	bne.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f2      	bne.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a66:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a72:	d112      	bne.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e011      	b.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a78:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a88:	e007      	b.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a8a:	4b07      	ldr	r3, [pc, #28]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a92:	4a05      	ldr	r2, [pc, #20]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	20000030 	.word	0x20000030
 8003ab0:	431bde83 	.word	0x431bde83

08003ab4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ab8:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a04      	ldr	r2, [pc, #16]	@ (8003ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003abe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ac2:	6093      	str	r3, [r2, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40007000 	.word	0x40007000

08003ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e2fe      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d075      	beq.n	8003bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af2:	4b97      	ldr	r3, [pc, #604]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003afc:	4b94      	ldr	r3, [pc, #592]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d102      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3e>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d002      	beq.n	8003b18 <HAL_RCC_OscConfig+0x44>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	4b8d      	ldr	r3, [pc, #564]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d05b      	beq.n	8003bdc <HAL_RCC_OscConfig+0x108>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d157      	bne.n	8003bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e2d9      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b38:	d106      	bne.n	8003b48 <HAL_RCC_OscConfig+0x74>
 8003b3a:	4b85      	ldr	r3, [pc, #532]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a84      	ldr	r2, [pc, #528]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e01d      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x98>
 8003b52:	4b7f      	ldr	r3, [pc, #508]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7e      	ldr	r2, [pc, #504]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7b      	ldr	r2, [pc, #492]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b6c:	4b78      	ldr	r3, [pc, #480]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a77      	ldr	r2, [pc, #476]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b75      	ldr	r3, [pc, #468]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a74      	ldr	r2, [pc, #464]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7ff fc42 	bl	8003414 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b94:	f7ff fc3e 	bl	8003414 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e29e      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0xc0>
 8003bb2:	e014      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7ff fc2e 	bl	8003414 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7ff fc2a 	bl	8003414 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	@ 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e28a      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bce:	4b60      	ldr	r3, [pc, #384]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0xe8>
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d075      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bea:	4b59      	ldr	r3, [pc, #356]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf4:	4b56      	ldr	r3, [pc, #344]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_OscConfig+0x136>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d002      	beq.n	8003c10 <HAL_RCC_OscConfig+0x13c>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d11f      	bne.n	8003c50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c10:	4b4f      	ldr	r3, [pc, #316]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_OscConfig+0x154>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e25d      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b49      	ldr	r3, [pc, #292]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	4946      	ldr	r1, [pc, #280]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c3c:	4b45      	ldr	r3, [pc, #276]	@ (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fb9b 	bl	800337c <HAL_InitTick>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d043      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e249      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d023      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c58:	4b3d      	ldr	r3, [pc, #244]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7ff fbd6 	bl	8003414 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7ff fbd2 	bl	8003414 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e232      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7e:	4b34      	ldr	r3, [pc, #208]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	4b31      	ldr	r3, [pc, #196]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	492d      	ldr	r1, [pc, #180]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
 8003c9e:	e01a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7ff fbb2 	bl	8003414 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7ff fbae 	bl	8003414 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e20e      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc6:	4b22      	ldr	r3, [pc, #136]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x1e0>
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d041      	beq.n	8003d66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01c      	beq.n	8003d24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cea:	4b19      	ldr	r3, [pc, #100]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf0:	4a17      	ldr	r2, [pc, #92]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfa:	f7ff fb8b 	bl	8003414 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d02:	f7ff fb87 	bl	8003414 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1e7      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d14:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ef      	beq.n	8003d02 <HAL_RCC_OscConfig+0x22e>
 8003d22:	e020      	b.n	8003d66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d2a:	4a09      	ldr	r2, [pc, #36]	@ (8003d50 <HAL_RCC_OscConfig+0x27c>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7ff fb6e 	bl	8003414 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d3a:	e00d      	b.n	8003d58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7ff fb6a 	bl	8003414 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d906      	bls.n	8003d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1ca      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	20000064 	.word	0x20000064
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d58:	4b8c      	ldr	r3, [pc, #560]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ea      	bne.n	8003d3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80a6 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d74:	2300      	movs	r3, #0
 8003d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d78:	4b84      	ldr	r3, [pc, #528]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2b4>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x2b6>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d92:	4a7e      	ldr	r2, [pc, #504]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003da6:	2301      	movs	r3, #1
 8003da8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	4b79      	ldr	r3, [pc, #484]	@ (8003f90 <HAL_RCC_OscConfig+0x4bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d118      	bne.n	8003de8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4b76      	ldr	r3, [pc, #472]	@ (8003f90 <HAL_RCC_OscConfig+0x4bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a75      	ldr	r2, [pc, #468]	@ (8003f90 <HAL_RCC_OscConfig+0x4bc>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc2:	f7ff fb27 	bl	8003414 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7ff fb23 	bl	8003414 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e183      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8003f90 <HAL_RCC_OscConfig+0x4bc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d108      	bne.n	8003e02 <HAL_RCC_OscConfig+0x32e>
 8003df0:	4b66      	ldr	r3, [pc, #408]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df6:	4a65      	ldr	r2, [pc, #404]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e00:	e024      	b.n	8003e4c <HAL_RCC_OscConfig+0x378>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d110      	bne.n	8003e2c <HAL_RCC_OscConfig+0x358>
 8003e0a:	4b60      	ldr	r3, [pc, #384]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e10:	4a5e      	ldr	r2, [pc, #376]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e20:	4a5a      	ldr	r2, [pc, #360]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e2a:	e00f      	b.n	8003e4c <HAL_RCC_OscConfig+0x378>
 8003e2c:	4b57      	ldr	r3, [pc, #348]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	4a56      	ldr	r2, [pc, #344]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e3c:	4b53      	ldr	r3, [pc, #332]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	4a52      	ldr	r2, [pc, #328]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e44:	f023 0304 	bic.w	r3, r3, #4
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d016      	beq.n	8003e82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7ff fade 	bl	8003414 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7ff fada 	bl	8003414 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e138      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e72:	4b46      	ldr	r3, [pc, #280]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ed      	beq.n	8003e5c <HAL_RCC_OscConfig+0x388>
 8003e80:	e015      	b.n	8003eae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7ff fac7 	bl	8003414 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7ff fac3 	bl	8003414 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e121      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ed      	bne.n	8003e8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eae:	7ffb      	ldrb	r3, [r7, #31]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	4b35      	ldr	r3, [pc, #212]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	4a34      	ldr	r2, [pc, #208]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d03c      	beq.n	8003f46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eda:	4a2c      	ldr	r2, [pc, #176]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7ff fa96 	bl	8003414 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eec:	f7ff fa92 	bl	8003414 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0f2      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efe:	4b23      	ldr	r3, [pc, #140]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ef      	beq.n	8003eec <HAL_RCC_OscConfig+0x418>
 8003f0c:	e01b      	b.n	8003f46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f14:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7ff fa79 	bl	8003414 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f26:	f7ff fa75 	bl	8003414 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0d5      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f38:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ef      	bne.n	8003f26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80c9 	beq.w	80040e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f50:	4b0e      	ldr	r3, [pc, #56]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	f000 8083 	beq.w	8004064 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d15e      	bne.n	8004024 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f66:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7ff fa4f 	bl	8003414 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f78:	e00c      	b.n	8003f94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7ff fa4b 	bl	8003414 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d905      	bls.n	8003f94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0ab      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f94:	4b55      	ldr	r3, [pc, #340]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ec      	bne.n	8003f7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa0:	4b52      	ldr	r3, [pc, #328]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	4b52      	ldr	r3, [pc, #328]	@ (80040f0 <HAL_RCC_OscConfig+0x61c>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6a11      	ldr	r1, [r2, #32]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0112      	lsls	r2, r2, #4
 8003fb4:	4311      	orrs	r1, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003fba:	0212      	lsls	r2, r2, #8
 8003fbc:	4311      	orrs	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fc2:	0852      	lsrs	r2, r2, #1
 8003fc4:	3a01      	subs	r2, #1
 8003fc6:	0552      	lsls	r2, r2, #21
 8003fc8:	4311      	orrs	r1, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fce:	0852      	lsrs	r2, r2, #1
 8003fd0:	3a01      	subs	r2, #1
 8003fd2:	0652      	lsls	r2, r2, #25
 8003fd4:	4311      	orrs	r1, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fda:	06d2      	lsls	r2, r2, #27
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	4943      	ldr	r1, [pc, #268]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b41      	ldr	r3, [pc, #260]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a40      	ldr	r2, [pc, #256]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a3d      	ldr	r2, [pc, #244]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8003ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7ff fa0a 	bl	8003414 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7ff fa06 	bl	8003414 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e066      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	4b35      	ldr	r3, [pc, #212]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x530>
 8004022:	e05e      	b.n	80040e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b31      	ldr	r3, [pc, #196]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a30      	ldr	r2, [pc, #192]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7ff f9f0 	bl	8003414 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7ff f9ec 	bl	8003414 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e04c      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404a:	4b28      	ldr	r3, [pc, #160]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004056:	4b25      	ldr	r3, [pc, #148]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	4924      	ldr	r1, [pc, #144]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 800405c:	4b25      	ldr	r3, [pc, #148]	@ (80040f4 <HAL_RCC_OscConfig+0x620>)
 800405e:	4013      	ands	r3, r2
 8004060:	60cb      	str	r3, [r1, #12]
 8004062:	e03e      	b.n	80040e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e039      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004070:	4b1e      	ldr	r3, [pc, #120]	@ (80040ec <HAL_RCC_OscConfig+0x618>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0203 	and.w	r2, r3, #3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	429a      	cmp	r2, r3
 8004082:	d12c      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	3b01      	subs	r3, #1
 8004090:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d123      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d11b      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d113      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	3b01      	subs	r3, #1
 80040c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d109      	bne.n	80040de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	3b01      	subs	r3, #1
 80040d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d001      	beq.n	80040e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	019f800c 	.word	0x019f800c
 80040f4:	feeefffc 	.word	0xfeeefffc

080040f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e11e      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004110:	4b91      	ldr	r3, [pc, #580]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d910      	bls.n	8004140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b8e      	ldr	r3, [pc, #568]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 020f 	bic.w	r2, r3, #15
 8004126:	498c      	ldr	r1, [pc, #560]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b8a      	ldr	r3, [pc, #552]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e106      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d073      	beq.n	8004234 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d129      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004154:	4b81      	ldr	r3, [pc, #516]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0f4      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004164:	f000 f99e 	bl	80044a4 <RCC_GetSysClockFreqFromPLLSource>
 8004168:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4a7c      	ldr	r2, [pc, #496]	@ (8004360 <HAL_RCC_ClockConfig+0x268>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d93f      	bls.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004172:	4b7a      	ldr	r3, [pc, #488]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004186:	2b00      	cmp	r3, #0
 8004188:	d033      	beq.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800418e:	2b00      	cmp	r3, #0
 8004190:	d12f      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004192:	4b72      	ldr	r3, [pc, #456]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800419a:	4a70      	ldr	r2, [pc, #448]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800419c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e024      	b.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b0:	4b6a      	ldr	r3, [pc, #424]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0c6      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c0:	4b66      	ldr	r3, [pc, #408]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0be      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041d0:	f000 f8ce 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4a61      	ldr	r2, [pc, #388]	@ (8004360 <HAL_RCC_ClockConfig+0x268>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d909      	bls.n	80041f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041de:	4b5f      	ldr	r3, [pc, #380]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041e6:	4a5d      	ldr	r2, [pc, #372]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f2:	4b5a      	ldr	r3, [pc, #360]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f023 0203 	bic.w	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4957      	ldr	r1, [pc, #348]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004200:	4313      	orrs	r3, r2
 8004202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7ff f906 	bl	8003414 <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	e00a      	b.n	8004222 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420c:	f7ff f902 	bl	8003414 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e095      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	4b4e      	ldr	r3, [pc, #312]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 020c 	and.w	r2, r3, #12
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	429a      	cmp	r2, r3
 8004232:	d1eb      	bne.n	800420c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d023      	beq.n	8004288 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b43      	ldr	r3, [pc, #268]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a42      	ldr	r2, [pc, #264]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004252:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004256:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004264:	4b3d      	ldr	r3, [pc, #244]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800426c:	4a3b      	ldr	r2, [pc, #236]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800426e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004272:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b39      	ldr	r3, [pc, #228]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4936      	ldr	r1, [pc, #216]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
 8004286:	e008      	b.n	800429a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	d105      	bne.n	800429a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800428e:	4b33      	ldr	r3, [pc, #204]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4a32      	ldr	r2, [pc, #200]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004294:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004298:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d21d      	bcs.n	80042e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 020f 	bic.w	r2, r3, #15
 80042b0:	4929      	ldr	r1, [pc, #164]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042b8:	f7ff f8ac 	bl	8003414 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c0:	f7ff f8a8 	bl	8003414 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e03b      	b.n	800434e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d6:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <HAL_RCC_ClockConfig+0x260>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1ed      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f0:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4917      	ldr	r1, [pc, #92]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430e:	4b13      	ldr	r3, [pc, #76]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	490f      	ldr	r1, [pc, #60]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004322:	f000 f825 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8004326:	4602      	mov	r2, r0
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <HAL_RCC_ClockConfig+0x264>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	490c      	ldr	r1, [pc, #48]	@ (8004364 <HAL_RCC_ClockConfig+0x26c>)
 8004334:	5ccb      	ldrb	r3, [r1, r3]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	fa22 f303 	lsr.w	r3, r2, r3
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <HAL_RCC_ClockConfig+0x270>)
 8004340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004342:	4b0a      	ldr	r3, [pc, #40]	@ (800436c <HAL_RCC_ClockConfig+0x274>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f818 	bl	800337c <HAL_InitTick>
 800434c:	4603      	mov	r3, r0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40022000 	.word	0x40022000
 800435c:	40021000 	.word	0x40021000
 8004360:	04c4b400 	.word	0x04c4b400
 8004364:	08006b10 	.word	0x08006b10
 8004368:	20000030 	.word	0x20000030
 800436c:	20000064 	.word	0x20000064

08004370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004376:	4b2c      	ldr	r3, [pc, #176]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d102      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004382:	4b2a      	ldr	r3, [pc, #168]	@ (800442c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	e047      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004388:	4b27      	ldr	r3, [pc, #156]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b08      	cmp	r3, #8
 8004392:	d102      	bne.n	800439a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004394:	4b26      	ldr	r3, [pc, #152]	@ (8004430 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e03e      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800439a:	4b23      	ldr	r3, [pc, #140]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d136      	bne.n	8004414 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043a6:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	3301      	adds	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d10c      	bne.n	80043de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	4a16      	ldr	r2, [pc, #88]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ce:	68d2      	ldr	r2, [r2, #12]
 80043d0:	0a12      	lsrs	r2, r2, #8
 80043d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	617b      	str	r3, [r7, #20]
      break;
 80043dc:	e00c      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043de:	4a13      	ldr	r2, [pc, #76]	@ (800442c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	4a10      	ldr	r2, [pc, #64]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e8:	68d2      	ldr	r2, [r2, #12]
 80043ea:	0a12      	lsrs	r2, r2, #8
 80043ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
      break;
 80043f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0e5b      	lsrs	r3, r3, #25
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	3301      	adds	r3, #1
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e001      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004418:	693b      	ldr	r3, [r7, #16]
}
 800441a:	4618      	mov	r0, r3
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	00f42400 	.word	0x00f42400
 8004430:	016e3600 	.word	0x016e3600

08004434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <HAL_RCC_GetHCLKFreq+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000030 	.word	0x20000030

0800444c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004450:	f7ff fff0 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4904      	ldr	r1, [pc, #16]	@ (8004474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000
 8004474:	08006b20 	.word	0x08006b20

08004478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800447c:	f7ff ffda 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0adb      	lsrs	r3, r3, #11
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4904      	ldr	r1, [pc, #16]	@ (80044a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	08006b20 	.word	0x08006b20

080044a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	3301      	adds	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d10c      	bne.n	80044e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044c8:	4a17      	ldr	r2, [pc, #92]	@ (8004528 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	4a14      	ldr	r2, [pc, #80]	@ (8004524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044d2:	68d2      	ldr	r2, [r2, #12]
 80044d4:	0a12      	lsrs	r2, r2, #8
 80044d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	617b      	str	r3, [r7, #20]
    break;
 80044e0:	e00c      	b.n	80044fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044e2:	4a12      	ldr	r2, [pc, #72]	@ (800452c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044ec:	68d2      	ldr	r2, [r2, #12]
 80044ee:	0a12      	lsrs	r2, r2, #8
 80044f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	617b      	str	r3, [r7, #20]
    break;
 80044fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044fc:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	0e5b      	lsrs	r3, r3, #25
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	3301      	adds	r3, #1
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004516:	687b      	ldr	r3, [r7, #4]
}
 8004518:	4618      	mov	r0, r3
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40021000 	.word	0x40021000
 8004528:	016e3600 	.word	0x016e3600
 800452c:	00f42400 	.word	0x00f42400

08004530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004538:	2300      	movs	r3, #0
 800453a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800453c:	2300      	movs	r3, #0
 800453e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8098 	beq.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004552:	4b43      	ldr	r3, [pc, #268]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	4b40      	ldr	r3, [pc, #256]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	4a3f      	ldr	r2, [pc, #252]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004568:	6593      	str	r3, [r2, #88]	@ 0x58
 800456a:	4b3d      	ldr	r3, [pc, #244]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004576:	2301      	movs	r3, #1
 8004578:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800457a:	4b3a      	ldr	r3, [pc, #232]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a39      	ldr	r2, [pc, #228]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004586:	f7fe ff45 	bl	8003414 <HAL_GetTick>
 800458a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800458c:	e009      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458e:	f7fe ff41 	bl	8003414 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d902      	bls.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	74fb      	strb	r3, [r7, #19]
        break;
 80045a0:	e005      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045a2:	4b30      	ldr	r3, [pc, #192]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ef      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d159      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01e      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d019      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045d0:	4b23      	ldr	r3, [pc, #140]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045dc:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045fc:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fe ff01 	bl	8003414 <HAL_GetTick>
 8004612:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004614:	e00b      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fe fefd 	bl	8003414 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d902      	bls.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	74fb      	strb	r3, [r7, #19]
            break;
 800462c:	e006      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462e:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ec      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004642:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004650:	4903      	ldr	r1, [pc, #12]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004658:	e008      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	74bb      	strb	r3, [r7, #18]
 800465e:	e005      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800466c:	7c7b      	ldrb	r3, [r7, #17]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004672:	4ba7      	ldr	r3, [pc, #668]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004676:	4aa6      	ldr	r2, [pc, #664]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004678:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800468a:	4ba1      	ldr	r3, [pc, #644]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004690:	f023 0203 	bic.w	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	499d      	ldr	r1, [pc, #628]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046ac:	4b98      	ldr	r3, [pc, #608]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	f023 020c 	bic.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	4995      	ldr	r1, [pc, #596]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ce:	4b90      	ldr	r3, [pc, #576]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	498c      	ldr	r1, [pc, #560]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046f0:	4b87      	ldr	r3, [pc, #540]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	4984      	ldr	r1, [pc, #528]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004712:	4b7f      	ldr	r3, [pc, #508]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004718:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	497b      	ldr	r1, [pc, #492]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004734:	4b76      	ldr	r3, [pc, #472]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	4973      	ldr	r1, [pc, #460]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004756:	4b6e      	ldr	r3, [pc, #440]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	496a      	ldr	r1, [pc, #424]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004778:	4b65      	ldr	r3, [pc, #404]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4962      	ldr	r1, [pc, #392]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800479a:	4b5d      	ldr	r3, [pc, #372]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	4959      	ldr	r1, [pc, #356]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047bc:	4b54      	ldr	r3, [pc, #336]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047c2:	f023 0203 	bic.w	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	4951      	ldr	r1, [pc, #324]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047de:	4b4c      	ldr	r3, [pc, #304]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	4948      	ldr	r1, [pc, #288]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004800:	4b43      	ldr	r3, [pc, #268]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004806:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	4940      	ldr	r1, [pc, #256]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481e:	d105      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004820:	4b3b      	ldr	r3, [pc, #236]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a3a      	ldr	r2, [pc, #232]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800482a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004834:	2b00      	cmp	r3, #0
 8004836:	d015      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004838:	4b35      	ldr	r3, [pc, #212]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004846:	4932      	ldr	r1, [pc, #200]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004856:	d105      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004858:	4b2d      	ldr	r3, [pc, #180]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4a2c      	ldr	r2, [pc, #176]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004862:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004870:	4b27      	ldr	r3, [pc, #156]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004876:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487e:	4924      	ldr	r1, [pc, #144]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800488e:	d105      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004890:	4b1f      	ldr	r3, [pc, #124]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4a1e      	ldr	r2, [pc, #120]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800489a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a8:	4b19      	ldr	r3, [pc, #100]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	4916      	ldr	r1, [pc, #88]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048c6:	d105      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c8:	4b11      	ldr	r3, [pc, #68]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4a10      	ldr	r2, [pc, #64]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d019      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	4908      	ldr	r1, [pc, #32]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048fe:	d109      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004900:	4b03      	ldr	r3, [pc, #12]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a02      	ldr	r2, [pc, #8]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800490a:	60d3      	str	r3, [r2, #12]
 800490c:	e002      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800490e:	bf00      	nop
 8004910:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d015      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004920:	4b29      	ldr	r3, [pc, #164]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004926:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	4926      	ldr	r1, [pc, #152]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800493e:	d105      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004940:	4b21      	ldr	r3, [pc, #132]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a20      	ldr	r2, [pc, #128]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800494a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d015      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004958:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004966:	4918      	ldr	r1, [pc, #96]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004976:	d105      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004978:	4b13      	ldr	r3, [pc, #76]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a12      	ldr	r2, [pc, #72]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800497e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004982:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d015      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004990:	4b0d      	ldr	r3, [pc, #52]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004996:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499e:	490a      	ldr	r1, [pc, #40]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049ae:	d105      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b0:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4a04      	ldr	r2, [pc, #16]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000

080049cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e09d      	b.n	8004b1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d108      	bne.n	80049f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ee:	d009      	beq.n	8004a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	61da      	str	r2, [r3, #28]
 80049f6:	e005      	b.n	8004a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc f822 	bl	8000a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a44:	d902      	bls.n	8004a4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e002      	b.n	8004a52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a5a:	d007      	beq.n	8004a6c <HAL_SPI_Init+0xa0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	ea42 0103 	orr.w	r1, r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	0c1b      	lsrs	r3, r3, #16
 8004ac8:	f003 0204 	and.w	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ae8:	ea42 0103 	orr.w	r1, r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e042      	b.n	8004bba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fb ffee 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	@ 0x24
 8004b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fb25 	bl	80051bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f826 	bl	8004bc4 <UART_SetConfig>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e01b      	b.n	8004bba <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ba0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fba4 	bl	8005300 <UART_CheckIdleState>
 8004bb8:	4603      	mov	r3, r0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b08c      	sub	sp, #48	@ 0x30
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4baa      	ldr	r3, [pc, #680]	@ (8004e9c <UART_SetConfig+0x2d8>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a9f      	ldr	r2, [pc, #636]	@ (8004ea0 <UART_SetConfig+0x2dc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004c3a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4e:	f023 010f 	bic.w	r1, r3, #15
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a90      	ldr	r2, [pc, #576]	@ (8004ea4 <UART_SetConfig+0x2e0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d125      	bne.n	8004cb4 <UART_SetConfig+0xf0>
 8004c68:	4b8f      	ldr	r3, [pc, #572]	@ (8004ea8 <UART_SetConfig+0x2e4>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d81a      	bhi.n	8004cac <UART_SetConfig+0xe8>
 8004c76:	a201      	add	r2, pc, #4	@ (adr r2, 8004c7c <UART_SetConfig+0xb8>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004c8d 	.word	0x08004c8d
 8004c80:	08004c9d 	.word	0x08004c9d
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004ca5 	.word	0x08004ca5
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c92:	e116      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004c94:	2302      	movs	r3, #2
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c9a:	e112      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ca2:	e10e      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004caa:	e10a      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004cac:	2310      	movs	r3, #16
 8004cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cb2:	e106      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a7c      	ldr	r2, [pc, #496]	@ (8004eac <UART_SetConfig+0x2e8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d138      	bne.n	8004d30 <UART_SetConfig+0x16c>
 8004cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ea8 <UART_SetConfig+0x2e4>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	d82d      	bhi.n	8004d28 <UART_SetConfig+0x164>
 8004ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd4 <UART_SetConfig+0x110>)
 8004cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd2:	bf00      	nop
 8004cd4:	08004d09 	.word	0x08004d09
 8004cd8:	08004d29 	.word	0x08004d29
 8004cdc:	08004d29 	.word	0x08004d29
 8004ce0:	08004d29 	.word	0x08004d29
 8004ce4:	08004d19 	.word	0x08004d19
 8004ce8:	08004d29 	.word	0x08004d29
 8004cec:	08004d29 	.word	0x08004d29
 8004cf0:	08004d29 	.word	0x08004d29
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	08004d29 	.word	0x08004d29
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	08004d29 	.word	0x08004d29
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d0e:	e0d8      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d16:	e0d4      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1e:	e0d0      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d20:	2308      	movs	r3, #8
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d26:	e0cc      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d2e:	e0c8      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a5e      	ldr	r2, [pc, #376]	@ (8004eb0 <UART_SetConfig+0x2ec>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d125      	bne.n	8004d86 <UART_SetConfig+0x1c2>
 8004d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea8 <UART_SetConfig+0x2e4>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d44:	2b30      	cmp	r3, #48	@ 0x30
 8004d46:	d016      	beq.n	8004d76 <UART_SetConfig+0x1b2>
 8004d48:	2b30      	cmp	r3, #48	@ 0x30
 8004d4a:	d818      	bhi.n	8004d7e <UART_SetConfig+0x1ba>
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d00a      	beq.n	8004d66 <UART_SetConfig+0x1a2>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d814      	bhi.n	8004d7e <UART_SetConfig+0x1ba>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <UART_SetConfig+0x19a>
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d008      	beq.n	8004d6e <UART_SetConfig+0x1aa>
 8004d5c:	e00f      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d64:	e0ad      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d66:	2302      	movs	r3, #2
 8004d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6c:	e0a9      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d6e:	2304      	movs	r3, #4
 8004d70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d74:	e0a5      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d76:	2308      	movs	r3, #8
 8004d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7c:	e0a1      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d7e:	2310      	movs	r3, #16
 8004d80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d84:	e09d      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb4 <UART_SetConfig+0x2f0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d125      	bne.n	8004ddc <UART_SetConfig+0x218>
 8004d90:	4b45      	ldr	r3, [pc, #276]	@ (8004ea8 <UART_SetConfig+0x2e4>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d9c:	d016      	beq.n	8004dcc <UART_SetConfig+0x208>
 8004d9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004da0:	d818      	bhi.n	8004dd4 <UART_SetConfig+0x210>
 8004da2:	2b80      	cmp	r3, #128	@ 0x80
 8004da4:	d00a      	beq.n	8004dbc <UART_SetConfig+0x1f8>
 8004da6:	2b80      	cmp	r3, #128	@ 0x80
 8004da8:	d814      	bhi.n	8004dd4 <UART_SetConfig+0x210>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <UART_SetConfig+0x1f0>
 8004dae:	2b40      	cmp	r3, #64	@ 0x40
 8004db0:	d008      	beq.n	8004dc4 <UART_SetConfig+0x200>
 8004db2:	e00f      	b.n	8004dd4 <UART_SetConfig+0x210>
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dba:	e082      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dc2:	e07e      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dca:	e07a      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dd2:	e076      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dda:	e072      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a35      	ldr	r2, [pc, #212]	@ (8004eb8 <UART_SetConfig+0x2f4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d12a      	bne.n	8004e3c <UART_SetConfig+0x278>
 8004de6:	4b30      	ldr	r3, [pc, #192]	@ (8004ea8 <UART_SetConfig+0x2e4>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004df4:	d01a      	beq.n	8004e2c <UART_SetConfig+0x268>
 8004df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dfa:	d81b      	bhi.n	8004e34 <UART_SetConfig+0x270>
 8004dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e00:	d00c      	beq.n	8004e1c <UART_SetConfig+0x258>
 8004e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e06:	d815      	bhi.n	8004e34 <UART_SetConfig+0x270>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <UART_SetConfig+0x250>
 8004e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e10:	d008      	beq.n	8004e24 <UART_SetConfig+0x260>
 8004e12:	e00f      	b.n	8004e34 <UART_SetConfig+0x270>
 8004e14:	2300      	movs	r3, #0
 8004e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e1a:	e052      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e22:	e04e      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e24:	2304      	movs	r3, #4
 8004e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e2a:	e04a      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e2c:	2308      	movs	r3, #8
 8004e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e32:	e046      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e34:	2310      	movs	r3, #16
 8004e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e3a:	e042      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a17      	ldr	r2, [pc, #92]	@ (8004ea0 <UART_SetConfig+0x2dc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d13a      	bne.n	8004ebc <UART_SetConfig+0x2f8>
 8004e46:	4b18      	ldr	r3, [pc, #96]	@ (8004ea8 <UART_SetConfig+0x2e4>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e54:	d01a      	beq.n	8004e8c <UART_SetConfig+0x2c8>
 8004e56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e5a:	d81b      	bhi.n	8004e94 <UART_SetConfig+0x2d0>
 8004e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e60:	d00c      	beq.n	8004e7c <UART_SetConfig+0x2b8>
 8004e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e66:	d815      	bhi.n	8004e94 <UART_SetConfig+0x2d0>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <UART_SetConfig+0x2b0>
 8004e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e70:	d008      	beq.n	8004e84 <UART_SetConfig+0x2c0>
 8004e72:	e00f      	b.n	8004e94 <UART_SetConfig+0x2d0>
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7a:	e022      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e82:	e01e      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e84:	2304      	movs	r3, #4
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8a:	e01a      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e92:	e016      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9a:	e012      	b.n	8004ec2 <UART_SetConfig+0x2fe>
 8004e9c:	cfff69f3 	.word	0xcfff69f3
 8004ea0:	40008000 	.word	0x40008000
 8004ea4:	40013800 	.word	0x40013800
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40004400 	.word	0x40004400
 8004eb0:	40004800 	.word	0x40004800
 8004eb4:	40004c00 	.word	0x40004c00
 8004eb8:	40005000 	.word	0x40005000
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4aae      	ldr	r2, [pc, #696]	@ (8005180 <UART_SetConfig+0x5bc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	f040 8097 	bne.w	8004ffc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ece:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d823      	bhi.n	8004f1e <UART_SetConfig+0x35a>
 8004ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0x318>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f1f 	.word	0x08004f1f
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f1f 	.word	0x08004f1f
 8004eec:	08004f0f 	.word	0x08004f0f
 8004ef0:	08004f1f 	.word	0x08004f1f
 8004ef4:	08004f1f 	.word	0x08004f1f
 8004ef8:	08004f1f 	.word	0x08004f1f
 8004efc:	08004f17 	.word	0x08004f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7ff faa4 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8004f04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f06:	e010      	b.n	8004f2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f08:	4b9e      	ldr	r3, [pc, #632]	@ (8005184 <UART_SetConfig+0x5c0>)
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f0c:	e00d      	b.n	8004f2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0e:	f7ff fa2f 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8004f12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f14:	e009      	b.n	8004f2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f1c:	e005      	b.n	8004f2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8130 	beq.w	8005192 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	4a94      	ldr	r2, [pc, #592]	@ (8005188 <UART_SetConfig+0x5c4>)
 8004f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	4413      	add	r3, r2
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d305      	bcc.n	8004f62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d903      	bls.n	8004f6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f68:	e113      	b.n	8005192 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	60fa      	str	r2, [r7, #12]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	4a84      	ldr	r2, [pc, #528]	@ (8005188 <UART_SetConfig+0x5c4>)
 8004f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2200      	movs	r2, #0
 8004f80:	603b      	str	r3, [r7, #0]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f8c:	f7fb f9a0 	bl	80002d0 <__aeabi_uldivmod>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4610      	mov	r0, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	020b      	lsls	r3, r1, #8
 8004fa2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fa6:	0202      	lsls	r2, r0, #8
 8004fa8:	6979      	ldr	r1, [r7, #20]
 8004faa:	6849      	ldr	r1, [r1, #4]
 8004fac:	0849      	lsrs	r1, r1, #1
 8004fae:	2000      	movs	r0, #0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	eb12 0804 	adds.w	r8, r2, r4
 8004fb8:	eb43 0905 	adc.w	r9, r3, r5
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	469a      	mov	sl, r3
 8004fc4:	4693      	mov	fp, r2
 8004fc6:	4652      	mov	r2, sl
 8004fc8:	465b      	mov	r3, fp
 8004fca:	4640      	mov	r0, r8
 8004fcc:	4649      	mov	r1, r9
 8004fce:	f7fb f97f 	bl	80002d0 <__aeabi_uldivmod>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe0:	d308      	bcc.n	8004ff4 <UART_SetConfig+0x430>
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe8:	d204      	bcs.n	8004ff4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a3a      	ldr	r2, [r7, #32]
 8004ff0:	60da      	str	r2, [r3, #12]
 8004ff2:	e0ce      	b.n	8005192 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ffa:	e0ca      	b.n	8005192 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005004:	d166      	bne.n	80050d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005006:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800500a:	2b08      	cmp	r3, #8
 800500c:	d827      	bhi.n	800505e <UART_SetConfig+0x49a>
 800500e:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <UART_SetConfig+0x450>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	0800505f 	.word	0x0800505f
 8005024:	0800504f 	.word	0x0800504f
 8005028:	0800505f 	.word	0x0800505f
 800502c:	0800505f 	.word	0x0800505f
 8005030:	0800505f 	.word	0x0800505f
 8005034:	08005057 	.word	0x08005057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005038:	f7ff fa08 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 800503c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800503e:	e014      	b.n	800506a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005040:	f7ff fa1a 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8005044:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005046:	e010      	b.n	800506a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005048:	4b4e      	ldr	r3, [pc, #312]	@ (8005184 <UART_SetConfig+0x5c0>)
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800504c:	e00d      	b.n	800506a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504e:	f7ff f98f 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8005052:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005054:	e009      	b.n	800506a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800505c:	e005      	b.n	800506a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005068:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8090 	beq.w	8005192 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	4a44      	ldr	r2, [pc, #272]	@ (8005188 <UART_SetConfig+0x5c4>)
 8005078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800507c:	461a      	mov	r2, r3
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	fbb3 f3f2 	udiv	r3, r3, r2
 8005084:	005a      	lsls	r2, r3, #1
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	085b      	lsrs	r3, r3, #1
 800508c:	441a      	add	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	2b0f      	cmp	r3, #15
 800509c:	d916      	bls.n	80050cc <UART_SetConfig+0x508>
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a4:	d212      	bcs.n	80050cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f023 030f 	bic.w	r3, r3, #15
 80050ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	8bfb      	ldrh	r3, [r7, #30]
 80050be:	4313      	orrs	r3, r2
 80050c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	8bfa      	ldrh	r2, [r7, #30]
 80050c8:	60da      	str	r2, [r3, #12]
 80050ca:	e062      	b.n	8005192 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050d2:	e05e      	b.n	8005192 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d828      	bhi.n	800512e <UART_SetConfig+0x56a>
 80050dc:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <UART_SetConfig+0x520>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005119 	.word	0x08005119
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800512f 	.word	0x0800512f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7ff f9a0 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 800510c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800510e:	e014      	b.n	800513a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7ff f9b2 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8005114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005116:	e010      	b.n	800513a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <UART_SetConfig+0x5c0>)
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800511c:	e00d      	b.n	800513a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7ff f927 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8005122:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005124:	e009      	b.n	800513a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800512c:	e005      	b.n	800513a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005138:	bf00      	nop
    }

    if (pclk != 0U)
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d028      	beq.n	8005192 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	4a10      	ldr	r2, [pc, #64]	@ (8005188 <UART_SetConfig+0x5c4>)
 8005146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800514a:	461a      	mov	r2, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	441a      	add	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	d910      	bls.n	800518c <UART_SetConfig+0x5c8>
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005170:	d20c      	bcs.n	800518c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	b29a      	uxth	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60da      	str	r2, [r3, #12]
 800517c:	e009      	b.n	8005192 <UART_SetConfig+0x5ce>
 800517e:	bf00      	nop
 8005180:	40008000 	.word	0x40008000
 8005184:	00f42400 	.word	0x00f42400
 8005188:	08006b28 	.word	0x08006b28
      }
      else
      {
        ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2201      	movs	r2, #1
 8005196:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2201      	movs	r2, #1
 800519e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3730      	adds	r7, #48	@ 0x30
 80051b6:	46bd      	mov	sp, r7
 80051b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080051bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01a      	beq.n	80052d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ba:	d10a      	bne.n	80052d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  }
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b098      	sub	sp, #96	@ 0x60
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005310:	f7fe f880 	bl	8003414 <HAL_GetTick>
 8005314:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b08      	cmp	r3, #8
 8005322:	d12f      	bne.n	8005384 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005324:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800532c:	2200      	movs	r2, #0
 800532e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f88e 	bl	8005454 <UART_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d022      	beq.n	8005384 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800534c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800534e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005352:	653b      	str	r3, [r7, #80]	@ 0x50
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800535c:	647b      	str	r3, [r7, #68]	@ 0x44
 800535e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800536a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e063      	b.n	800544c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b04      	cmp	r3, #4
 8005390:	d149      	bne.n	8005426 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005392:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800539a:	2200      	movs	r2, #0
 800539c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f857 	bl	8005454 <UART_WaitOnFlagUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d03c      	beq.n	8005426 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80053cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e6      	bne.n	80053ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3308      	adds	r3, #8
 80053e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3308      	adds	r3, #8
 80053fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053fe:	61fa      	str	r2, [r7, #28]
 8005400:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	69b9      	ldr	r1, [r7, #24]
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	617b      	str	r3, [r7, #20]
   return(result);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e5      	bne.n	80053de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e012      	b.n	800544c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3758      	adds	r7, #88	@ 0x58
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005464:	e04f      	b.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d04b      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fd ffd1 	bl	8003414 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <UART_WaitOnFlagUntilTimeout+0x30>
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e04e      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d037      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b80      	cmp	r3, #128	@ 0x80
 800549a:	d034      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	d031      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d110      	bne.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2208      	movs	r2, #8
 80054b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f838 	bl	800552e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2208      	movs	r2, #8
 80054c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e029      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054e0:	d111      	bne.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f81e 	bl	800552e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e00f      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4013      	ands	r3, r2
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	429a      	cmp	r2, r3
 8005522:	d0a0      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800552e:	b480      	push	{r7}
 8005530:	b095      	sub	sp, #84	@ 0x54
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800554a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005554:	643b      	str	r3, [r7, #64]	@ 0x40
 8005556:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800555a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e6      	bne.n	8005536 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	61fb      	str	r3, [r7, #28]
   return(result);
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800558c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800558e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e3      	bne.n	8005568 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d118      	bne.n	80055da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f023 0310 	bic.w	r3, r3, #16
 80055bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6979      	ldr	r1, [r7, #20]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	613b      	str	r3, [r7, #16]
   return(result);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e6      	bne.n	80055a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80055ee:	bf00      	nop
 80055f0:	3754      	adds	r7, #84	@ 0x54
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_UARTEx_DisableFifoMode+0x16>
 800560c:	2302      	movs	r3, #2
 800560e:	e027      	b.n	8005660 <HAL_UARTEx_DisableFifoMode+0x66>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2224      	movs	r2, #36	@ 0x24
 800561c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800563e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005680:	2302      	movs	r3, #2
 8005682:	e02d      	b.n	80056e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	@ 0x24
 8005690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f84f 	bl	8005764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e02d      	b.n	800575c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2224      	movs	r2, #36	@ 0x24
 800570c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f811 	bl	8005764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005770:	2b00      	cmp	r3, #0
 8005772:	d108      	bne.n	8005786 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005784:	e031      	b.n	80057ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005786:	2308      	movs	r3, #8
 8005788:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800578a:	2308      	movs	r3, #8
 800578c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	0e5b      	lsrs	r3, r3, #25
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	0f5b      	lsrs	r3, r3, #29
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ae:	7bbb      	ldrb	r3, [r7, #14]
 80057b0:	7b3a      	ldrb	r2, [r7, #12]
 80057b2:	4911      	ldr	r1, [pc, #68]	@ (80057f8 <UARTEx_SetNbDataToProcess+0x94>)
 80057b4:	5c8a      	ldrb	r2, [r1, r2]
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057ba:	7b3a      	ldrb	r2, [r7, #12]
 80057bc:	490f      	ldr	r1, [pc, #60]	@ (80057fc <UARTEx_SetNbDataToProcess+0x98>)
 80057be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	7b7a      	ldrb	r2, [r7, #13]
 80057d0:	4909      	ldr	r1, [pc, #36]	@ (80057f8 <UARTEx_SetNbDataToProcess+0x94>)
 80057d2:	5c8a      	ldrb	r2, [r1, r2]
 80057d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057d8:	7b7a      	ldrb	r2, [r7, #13]
 80057da:	4908      	ldr	r1, [pc, #32]	@ (80057fc <UARTEx_SetNbDataToProcess+0x98>)
 80057dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057de:	fb93 f3f2 	sdiv	r3, r3, r2
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	08006b40 	.word	0x08006b40
 80057fc:	08006b48 	.word	0x08006b48

08005800 <std>:
 8005800:	2300      	movs	r3, #0
 8005802:	b510      	push	{r4, lr}
 8005804:	4604      	mov	r4, r0
 8005806:	e9c0 3300 	strd	r3, r3, [r0]
 800580a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800580e:	6083      	str	r3, [r0, #8]
 8005810:	8181      	strh	r1, [r0, #12]
 8005812:	6643      	str	r3, [r0, #100]	@ 0x64
 8005814:	81c2      	strh	r2, [r0, #14]
 8005816:	6183      	str	r3, [r0, #24]
 8005818:	4619      	mov	r1, r3
 800581a:	2208      	movs	r2, #8
 800581c:	305c      	adds	r0, #92	@ 0x5c
 800581e:	f000 fab5 	bl	8005d8c <memset>
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <std+0x58>)
 8005824:	6263      	str	r3, [r4, #36]	@ 0x24
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <std+0x5c>)
 8005828:	62a3      	str	r3, [r4, #40]	@ 0x28
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <std+0x60>)
 800582c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800582e:	4b0d      	ldr	r3, [pc, #52]	@ (8005864 <std+0x64>)
 8005830:	6323      	str	r3, [r4, #48]	@ 0x30
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <std+0x68>)
 8005834:	6224      	str	r4, [r4, #32]
 8005836:	429c      	cmp	r4, r3
 8005838:	d006      	beq.n	8005848 <std+0x48>
 800583a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800583e:	4294      	cmp	r4, r2
 8005840:	d002      	beq.n	8005848 <std+0x48>
 8005842:	33d0      	adds	r3, #208	@ 0xd0
 8005844:	429c      	cmp	r4, r3
 8005846:	d105      	bne.n	8005854 <std+0x54>
 8005848:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800584c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005850:	f000 bb34 	b.w	8005ebc <__retarget_lock_init_recursive>
 8005854:	bd10      	pop	{r4, pc}
 8005856:	bf00      	nop
 8005858:	08005bdd 	.word	0x08005bdd
 800585c:	08005bff 	.word	0x08005bff
 8005860:	08005c37 	.word	0x08005c37
 8005864:	08005c5b 	.word	0x08005c5b
 8005868:	20000320 	.word	0x20000320

0800586c <stdio_exit_handler>:
 800586c:	4a02      	ldr	r2, [pc, #8]	@ (8005878 <stdio_exit_handler+0xc>)
 800586e:	4903      	ldr	r1, [pc, #12]	@ (800587c <stdio_exit_handler+0x10>)
 8005870:	4803      	ldr	r0, [pc, #12]	@ (8005880 <stdio_exit_handler+0x14>)
 8005872:	f000 b869 	b.w	8005948 <_fwalk_sglue>
 8005876:	bf00      	nop
 8005878:	2000006c 	.word	0x2000006c
 800587c:	0800677d 	.word	0x0800677d
 8005880:	2000007c 	.word	0x2000007c

08005884 <cleanup_stdio>:
 8005884:	6841      	ldr	r1, [r0, #4]
 8005886:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <cleanup_stdio+0x34>)
 8005888:	4299      	cmp	r1, r3
 800588a:	b510      	push	{r4, lr}
 800588c:	4604      	mov	r4, r0
 800588e:	d001      	beq.n	8005894 <cleanup_stdio+0x10>
 8005890:	f000 ff74 	bl	800677c <_fflush_r>
 8005894:	68a1      	ldr	r1, [r4, #8]
 8005896:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <cleanup_stdio+0x38>)
 8005898:	4299      	cmp	r1, r3
 800589a:	d002      	beq.n	80058a2 <cleanup_stdio+0x1e>
 800589c:	4620      	mov	r0, r4
 800589e:	f000 ff6d 	bl	800677c <_fflush_r>
 80058a2:	68e1      	ldr	r1, [r4, #12]
 80058a4:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <cleanup_stdio+0x3c>)
 80058a6:	4299      	cmp	r1, r3
 80058a8:	d004      	beq.n	80058b4 <cleanup_stdio+0x30>
 80058aa:	4620      	mov	r0, r4
 80058ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b0:	f000 bf64 	b.w	800677c <_fflush_r>
 80058b4:	bd10      	pop	{r4, pc}
 80058b6:	bf00      	nop
 80058b8:	20000320 	.word	0x20000320
 80058bc:	20000388 	.word	0x20000388
 80058c0:	200003f0 	.word	0x200003f0

080058c4 <global_stdio_init.part.0>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <global_stdio_init.part.0+0x30>)
 80058c8:	4c0b      	ldr	r4, [pc, #44]	@ (80058f8 <global_stdio_init.part.0+0x34>)
 80058ca:	4a0c      	ldr	r2, [pc, #48]	@ (80058fc <global_stdio_init.part.0+0x38>)
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	4620      	mov	r0, r4
 80058d0:	2200      	movs	r2, #0
 80058d2:	2104      	movs	r1, #4
 80058d4:	f7ff ff94 	bl	8005800 <std>
 80058d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058dc:	2201      	movs	r2, #1
 80058de:	2109      	movs	r1, #9
 80058e0:	f7ff ff8e 	bl	8005800 <std>
 80058e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058e8:	2202      	movs	r2, #2
 80058ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ee:	2112      	movs	r1, #18
 80058f0:	f7ff bf86 	b.w	8005800 <std>
 80058f4:	20000458 	.word	0x20000458
 80058f8:	20000320 	.word	0x20000320
 80058fc:	0800586d 	.word	0x0800586d

08005900 <__sfp_lock_acquire>:
 8005900:	4801      	ldr	r0, [pc, #4]	@ (8005908 <__sfp_lock_acquire+0x8>)
 8005902:	f000 badc 	b.w	8005ebe <__retarget_lock_acquire_recursive>
 8005906:	bf00      	nop
 8005908:	20000461 	.word	0x20000461

0800590c <__sfp_lock_release>:
 800590c:	4801      	ldr	r0, [pc, #4]	@ (8005914 <__sfp_lock_release+0x8>)
 800590e:	f000 bad7 	b.w	8005ec0 <__retarget_lock_release_recursive>
 8005912:	bf00      	nop
 8005914:	20000461 	.word	0x20000461

08005918 <__sinit>:
 8005918:	b510      	push	{r4, lr}
 800591a:	4604      	mov	r4, r0
 800591c:	f7ff fff0 	bl	8005900 <__sfp_lock_acquire>
 8005920:	6a23      	ldr	r3, [r4, #32]
 8005922:	b11b      	cbz	r3, 800592c <__sinit+0x14>
 8005924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005928:	f7ff bff0 	b.w	800590c <__sfp_lock_release>
 800592c:	4b04      	ldr	r3, [pc, #16]	@ (8005940 <__sinit+0x28>)
 800592e:	6223      	str	r3, [r4, #32]
 8005930:	4b04      	ldr	r3, [pc, #16]	@ (8005944 <__sinit+0x2c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f5      	bne.n	8005924 <__sinit+0xc>
 8005938:	f7ff ffc4 	bl	80058c4 <global_stdio_init.part.0>
 800593c:	e7f2      	b.n	8005924 <__sinit+0xc>
 800593e:	bf00      	nop
 8005940:	08005885 	.word	0x08005885
 8005944:	20000458 	.word	0x20000458

08005948 <_fwalk_sglue>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	4607      	mov	r7, r0
 800594e:	4688      	mov	r8, r1
 8005950:	4614      	mov	r4, r2
 8005952:	2600      	movs	r6, #0
 8005954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005958:	f1b9 0901 	subs.w	r9, r9, #1
 800595c:	d505      	bpl.n	800596a <_fwalk_sglue+0x22>
 800595e:	6824      	ldr	r4, [r4, #0]
 8005960:	2c00      	cmp	r4, #0
 8005962:	d1f7      	bne.n	8005954 <_fwalk_sglue+0xc>
 8005964:	4630      	mov	r0, r6
 8005966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596a:	89ab      	ldrh	r3, [r5, #12]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d907      	bls.n	8005980 <_fwalk_sglue+0x38>
 8005970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005974:	3301      	adds	r3, #1
 8005976:	d003      	beq.n	8005980 <_fwalk_sglue+0x38>
 8005978:	4629      	mov	r1, r5
 800597a:	4638      	mov	r0, r7
 800597c:	47c0      	blx	r8
 800597e:	4306      	orrs	r6, r0
 8005980:	3568      	adds	r5, #104	@ 0x68
 8005982:	e7e9      	b.n	8005958 <_fwalk_sglue+0x10>

08005984 <iprintf>:
 8005984:	b40f      	push	{r0, r1, r2, r3}
 8005986:	b507      	push	{r0, r1, r2, lr}
 8005988:	4906      	ldr	r1, [pc, #24]	@ (80059a4 <iprintf+0x20>)
 800598a:	ab04      	add	r3, sp, #16
 800598c:	6808      	ldr	r0, [r1, #0]
 800598e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005992:	6881      	ldr	r1, [r0, #8]
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	f000 fbc7 	bl	8006128 <_vfiprintf_r>
 800599a:	b003      	add	sp, #12
 800599c:	f85d eb04 	ldr.w	lr, [sp], #4
 80059a0:	b004      	add	sp, #16
 80059a2:	4770      	bx	lr
 80059a4:	20000078 	.word	0x20000078

080059a8 <_puts_r>:
 80059a8:	6a03      	ldr	r3, [r0, #32]
 80059aa:	b570      	push	{r4, r5, r6, lr}
 80059ac:	6884      	ldr	r4, [r0, #8]
 80059ae:	4605      	mov	r5, r0
 80059b0:	460e      	mov	r6, r1
 80059b2:	b90b      	cbnz	r3, 80059b8 <_puts_r+0x10>
 80059b4:	f7ff ffb0 	bl	8005918 <__sinit>
 80059b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059ba:	07db      	lsls	r3, r3, #31
 80059bc:	d405      	bmi.n	80059ca <_puts_r+0x22>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	0598      	lsls	r0, r3, #22
 80059c2:	d402      	bmi.n	80059ca <_puts_r+0x22>
 80059c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059c6:	f000 fa7a 	bl	8005ebe <__retarget_lock_acquire_recursive>
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	0719      	lsls	r1, r3, #28
 80059ce:	d502      	bpl.n	80059d6 <_puts_r+0x2e>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d135      	bne.n	8005a42 <_puts_r+0x9a>
 80059d6:	4621      	mov	r1, r4
 80059d8:	4628      	mov	r0, r5
 80059da:	f000 f981 	bl	8005ce0 <__swsetup_r>
 80059de:	b380      	cbz	r0, 8005a42 <_puts_r+0x9a>
 80059e0:	f04f 35ff 	mov.w	r5, #4294967295
 80059e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059e6:	07da      	lsls	r2, r3, #31
 80059e8:	d405      	bmi.n	80059f6 <_puts_r+0x4e>
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	059b      	lsls	r3, r3, #22
 80059ee:	d402      	bmi.n	80059f6 <_puts_r+0x4e>
 80059f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059f2:	f000 fa65 	bl	8005ec0 <__retarget_lock_release_recursive>
 80059f6:	4628      	mov	r0, r5
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	da04      	bge.n	8005a08 <_puts_r+0x60>
 80059fe:	69a2      	ldr	r2, [r4, #24]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	dc17      	bgt.n	8005a34 <_puts_r+0x8c>
 8005a04:	290a      	cmp	r1, #10
 8005a06:	d015      	beq.n	8005a34 <_puts_r+0x8c>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	6022      	str	r2, [r4, #0]
 8005a0e:	7019      	strb	r1, [r3, #0]
 8005a10:	68a3      	ldr	r3, [r4, #8]
 8005a12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a16:	3b01      	subs	r3, #1
 8005a18:	60a3      	str	r3, [r4, #8]
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	d1ed      	bne.n	80059fa <_puts_r+0x52>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	da11      	bge.n	8005a46 <_puts_r+0x9e>
 8005a22:	4622      	mov	r2, r4
 8005a24:	210a      	movs	r1, #10
 8005a26:	4628      	mov	r0, r5
 8005a28:	f000 f91b 	bl	8005c62 <__swbuf_r>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d0d7      	beq.n	80059e0 <_puts_r+0x38>
 8005a30:	250a      	movs	r5, #10
 8005a32:	e7d7      	b.n	80059e4 <_puts_r+0x3c>
 8005a34:	4622      	mov	r2, r4
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 f913 	bl	8005c62 <__swbuf_r>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d1e7      	bne.n	8005a10 <_puts_r+0x68>
 8005a40:	e7ce      	b.n	80059e0 <_puts_r+0x38>
 8005a42:	3e01      	subs	r6, #1
 8005a44:	e7e4      	b.n	8005a10 <_puts_r+0x68>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	6022      	str	r2, [r4, #0]
 8005a4c:	220a      	movs	r2, #10
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e7ee      	b.n	8005a30 <_puts_r+0x88>
	...

08005a54 <puts>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	@ (8005a60 <puts+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f7ff bfa5 	b.w	80059a8 <_puts_r>
 8005a5e:	bf00      	nop
 8005a60:	20000078 	.word	0x20000078

08005a64 <setbuf>:
 8005a64:	fab1 f281 	clz	r2, r1
 8005a68:	0952      	lsrs	r2, r2, #5
 8005a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a6e:	0052      	lsls	r2, r2, #1
 8005a70:	f000 b800 	b.w	8005a74 <setvbuf>

08005a74 <setvbuf>:
 8005a74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a78:	461d      	mov	r5, r3
 8005a7a:	4b57      	ldr	r3, [pc, #348]	@ (8005bd8 <setvbuf+0x164>)
 8005a7c:	681f      	ldr	r7, [r3, #0]
 8005a7e:	4604      	mov	r4, r0
 8005a80:	460e      	mov	r6, r1
 8005a82:	4690      	mov	r8, r2
 8005a84:	b127      	cbz	r7, 8005a90 <setvbuf+0x1c>
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	b913      	cbnz	r3, 8005a90 <setvbuf+0x1c>
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f7ff ff44 	bl	8005918 <__sinit>
 8005a90:	f1b8 0f02 	cmp.w	r8, #2
 8005a94:	d006      	beq.n	8005aa4 <setvbuf+0x30>
 8005a96:	f1b8 0f01 	cmp.w	r8, #1
 8005a9a:	f200 809a 	bhi.w	8005bd2 <setvbuf+0x15e>
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	f2c0 8097 	blt.w	8005bd2 <setvbuf+0x15e>
 8005aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005aa6:	07d9      	lsls	r1, r3, #31
 8005aa8:	d405      	bmi.n	8005ab6 <setvbuf+0x42>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	059a      	lsls	r2, r3, #22
 8005aae:	d402      	bmi.n	8005ab6 <setvbuf+0x42>
 8005ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ab2:	f000 fa04 	bl	8005ebe <__retarget_lock_acquire_recursive>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f000 fe5f 	bl	800677c <_fflush_r>
 8005abe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ac0:	b141      	cbz	r1, 8005ad4 <setvbuf+0x60>
 8005ac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	d002      	beq.n	8005ad0 <setvbuf+0x5c>
 8005aca:	4638      	mov	r0, r7
 8005acc:	f000 fa02 	bl	8005ed4 <_free_r>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61a3      	str	r3, [r4, #24]
 8005ad8:	6063      	str	r3, [r4, #4]
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	061b      	lsls	r3, r3, #24
 8005ade:	d503      	bpl.n	8005ae8 <setvbuf+0x74>
 8005ae0:	6921      	ldr	r1, [r4, #16]
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	f000 f9f6 	bl	8005ed4 <_free_r>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	f1b8 0f02 	cmp.w	r8, #2
 8005af6:	81a3      	strh	r3, [r4, #12]
 8005af8:	d061      	beq.n	8005bbe <setvbuf+0x14a>
 8005afa:	ab01      	add	r3, sp, #4
 8005afc:	466a      	mov	r2, sp
 8005afe:	4621      	mov	r1, r4
 8005b00:	4638      	mov	r0, r7
 8005b02:	f000 fe63 	bl	80067cc <__swhatbuf_r>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	4318      	orrs	r0, r3
 8005b0a:	81a0      	strh	r0, [r4, #12]
 8005b0c:	bb2d      	cbnz	r5, 8005b5a <setvbuf+0xe6>
 8005b0e:	9d00      	ldr	r5, [sp, #0]
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 fa29 	bl	8005f68 <malloc>
 8005b16:	4606      	mov	r6, r0
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d152      	bne.n	8005bc2 <setvbuf+0x14e>
 8005b1c:	f8dd 9000 	ldr.w	r9, [sp]
 8005b20:	45a9      	cmp	r9, r5
 8005b22:	d140      	bne.n	8005ba6 <setvbuf+0x132>
 8005b24:	f04f 35ff 	mov.w	r5, #4294967295
 8005b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b2c:	f043 0202 	orr.w	r2, r3, #2
 8005b30:	81a2      	strh	r2, [r4, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	60a2      	str	r2, [r4, #8]
 8005b36:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005b3a:	6022      	str	r2, [r4, #0]
 8005b3c:	6122      	str	r2, [r4, #16]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	6162      	str	r2, [r4, #20]
 8005b42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b44:	07d6      	lsls	r6, r2, #31
 8005b46:	d404      	bmi.n	8005b52 <setvbuf+0xde>
 8005b48:	0598      	lsls	r0, r3, #22
 8005b4a:	d402      	bmi.n	8005b52 <setvbuf+0xde>
 8005b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b4e:	f000 f9b7 	bl	8005ec0 <__retarget_lock_release_recursive>
 8005b52:	4628      	mov	r0, r5
 8005b54:	b003      	add	sp, #12
 8005b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	d0d8      	beq.n	8005b10 <setvbuf+0x9c>
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	b913      	cbnz	r3, 8005b68 <setvbuf+0xf4>
 8005b62:	4638      	mov	r0, r7
 8005b64:	f7ff fed8 	bl	8005918 <__sinit>
 8005b68:	f1b8 0f01 	cmp.w	r8, #1
 8005b6c:	bf08      	it	eq
 8005b6e:	89a3      	ldrheq	r3, [r4, #12]
 8005b70:	6026      	str	r6, [r4, #0]
 8005b72:	bf04      	itt	eq
 8005b74:	f043 0301 	orreq.w	r3, r3, #1
 8005b78:	81a3      	strheq	r3, [r4, #12]
 8005b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b7e:	f013 0208 	ands.w	r2, r3, #8
 8005b82:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005b86:	d01e      	beq.n	8005bc6 <setvbuf+0x152>
 8005b88:	07d9      	lsls	r1, r3, #31
 8005b8a:	bf41      	itttt	mi
 8005b8c:	2200      	movmi	r2, #0
 8005b8e:	426d      	negmi	r5, r5
 8005b90:	60a2      	strmi	r2, [r4, #8]
 8005b92:	61a5      	strmi	r5, [r4, #24]
 8005b94:	bf58      	it	pl
 8005b96:	60a5      	strpl	r5, [r4, #8]
 8005b98:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b9a:	07d2      	lsls	r2, r2, #31
 8005b9c:	d401      	bmi.n	8005ba2 <setvbuf+0x12e>
 8005b9e:	059b      	lsls	r3, r3, #22
 8005ba0:	d513      	bpl.n	8005bca <setvbuf+0x156>
 8005ba2:	2500      	movs	r5, #0
 8005ba4:	e7d5      	b.n	8005b52 <setvbuf+0xde>
 8005ba6:	4648      	mov	r0, r9
 8005ba8:	f000 f9de 	bl	8005f68 <malloc>
 8005bac:	4606      	mov	r6, r0
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d0b8      	beq.n	8005b24 <setvbuf+0xb0>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	464d      	mov	r5, r9
 8005bbc:	e7cf      	b.n	8005b5e <setvbuf+0xea>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	e7b2      	b.n	8005b28 <setvbuf+0xb4>
 8005bc2:	46a9      	mov	r9, r5
 8005bc4:	e7f5      	b.n	8005bb2 <setvbuf+0x13e>
 8005bc6:	60a2      	str	r2, [r4, #8]
 8005bc8:	e7e6      	b.n	8005b98 <setvbuf+0x124>
 8005bca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bcc:	f000 f978 	bl	8005ec0 <__retarget_lock_release_recursive>
 8005bd0:	e7e7      	b.n	8005ba2 <setvbuf+0x12e>
 8005bd2:	f04f 35ff 	mov.w	r5, #4294967295
 8005bd6:	e7bc      	b.n	8005b52 <setvbuf+0xde>
 8005bd8:	20000078 	.word	0x20000078

08005bdc <__sread>:
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	460c      	mov	r4, r1
 8005be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be4:	f000 f91c 	bl	8005e20 <_read_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	bfab      	itete	ge
 8005bec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bee:	89a3      	ldrhlt	r3, [r4, #12]
 8005bf0:	181b      	addge	r3, r3, r0
 8005bf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bf6:	bfac      	ite	ge
 8005bf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bfa:	81a3      	strhlt	r3, [r4, #12]
 8005bfc:	bd10      	pop	{r4, pc}

08005bfe <__swrite>:
 8005bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c02:	461f      	mov	r7, r3
 8005c04:	898b      	ldrh	r3, [r1, #12]
 8005c06:	05db      	lsls	r3, r3, #23
 8005c08:	4605      	mov	r5, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	d505      	bpl.n	8005c1c <__swrite+0x1e>
 8005c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c14:	2302      	movs	r3, #2
 8005c16:	2200      	movs	r2, #0
 8005c18:	f000 f8f0 	bl	8005dfc <_lseek_r>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	4632      	mov	r2, r6
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c32:	f000 b907 	b.w	8005e44 <_write_r>

08005c36 <__sseek>:
 8005c36:	b510      	push	{r4, lr}
 8005c38:	460c      	mov	r4, r1
 8005c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3e:	f000 f8dd 	bl	8005dfc <_lseek_r>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	bf15      	itete	ne
 8005c48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c52:	81a3      	strheq	r3, [r4, #12]
 8005c54:	bf18      	it	ne
 8005c56:	81a3      	strhne	r3, [r4, #12]
 8005c58:	bd10      	pop	{r4, pc}

08005c5a <__sclose>:
 8005c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5e:	f000 b8bd 	b.w	8005ddc <_close_r>

08005c62 <__swbuf_r>:
 8005c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c64:	460e      	mov	r6, r1
 8005c66:	4614      	mov	r4, r2
 8005c68:	4605      	mov	r5, r0
 8005c6a:	b118      	cbz	r0, 8005c74 <__swbuf_r+0x12>
 8005c6c:	6a03      	ldr	r3, [r0, #32]
 8005c6e:	b90b      	cbnz	r3, 8005c74 <__swbuf_r+0x12>
 8005c70:	f7ff fe52 	bl	8005918 <__sinit>
 8005c74:	69a3      	ldr	r3, [r4, #24]
 8005c76:	60a3      	str	r3, [r4, #8]
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	071a      	lsls	r2, r3, #28
 8005c7c:	d501      	bpl.n	8005c82 <__swbuf_r+0x20>
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	b943      	cbnz	r3, 8005c94 <__swbuf_r+0x32>
 8005c82:	4621      	mov	r1, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	f000 f82b 	bl	8005ce0 <__swsetup_r>
 8005c8a:	b118      	cbz	r0, 8005c94 <__swbuf_r+0x32>
 8005c8c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c90:	4638      	mov	r0, r7
 8005c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	6922      	ldr	r2, [r4, #16]
 8005c98:	1a98      	subs	r0, r3, r2
 8005c9a:	6963      	ldr	r3, [r4, #20]
 8005c9c:	b2f6      	uxtb	r6, r6
 8005c9e:	4283      	cmp	r3, r0
 8005ca0:	4637      	mov	r7, r6
 8005ca2:	dc05      	bgt.n	8005cb0 <__swbuf_r+0x4e>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fd68 	bl	800677c <_fflush_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d1ed      	bne.n	8005c8c <__swbuf_r+0x2a>
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	60a3      	str	r3, [r4, #8]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	6022      	str	r2, [r4, #0]
 8005cbc:	701e      	strb	r6, [r3, #0]
 8005cbe:	6962      	ldr	r2, [r4, #20]
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d004      	beq.n	8005cd0 <__swbuf_r+0x6e>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	07db      	lsls	r3, r3, #31
 8005cca:	d5e1      	bpl.n	8005c90 <__swbuf_r+0x2e>
 8005ccc:	2e0a      	cmp	r6, #10
 8005cce:	d1df      	bne.n	8005c90 <__swbuf_r+0x2e>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f000 fd52 	bl	800677c <_fflush_r>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d0d9      	beq.n	8005c90 <__swbuf_r+0x2e>
 8005cdc:	e7d6      	b.n	8005c8c <__swbuf_r+0x2a>
	...

08005ce0 <__swsetup_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4b29      	ldr	r3, [pc, #164]	@ (8005d88 <__swsetup_r+0xa8>)
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	460c      	mov	r4, r1
 8005cea:	b118      	cbz	r0, 8005cf4 <__swsetup_r+0x14>
 8005cec:	6a03      	ldr	r3, [r0, #32]
 8005cee:	b90b      	cbnz	r3, 8005cf4 <__swsetup_r+0x14>
 8005cf0:	f7ff fe12 	bl	8005918 <__sinit>
 8005cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf8:	0719      	lsls	r1, r3, #28
 8005cfa:	d422      	bmi.n	8005d42 <__swsetup_r+0x62>
 8005cfc:	06da      	lsls	r2, r3, #27
 8005cfe:	d407      	bmi.n	8005d10 <__swsetup_r+0x30>
 8005d00:	2209      	movs	r2, #9
 8005d02:	602a      	str	r2, [r5, #0]
 8005d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d08:	81a3      	strh	r3, [r4, #12]
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	e033      	b.n	8005d78 <__swsetup_r+0x98>
 8005d10:	0758      	lsls	r0, r3, #29
 8005d12:	d512      	bpl.n	8005d3a <__swsetup_r+0x5a>
 8005d14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d16:	b141      	cbz	r1, 8005d2a <__swsetup_r+0x4a>
 8005d18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d1c:	4299      	cmp	r1, r3
 8005d1e:	d002      	beq.n	8005d26 <__swsetup_r+0x46>
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f8d7 	bl	8005ed4 <_free_r>
 8005d26:	2300      	movs	r3, #0
 8005d28:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	2300      	movs	r3, #0
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f043 0308 	orr.w	r3, r3, #8
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	b94b      	cbnz	r3, 8005d5a <__swsetup_r+0x7a>
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d50:	d003      	beq.n	8005d5a <__swsetup_r+0x7a>
 8005d52:	4621      	mov	r1, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 fd5f 	bl	8006818 <__smakebuf_r>
 8005d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d5e:	f013 0201 	ands.w	r2, r3, #1
 8005d62:	d00a      	beq.n	8005d7a <__swsetup_r+0x9a>
 8005d64:	2200      	movs	r2, #0
 8005d66:	60a2      	str	r2, [r4, #8]
 8005d68:	6962      	ldr	r2, [r4, #20]
 8005d6a:	4252      	negs	r2, r2
 8005d6c:	61a2      	str	r2, [r4, #24]
 8005d6e:	6922      	ldr	r2, [r4, #16]
 8005d70:	b942      	cbnz	r2, 8005d84 <__swsetup_r+0xa4>
 8005d72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d76:	d1c5      	bne.n	8005d04 <__swsetup_r+0x24>
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	0799      	lsls	r1, r3, #30
 8005d7c:	bf58      	it	pl
 8005d7e:	6962      	ldrpl	r2, [r4, #20]
 8005d80:	60a2      	str	r2, [r4, #8]
 8005d82:	e7f4      	b.n	8005d6e <__swsetup_r+0x8e>
 8005d84:	2000      	movs	r0, #0
 8005d86:	e7f7      	b.n	8005d78 <__swsetup_r+0x98>
 8005d88:	20000078 	.word	0x20000078

08005d8c <memset>:
 8005d8c:	4402      	add	r2, r0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d100      	bne.n	8005d96 <memset+0xa>
 8005d94:	4770      	bx	lr
 8005d96:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9a:	e7f9      	b.n	8005d90 <memset+0x4>

08005d9c <strchr>:
 8005d9c:	b2c9      	uxtb	r1, r1
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005da6:	b112      	cbz	r2, 8005dae <strchr+0x12>
 8005da8:	428a      	cmp	r2, r1
 8005daa:	d1f9      	bne.n	8005da0 <strchr+0x4>
 8005dac:	4770      	bx	lr
 8005dae:	2900      	cmp	r1, #0
 8005db0:	bf18      	it	ne
 8005db2:	2000      	movne	r0, #0
 8005db4:	4770      	bx	lr

08005db6 <strncpy>:
 8005db6:	b510      	push	{r4, lr}
 8005db8:	3901      	subs	r1, #1
 8005dba:	4603      	mov	r3, r0
 8005dbc:	b132      	cbz	r2, 8005dcc <strncpy+0x16>
 8005dbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005dc2:	f803 4b01 	strb.w	r4, [r3], #1
 8005dc6:	3a01      	subs	r2, #1
 8005dc8:	2c00      	cmp	r4, #0
 8005dca:	d1f7      	bne.n	8005dbc <strncpy+0x6>
 8005dcc:	441a      	add	r2, r3
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d100      	bne.n	8005dd6 <strncpy+0x20>
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dda:	e7f9      	b.n	8005dd0 <strncpy+0x1a>

08005ddc <_close_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d06      	ldr	r5, [pc, #24]	@ (8005df8 <_close_r+0x1c>)
 8005de0:	2300      	movs	r3, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	602b      	str	r3, [r5, #0]
 8005de8:	f7fa ff78 	bl	8000cdc <_close>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_close_r+0x1a>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_close_r+0x1a>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	2000045c 	.word	0x2000045c

08005dfc <_lseek_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d07      	ldr	r5, [pc, #28]	@ (8005e1c <_lseek_r+0x20>)
 8005e00:	4604      	mov	r4, r0
 8005e02:	4608      	mov	r0, r1
 8005e04:	4611      	mov	r1, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f7fa ff8d 	bl	8000d2a <_lseek>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_lseek_r+0x1e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_lseek_r+0x1e>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	2000045c 	.word	0x2000045c

08005e20 <_read_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	@ (8005e40 <_read_r+0x20>)
 8005e24:	4604      	mov	r4, r0
 8005e26:	4608      	mov	r0, r1
 8005e28:	4611      	mov	r1, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f7fa ff1b 	bl	8000c6a <_read>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_read_r+0x1e>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_read_r+0x1e>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	2000045c 	.word	0x2000045c

08005e44 <_write_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d07      	ldr	r5, [pc, #28]	@ (8005e64 <_write_r+0x20>)
 8005e48:	4604      	mov	r4, r0
 8005e4a:	4608      	mov	r0, r1
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	602a      	str	r2, [r5, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f7fa ff26 	bl	8000ca4 <_write>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_write_r+0x1e>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_write_r+0x1e>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	2000045c 	.word	0x2000045c

08005e68 <__errno>:
 8005e68:	4b01      	ldr	r3, [pc, #4]	@ (8005e70 <__errno+0x8>)
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000078 	.word	0x20000078

08005e74 <__libc_init_array>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	4d0d      	ldr	r5, [pc, #52]	@ (8005eac <__libc_init_array+0x38>)
 8005e78:	4c0d      	ldr	r4, [pc, #52]	@ (8005eb0 <__libc_init_array+0x3c>)
 8005e7a:	1b64      	subs	r4, r4, r5
 8005e7c:	10a4      	asrs	r4, r4, #2
 8005e7e:	2600      	movs	r6, #0
 8005e80:	42a6      	cmp	r6, r4
 8005e82:	d109      	bne.n	8005e98 <__libc_init_array+0x24>
 8005e84:	4d0b      	ldr	r5, [pc, #44]	@ (8005eb4 <__libc_init_array+0x40>)
 8005e86:	4c0c      	ldr	r4, [pc, #48]	@ (8005eb8 <__libc_init_array+0x44>)
 8005e88:	f000 fd34 	bl	80068f4 <_init>
 8005e8c:	1b64      	subs	r4, r4, r5
 8005e8e:	10a4      	asrs	r4, r4, #2
 8005e90:	2600      	movs	r6, #0
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d105      	bne.n	8005ea2 <__libc_init_array+0x2e>
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9c:	4798      	blx	r3
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7ee      	b.n	8005e80 <__libc_init_array+0xc>
 8005ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea6:	4798      	blx	r3
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	e7f2      	b.n	8005e92 <__libc_init_array+0x1e>
 8005eac:	08006b8c 	.word	0x08006b8c
 8005eb0:	08006b8c 	.word	0x08006b8c
 8005eb4:	08006b8c 	.word	0x08006b8c
 8005eb8:	08006b90 	.word	0x08006b90

08005ebc <__retarget_lock_init_recursive>:
 8005ebc:	4770      	bx	lr

08005ebe <__retarget_lock_acquire_recursive>:
 8005ebe:	4770      	bx	lr

08005ec0 <__retarget_lock_release_recursive>:
 8005ec0:	4770      	bx	lr

08005ec2 <strcpy>:
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ec8:	f803 2b01 	strb.w	r2, [r3], #1
 8005ecc:	2a00      	cmp	r2, #0
 8005ece:	d1f9      	bne.n	8005ec4 <strcpy+0x2>
 8005ed0:	4770      	bx	lr
	...

08005ed4 <_free_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	d041      	beq.n	8005f60 <_free_r+0x8c>
 8005edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee0:	1f0c      	subs	r4, r1, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bfb8      	it	lt
 8005ee6:	18e4      	addlt	r4, r4, r3
 8005ee8:	f000 f8e8 	bl	80060bc <__malloc_lock>
 8005eec:	4a1d      	ldr	r2, [pc, #116]	@ (8005f64 <_free_r+0x90>)
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	b933      	cbnz	r3, 8005f00 <_free_r+0x2c>
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	6014      	str	r4, [r2, #0]
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005efc:	f000 b8e4 	b.w	80060c8 <__malloc_unlock>
 8005f00:	42a3      	cmp	r3, r4
 8005f02:	d908      	bls.n	8005f16 <_free_r+0x42>
 8005f04:	6820      	ldr	r0, [r4, #0]
 8005f06:	1821      	adds	r1, r4, r0
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	bf01      	itttt	eq
 8005f0c:	6819      	ldreq	r1, [r3, #0]
 8005f0e:	685b      	ldreq	r3, [r3, #4]
 8005f10:	1809      	addeq	r1, r1, r0
 8005f12:	6021      	streq	r1, [r4, #0]
 8005f14:	e7ed      	b.n	8005ef2 <_free_r+0x1e>
 8005f16:	461a      	mov	r2, r3
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	b10b      	cbz	r3, 8005f20 <_free_r+0x4c>
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	d9fa      	bls.n	8005f16 <_free_r+0x42>
 8005f20:	6811      	ldr	r1, [r2, #0]
 8005f22:	1850      	adds	r0, r2, r1
 8005f24:	42a0      	cmp	r0, r4
 8005f26:	d10b      	bne.n	8005f40 <_free_r+0x6c>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	4401      	add	r1, r0
 8005f2c:	1850      	adds	r0, r2, r1
 8005f2e:	4283      	cmp	r3, r0
 8005f30:	6011      	str	r1, [r2, #0]
 8005f32:	d1e0      	bne.n	8005ef6 <_free_r+0x22>
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	6053      	str	r3, [r2, #4]
 8005f3a:	4408      	add	r0, r1
 8005f3c:	6010      	str	r0, [r2, #0]
 8005f3e:	e7da      	b.n	8005ef6 <_free_r+0x22>
 8005f40:	d902      	bls.n	8005f48 <_free_r+0x74>
 8005f42:	230c      	movs	r3, #12
 8005f44:	602b      	str	r3, [r5, #0]
 8005f46:	e7d6      	b.n	8005ef6 <_free_r+0x22>
 8005f48:	6820      	ldr	r0, [r4, #0]
 8005f4a:	1821      	adds	r1, r4, r0
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	bf04      	itt	eq
 8005f50:	6819      	ldreq	r1, [r3, #0]
 8005f52:	685b      	ldreq	r3, [r3, #4]
 8005f54:	6063      	str	r3, [r4, #4]
 8005f56:	bf04      	itt	eq
 8005f58:	1809      	addeq	r1, r1, r0
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	6054      	str	r4, [r2, #4]
 8005f5e:	e7ca      	b.n	8005ef6 <_free_r+0x22>
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	bf00      	nop
 8005f64:	20000468 	.word	0x20000468

08005f68 <malloc>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	@ (8005f74 <malloc+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f000 b825 	b.w	8005fbc <_malloc_r>
 8005f72:	bf00      	nop
 8005f74:	20000078 	.word	0x20000078

08005f78 <sbrk_aligned>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	4e0f      	ldr	r6, [pc, #60]	@ (8005fb8 <sbrk_aligned+0x40>)
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	6831      	ldr	r1, [r6, #0]
 8005f80:	4605      	mov	r5, r0
 8005f82:	b911      	cbnz	r1, 8005f8a <sbrk_aligned+0x12>
 8005f84:	f000 fca6 	bl	80068d4 <_sbrk_r>
 8005f88:	6030      	str	r0, [r6, #0]
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 fca1 	bl	80068d4 <_sbrk_r>
 8005f92:	1c43      	adds	r3, r0, #1
 8005f94:	d103      	bne.n	8005f9e <sbrk_aligned+0x26>
 8005f96:	f04f 34ff 	mov.w	r4, #4294967295
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
 8005f9e:	1cc4      	adds	r4, r0, #3
 8005fa0:	f024 0403 	bic.w	r4, r4, #3
 8005fa4:	42a0      	cmp	r0, r4
 8005fa6:	d0f8      	beq.n	8005f9a <sbrk_aligned+0x22>
 8005fa8:	1a21      	subs	r1, r4, r0
 8005faa:	4628      	mov	r0, r5
 8005fac:	f000 fc92 	bl	80068d4 <_sbrk_r>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d1f2      	bne.n	8005f9a <sbrk_aligned+0x22>
 8005fb4:	e7ef      	b.n	8005f96 <sbrk_aligned+0x1e>
 8005fb6:	bf00      	nop
 8005fb8:	20000464 	.word	0x20000464

08005fbc <_malloc_r>:
 8005fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc0:	1ccd      	adds	r5, r1, #3
 8005fc2:	f025 0503 	bic.w	r5, r5, #3
 8005fc6:	3508      	adds	r5, #8
 8005fc8:	2d0c      	cmp	r5, #12
 8005fca:	bf38      	it	cc
 8005fcc:	250c      	movcc	r5, #12
 8005fce:	2d00      	cmp	r5, #0
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	db01      	blt.n	8005fd8 <_malloc_r+0x1c>
 8005fd4:	42a9      	cmp	r1, r5
 8005fd6:	d904      	bls.n	8005fe2 <_malloc_r+0x26>
 8005fd8:	230c      	movs	r3, #12
 8005fda:	6033      	str	r3, [r6, #0]
 8005fdc:	2000      	movs	r0, #0
 8005fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060b8 <_malloc_r+0xfc>
 8005fe6:	f000 f869 	bl	80060bc <__malloc_lock>
 8005fea:	f8d8 3000 	ldr.w	r3, [r8]
 8005fee:	461c      	mov	r4, r3
 8005ff0:	bb44      	cbnz	r4, 8006044 <_malloc_r+0x88>
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f7ff ffbf 	bl	8005f78 <sbrk_aligned>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	d158      	bne.n	80060b2 <_malloc_r+0xf6>
 8006000:	f8d8 4000 	ldr.w	r4, [r8]
 8006004:	4627      	mov	r7, r4
 8006006:	2f00      	cmp	r7, #0
 8006008:	d143      	bne.n	8006092 <_malloc_r+0xd6>
 800600a:	2c00      	cmp	r4, #0
 800600c:	d04b      	beq.n	80060a6 <_malloc_r+0xea>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	4639      	mov	r1, r7
 8006012:	4630      	mov	r0, r6
 8006014:	eb04 0903 	add.w	r9, r4, r3
 8006018:	f000 fc5c 	bl	80068d4 <_sbrk_r>
 800601c:	4581      	cmp	r9, r0
 800601e:	d142      	bne.n	80060a6 <_malloc_r+0xea>
 8006020:	6821      	ldr	r1, [r4, #0]
 8006022:	1a6d      	subs	r5, r5, r1
 8006024:	4629      	mov	r1, r5
 8006026:	4630      	mov	r0, r6
 8006028:	f7ff ffa6 	bl	8005f78 <sbrk_aligned>
 800602c:	3001      	adds	r0, #1
 800602e:	d03a      	beq.n	80060a6 <_malloc_r+0xea>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	442b      	add	r3, r5
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	f8d8 3000 	ldr.w	r3, [r8]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	bb62      	cbnz	r2, 8006098 <_malloc_r+0xdc>
 800603e:	f8c8 7000 	str.w	r7, [r8]
 8006042:	e00f      	b.n	8006064 <_malloc_r+0xa8>
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	1b52      	subs	r2, r2, r5
 8006048:	d420      	bmi.n	800608c <_malloc_r+0xd0>
 800604a:	2a0b      	cmp	r2, #11
 800604c:	d917      	bls.n	800607e <_malloc_r+0xc2>
 800604e:	1961      	adds	r1, r4, r5
 8006050:	42a3      	cmp	r3, r4
 8006052:	6025      	str	r5, [r4, #0]
 8006054:	bf18      	it	ne
 8006056:	6059      	strne	r1, [r3, #4]
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	bf08      	it	eq
 800605c:	f8c8 1000 	streq.w	r1, [r8]
 8006060:	5162      	str	r2, [r4, r5]
 8006062:	604b      	str	r3, [r1, #4]
 8006064:	4630      	mov	r0, r6
 8006066:	f000 f82f 	bl	80060c8 <__malloc_unlock>
 800606a:	f104 000b 	add.w	r0, r4, #11
 800606e:	1d23      	adds	r3, r4, #4
 8006070:	f020 0007 	bic.w	r0, r0, #7
 8006074:	1ac2      	subs	r2, r0, r3
 8006076:	bf1c      	itt	ne
 8006078:	1a1b      	subne	r3, r3, r0
 800607a:	50a3      	strne	r3, [r4, r2]
 800607c:	e7af      	b.n	8005fde <_malloc_r+0x22>
 800607e:	6862      	ldr	r2, [r4, #4]
 8006080:	42a3      	cmp	r3, r4
 8006082:	bf0c      	ite	eq
 8006084:	f8c8 2000 	streq.w	r2, [r8]
 8006088:	605a      	strne	r2, [r3, #4]
 800608a:	e7eb      	b.n	8006064 <_malloc_r+0xa8>
 800608c:	4623      	mov	r3, r4
 800608e:	6864      	ldr	r4, [r4, #4]
 8006090:	e7ae      	b.n	8005ff0 <_malloc_r+0x34>
 8006092:	463c      	mov	r4, r7
 8006094:	687f      	ldr	r7, [r7, #4]
 8006096:	e7b6      	b.n	8006006 <_malloc_r+0x4a>
 8006098:	461a      	mov	r2, r3
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	42a3      	cmp	r3, r4
 800609e:	d1fb      	bne.n	8006098 <_malloc_r+0xdc>
 80060a0:	2300      	movs	r3, #0
 80060a2:	6053      	str	r3, [r2, #4]
 80060a4:	e7de      	b.n	8006064 <_malloc_r+0xa8>
 80060a6:	230c      	movs	r3, #12
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 f80c 	bl	80060c8 <__malloc_unlock>
 80060b0:	e794      	b.n	8005fdc <_malloc_r+0x20>
 80060b2:	6005      	str	r5, [r0, #0]
 80060b4:	e7d6      	b.n	8006064 <_malloc_r+0xa8>
 80060b6:	bf00      	nop
 80060b8:	20000468 	.word	0x20000468

080060bc <__malloc_lock>:
 80060bc:	4801      	ldr	r0, [pc, #4]	@ (80060c4 <__malloc_lock+0x8>)
 80060be:	f7ff befe 	b.w	8005ebe <__retarget_lock_acquire_recursive>
 80060c2:	bf00      	nop
 80060c4:	20000460 	.word	0x20000460

080060c8 <__malloc_unlock>:
 80060c8:	4801      	ldr	r0, [pc, #4]	@ (80060d0 <__malloc_unlock+0x8>)
 80060ca:	f7ff bef9 	b.w	8005ec0 <__retarget_lock_release_recursive>
 80060ce:	bf00      	nop
 80060d0:	20000460 	.word	0x20000460

080060d4 <__sfputc_r>:
 80060d4:	6893      	ldr	r3, [r2, #8]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	b410      	push	{r4}
 80060dc:	6093      	str	r3, [r2, #8]
 80060de:	da08      	bge.n	80060f2 <__sfputc_r+0x1e>
 80060e0:	6994      	ldr	r4, [r2, #24]
 80060e2:	42a3      	cmp	r3, r4
 80060e4:	db01      	blt.n	80060ea <__sfputc_r+0x16>
 80060e6:	290a      	cmp	r1, #10
 80060e8:	d103      	bne.n	80060f2 <__sfputc_r+0x1e>
 80060ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ee:	f7ff bdb8 	b.w	8005c62 <__swbuf_r>
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	1c58      	adds	r0, r3, #1
 80060f6:	6010      	str	r0, [r2, #0]
 80060f8:	7019      	strb	r1, [r3, #0]
 80060fa:	4608      	mov	r0, r1
 80060fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006100:	4770      	bx	lr

08006102 <__sfputs_r>:
 8006102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	4614      	mov	r4, r2
 800610a:	18d5      	adds	r5, r2, r3
 800610c:	42ac      	cmp	r4, r5
 800610e:	d101      	bne.n	8006114 <__sfputs_r+0x12>
 8006110:	2000      	movs	r0, #0
 8006112:	e007      	b.n	8006124 <__sfputs_r+0x22>
 8006114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006118:	463a      	mov	r2, r7
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ffda 	bl	80060d4 <__sfputc_r>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d1f3      	bne.n	800610c <__sfputs_r+0xa>
 8006124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006128 <_vfiprintf_r>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	460d      	mov	r5, r1
 800612e:	b09d      	sub	sp, #116	@ 0x74
 8006130:	4614      	mov	r4, r2
 8006132:	4698      	mov	r8, r3
 8006134:	4606      	mov	r6, r0
 8006136:	b118      	cbz	r0, 8006140 <_vfiprintf_r+0x18>
 8006138:	6a03      	ldr	r3, [r0, #32]
 800613a:	b90b      	cbnz	r3, 8006140 <_vfiprintf_r+0x18>
 800613c:	f7ff fbec 	bl	8005918 <__sinit>
 8006140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006142:	07d9      	lsls	r1, r3, #31
 8006144:	d405      	bmi.n	8006152 <_vfiprintf_r+0x2a>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	059a      	lsls	r2, r3, #22
 800614a:	d402      	bmi.n	8006152 <_vfiprintf_r+0x2a>
 800614c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800614e:	f7ff feb6 	bl	8005ebe <__retarget_lock_acquire_recursive>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	071b      	lsls	r3, r3, #28
 8006156:	d501      	bpl.n	800615c <_vfiprintf_r+0x34>
 8006158:	692b      	ldr	r3, [r5, #16]
 800615a:	b99b      	cbnz	r3, 8006184 <_vfiprintf_r+0x5c>
 800615c:	4629      	mov	r1, r5
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff fdbe 	bl	8005ce0 <__swsetup_r>
 8006164:	b170      	cbz	r0, 8006184 <_vfiprintf_r+0x5c>
 8006166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006168:	07dc      	lsls	r4, r3, #31
 800616a:	d504      	bpl.n	8006176 <_vfiprintf_r+0x4e>
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	b01d      	add	sp, #116	@ 0x74
 8006172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	0598      	lsls	r0, r3, #22
 800617a:	d4f7      	bmi.n	800616c <_vfiprintf_r+0x44>
 800617c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800617e:	f7ff fe9f 	bl	8005ec0 <__retarget_lock_release_recursive>
 8006182:	e7f3      	b.n	800616c <_vfiprintf_r+0x44>
 8006184:	2300      	movs	r3, #0
 8006186:	9309      	str	r3, [sp, #36]	@ 0x24
 8006188:	2320      	movs	r3, #32
 800618a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800618e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006192:	2330      	movs	r3, #48	@ 0x30
 8006194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006344 <_vfiprintf_r+0x21c>
 8006198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800619c:	f04f 0901 	mov.w	r9, #1
 80061a0:	4623      	mov	r3, r4
 80061a2:	469a      	mov	sl, r3
 80061a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061a8:	b10a      	cbz	r2, 80061ae <_vfiprintf_r+0x86>
 80061aa:	2a25      	cmp	r2, #37	@ 0x25
 80061ac:	d1f9      	bne.n	80061a2 <_vfiprintf_r+0x7a>
 80061ae:	ebba 0b04 	subs.w	fp, sl, r4
 80061b2:	d00b      	beq.n	80061cc <_vfiprintf_r+0xa4>
 80061b4:	465b      	mov	r3, fp
 80061b6:	4622      	mov	r2, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffa1 	bl	8006102 <__sfputs_r>
 80061c0:	3001      	adds	r0, #1
 80061c2:	f000 80a7 	beq.w	8006314 <_vfiprintf_r+0x1ec>
 80061c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061c8:	445a      	add	r2, fp
 80061ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80061cc:	f89a 3000 	ldrb.w	r3, [sl]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 809f 	beq.w	8006314 <_vfiprintf_r+0x1ec>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f04f 32ff 	mov.w	r2, #4294967295
 80061dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e0:	f10a 0a01 	add.w	sl, sl, #1
 80061e4:	9304      	str	r3, [sp, #16]
 80061e6:	9307      	str	r3, [sp, #28]
 80061e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80061ee:	4654      	mov	r4, sl
 80061f0:	2205      	movs	r2, #5
 80061f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f6:	4853      	ldr	r0, [pc, #332]	@ (8006344 <_vfiprintf_r+0x21c>)
 80061f8:	f7fa f81a 	bl	8000230 <memchr>
 80061fc:	9a04      	ldr	r2, [sp, #16]
 80061fe:	b9d8      	cbnz	r0, 8006238 <_vfiprintf_r+0x110>
 8006200:	06d1      	lsls	r1, r2, #27
 8006202:	bf44      	itt	mi
 8006204:	2320      	movmi	r3, #32
 8006206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800620a:	0713      	lsls	r3, r2, #28
 800620c:	bf44      	itt	mi
 800620e:	232b      	movmi	r3, #43	@ 0x2b
 8006210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006214:	f89a 3000 	ldrb.w	r3, [sl]
 8006218:	2b2a      	cmp	r3, #42	@ 0x2a
 800621a:	d015      	beq.n	8006248 <_vfiprintf_r+0x120>
 800621c:	9a07      	ldr	r2, [sp, #28]
 800621e:	4654      	mov	r4, sl
 8006220:	2000      	movs	r0, #0
 8006222:	f04f 0c0a 	mov.w	ip, #10
 8006226:	4621      	mov	r1, r4
 8006228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800622c:	3b30      	subs	r3, #48	@ 0x30
 800622e:	2b09      	cmp	r3, #9
 8006230:	d94b      	bls.n	80062ca <_vfiprintf_r+0x1a2>
 8006232:	b1b0      	cbz	r0, 8006262 <_vfiprintf_r+0x13a>
 8006234:	9207      	str	r2, [sp, #28]
 8006236:	e014      	b.n	8006262 <_vfiprintf_r+0x13a>
 8006238:	eba0 0308 	sub.w	r3, r0, r8
 800623c:	fa09 f303 	lsl.w	r3, r9, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	9304      	str	r3, [sp, #16]
 8006244:	46a2      	mov	sl, r4
 8006246:	e7d2      	b.n	80061ee <_vfiprintf_r+0xc6>
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	1d19      	adds	r1, r3, #4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	9103      	str	r1, [sp, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	bfbb      	ittet	lt
 8006254:	425b      	neglt	r3, r3
 8006256:	f042 0202 	orrlt.w	r2, r2, #2
 800625a:	9307      	strge	r3, [sp, #28]
 800625c:	9307      	strlt	r3, [sp, #28]
 800625e:	bfb8      	it	lt
 8006260:	9204      	strlt	r2, [sp, #16]
 8006262:	7823      	ldrb	r3, [r4, #0]
 8006264:	2b2e      	cmp	r3, #46	@ 0x2e
 8006266:	d10a      	bne.n	800627e <_vfiprintf_r+0x156>
 8006268:	7863      	ldrb	r3, [r4, #1]
 800626a:	2b2a      	cmp	r3, #42	@ 0x2a
 800626c:	d132      	bne.n	80062d4 <_vfiprintf_r+0x1ac>
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	9203      	str	r2, [sp, #12]
 8006276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800627a:	3402      	adds	r4, #2
 800627c:	9305      	str	r3, [sp, #20]
 800627e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006354 <_vfiprintf_r+0x22c>
 8006282:	7821      	ldrb	r1, [r4, #0]
 8006284:	2203      	movs	r2, #3
 8006286:	4650      	mov	r0, sl
 8006288:	f7f9 ffd2 	bl	8000230 <memchr>
 800628c:	b138      	cbz	r0, 800629e <_vfiprintf_r+0x176>
 800628e:	9b04      	ldr	r3, [sp, #16]
 8006290:	eba0 000a 	sub.w	r0, r0, sl
 8006294:	2240      	movs	r2, #64	@ 0x40
 8006296:	4082      	lsls	r2, r0
 8006298:	4313      	orrs	r3, r2
 800629a:	3401      	adds	r4, #1
 800629c:	9304      	str	r3, [sp, #16]
 800629e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a2:	4829      	ldr	r0, [pc, #164]	@ (8006348 <_vfiprintf_r+0x220>)
 80062a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062a8:	2206      	movs	r2, #6
 80062aa:	f7f9 ffc1 	bl	8000230 <memchr>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d03f      	beq.n	8006332 <_vfiprintf_r+0x20a>
 80062b2:	4b26      	ldr	r3, [pc, #152]	@ (800634c <_vfiprintf_r+0x224>)
 80062b4:	bb1b      	cbnz	r3, 80062fe <_vfiprintf_r+0x1d6>
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	3307      	adds	r3, #7
 80062ba:	f023 0307 	bic.w	r3, r3, #7
 80062be:	3308      	adds	r3, #8
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c4:	443b      	add	r3, r7
 80062c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c8:	e76a      	b.n	80061a0 <_vfiprintf_r+0x78>
 80062ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ce:	460c      	mov	r4, r1
 80062d0:	2001      	movs	r0, #1
 80062d2:	e7a8      	b.n	8006226 <_vfiprintf_r+0xfe>
 80062d4:	2300      	movs	r3, #0
 80062d6:	3401      	adds	r4, #1
 80062d8:	9305      	str	r3, [sp, #20]
 80062da:	4619      	mov	r1, r3
 80062dc:	f04f 0c0a 	mov.w	ip, #10
 80062e0:	4620      	mov	r0, r4
 80062e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e6:	3a30      	subs	r2, #48	@ 0x30
 80062e8:	2a09      	cmp	r2, #9
 80062ea:	d903      	bls.n	80062f4 <_vfiprintf_r+0x1cc>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0c6      	beq.n	800627e <_vfiprintf_r+0x156>
 80062f0:	9105      	str	r1, [sp, #20]
 80062f2:	e7c4      	b.n	800627e <_vfiprintf_r+0x156>
 80062f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80062f8:	4604      	mov	r4, r0
 80062fa:	2301      	movs	r3, #1
 80062fc:	e7f0      	b.n	80062e0 <_vfiprintf_r+0x1b8>
 80062fe:	ab03      	add	r3, sp, #12
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	462a      	mov	r2, r5
 8006304:	4b12      	ldr	r3, [pc, #72]	@ (8006350 <_vfiprintf_r+0x228>)
 8006306:	a904      	add	r1, sp, #16
 8006308:	4630      	mov	r0, r6
 800630a:	f3af 8000 	nop.w
 800630e:	4607      	mov	r7, r0
 8006310:	1c78      	adds	r0, r7, #1
 8006312:	d1d6      	bne.n	80062c2 <_vfiprintf_r+0x19a>
 8006314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006316:	07d9      	lsls	r1, r3, #31
 8006318:	d405      	bmi.n	8006326 <_vfiprintf_r+0x1fe>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	059a      	lsls	r2, r3, #22
 800631e:	d402      	bmi.n	8006326 <_vfiprintf_r+0x1fe>
 8006320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006322:	f7ff fdcd 	bl	8005ec0 <__retarget_lock_release_recursive>
 8006326:	89ab      	ldrh	r3, [r5, #12]
 8006328:	065b      	lsls	r3, r3, #25
 800632a:	f53f af1f 	bmi.w	800616c <_vfiprintf_r+0x44>
 800632e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006330:	e71e      	b.n	8006170 <_vfiprintf_r+0x48>
 8006332:	ab03      	add	r3, sp, #12
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	462a      	mov	r2, r5
 8006338:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <_vfiprintf_r+0x228>)
 800633a:	a904      	add	r1, sp, #16
 800633c:	4630      	mov	r0, r6
 800633e:	f000 f879 	bl	8006434 <_printf_i>
 8006342:	e7e4      	b.n	800630e <_vfiprintf_r+0x1e6>
 8006344:	08006b50 	.word	0x08006b50
 8006348:	08006b5a 	.word	0x08006b5a
 800634c:	00000000 	.word	0x00000000
 8006350:	08006103 	.word	0x08006103
 8006354:	08006b56 	.word	0x08006b56

08006358 <_printf_common>:
 8006358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	4616      	mov	r6, r2
 800635e:	4698      	mov	r8, r3
 8006360:	688a      	ldr	r2, [r1, #8]
 8006362:	690b      	ldr	r3, [r1, #16]
 8006364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006368:	4293      	cmp	r3, r2
 800636a:	bfb8      	it	lt
 800636c:	4613      	movlt	r3, r2
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006374:	4607      	mov	r7, r0
 8006376:	460c      	mov	r4, r1
 8006378:	b10a      	cbz	r2, 800637e <_printf_common+0x26>
 800637a:	3301      	adds	r3, #1
 800637c:	6033      	str	r3, [r6, #0]
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	0699      	lsls	r1, r3, #26
 8006382:	bf42      	ittt	mi
 8006384:	6833      	ldrmi	r3, [r6, #0]
 8006386:	3302      	addmi	r3, #2
 8006388:	6033      	strmi	r3, [r6, #0]
 800638a:	6825      	ldr	r5, [r4, #0]
 800638c:	f015 0506 	ands.w	r5, r5, #6
 8006390:	d106      	bne.n	80063a0 <_printf_common+0x48>
 8006392:	f104 0a19 	add.w	sl, r4, #25
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	6832      	ldr	r2, [r6, #0]
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	42ab      	cmp	r3, r5
 800639e:	dc26      	bgt.n	80063ee <_printf_common+0x96>
 80063a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	3b00      	subs	r3, #0
 80063a8:	bf18      	it	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	0692      	lsls	r2, r2, #26
 80063ae:	d42b      	bmi.n	8006408 <_printf_common+0xb0>
 80063b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063b4:	4641      	mov	r1, r8
 80063b6:	4638      	mov	r0, r7
 80063b8:	47c8      	blx	r9
 80063ba:	3001      	adds	r0, #1
 80063bc:	d01e      	beq.n	80063fc <_printf_common+0xa4>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	6922      	ldr	r2, [r4, #16]
 80063c2:	f003 0306 	and.w	r3, r3, #6
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	bf02      	ittt	eq
 80063ca:	68e5      	ldreq	r5, [r4, #12]
 80063cc:	6833      	ldreq	r3, [r6, #0]
 80063ce:	1aed      	subeq	r5, r5, r3
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	bf0c      	ite	eq
 80063d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d8:	2500      	movne	r5, #0
 80063da:	4293      	cmp	r3, r2
 80063dc:	bfc4      	itt	gt
 80063de:	1a9b      	subgt	r3, r3, r2
 80063e0:	18ed      	addgt	r5, r5, r3
 80063e2:	2600      	movs	r6, #0
 80063e4:	341a      	adds	r4, #26
 80063e6:	42b5      	cmp	r5, r6
 80063e8:	d11a      	bne.n	8006420 <_printf_common+0xc8>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e008      	b.n	8006400 <_printf_common+0xa8>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4652      	mov	r2, sl
 80063f2:	4641      	mov	r1, r8
 80063f4:	4638      	mov	r0, r7
 80063f6:	47c8      	blx	r9
 80063f8:	3001      	adds	r0, #1
 80063fa:	d103      	bne.n	8006404 <_printf_common+0xac>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006404:	3501      	adds	r5, #1
 8006406:	e7c6      	b.n	8006396 <_printf_common+0x3e>
 8006408:	18e1      	adds	r1, r4, r3
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	2030      	movs	r0, #48	@ 0x30
 800640e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006412:	4422      	add	r2, r4
 8006414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800641c:	3302      	adds	r3, #2
 800641e:	e7c7      	b.n	80063b0 <_printf_common+0x58>
 8006420:	2301      	movs	r3, #1
 8006422:	4622      	mov	r2, r4
 8006424:	4641      	mov	r1, r8
 8006426:	4638      	mov	r0, r7
 8006428:	47c8      	blx	r9
 800642a:	3001      	adds	r0, #1
 800642c:	d0e6      	beq.n	80063fc <_printf_common+0xa4>
 800642e:	3601      	adds	r6, #1
 8006430:	e7d9      	b.n	80063e6 <_printf_common+0x8e>
	...

08006434 <_printf_i>:
 8006434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	7e0f      	ldrb	r7, [r1, #24]
 800643a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800643c:	2f78      	cmp	r7, #120	@ 0x78
 800643e:	4691      	mov	r9, r2
 8006440:	4680      	mov	r8, r0
 8006442:	460c      	mov	r4, r1
 8006444:	469a      	mov	sl, r3
 8006446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800644a:	d807      	bhi.n	800645c <_printf_i+0x28>
 800644c:	2f62      	cmp	r7, #98	@ 0x62
 800644e:	d80a      	bhi.n	8006466 <_printf_i+0x32>
 8006450:	2f00      	cmp	r7, #0
 8006452:	f000 80d2 	beq.w	80065fa <_printf_i+0x1c6>
 8006456:	2f58      	cmp	r7, #88	@ 0x58
 8006458:	f000 80b9 	beq.w	80065ce <_printf_i+0x19a>
 800645c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006464:	e03a      	b.n	80064dc <_printf_i+0xa8>
 8006466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800646a:	2b15      	cmp	r3, #21
 800646c:	d8f6      	bhi.n	800645c <_printf_i+0x28>
 800646e:	a101      	add	r1, pc, #4	@ (adr r1, 8006474 <_printf_i+0x40>)
 8006470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006474:	080064cd 	.word	0x080064cd
 8006478:	080064e1 	.word	0x080064e1
 800647c:	0800645d 	.word	0x0800645d
 8006480:	0800645d 	.word	0x0800645d
 8006484:	0800645d 	.word	0x0800645d
 8006488:	0800645d 	.word	0x0800645d
 800648c:	080064e1 	.word	0x080064e1
 8006490:	0800645d 	.word	0x0800645d
 8006494:	0800645d 	.word	0x0800645d
 8006498:	0800645d 	.word	0x0800645d
 800649c:	0800645d 	.word	0x0800645d
 80064a0:	080065e1 	.word	0x080065e1
 80064a4:	0800650b 	.word	0x0800650b
 80064a8:	0800659b 	.word	0x0800659b
 80064ac:	0800645d 	.word	0x0800645d
 80064b0:	0800645d 	.word	0x0800645d
 80064b4:	08006603 	.word	0x08006603
 80064b8:	0800645d 	.word	0x0800645d
 80064bc:	0800650b 	.word	0x0800650b
 80064c0:	0800645d 	.word	0x0800645d
 80064c4:	0800645d 	.word	0x0800645d
 80064c8:	080065a3 	.word	0x080065a3
 80064cc:	6833      	ldr	r3, [r6, #0]
 80064ce:	1d1a      	adds	r2, r3, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6032      	str	r2, [r6, #0]
 80064d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064dc:	2301      	movs	r3, #1
 80064de:	e09d      	b.n	800661c <_printf_i+0x1e8>
 80064e0:	6833      	ldr	r3, [r6, #0]
 80064e2:	6820      	ldr	r0, [r4, #0]
 80064e4:	1d19      	adds	r1, r3, #4
 80064e6:	6031      	str	r1, [r6, #0]
 80064e8:	0606      	lsls	r6, r0, #24
 80064ea:	d501      	bpl.n	80064f0 <_printf_i+0xbc>
 80064ec:	681d      	ldr	r5, [r3, #0]
 80064ee:	e003      	b.n	80064f8 <_printf_i+0xc4>
 80064f0:	0645      	lsls	r5, r0, #25
 80064f2:	d5fb      	bpl.n	80064ec <_printf_i+0xb8>
 80064f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064f8:	2d00      	cmp	r5, #0
 80064fa:	da03      	bge.n	8006504 <_printf_i+0xd0>
 80064fc:	232d      	movs	r3, #45	@ 0x2d
 80064fe:	426d      	negs	r5, r5
 8006500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006504:	4859      	ldr	r0, [pc, #356]	@ (800666c <_printf_i+0x238>)
 8006506:	230a      	movs	r3, #10
 8006508:	e011      	b.n	800652e <_printf_i+0xfa>
 800650a:	6821      	ldr	r1, [r4, #0]
 800650c:	6833      	ldr	r3, [r6, #0]
 800650e:	0608      	lsls	r0, r1, #24
 8006510:	f853 5b04 	ldr.w	r5, [r3], #4
 8006514:	d402      	bmi.n	800651c <_printf_i+0xe8>
 8006516:	0649      	lsls	r1, r1, #25
 8006518:	bf48      	it	mi
 800651a:	b2ad      	uxthmi	r5, r5
 800651c:	2f6f      	cmp	r7, #111	@ 0x6f
 800651e:	4853      	ldr	r0, [pc, #332]	@ (800666c <_printf_i+0x238>)
 8006520:	6033      	str	r3, [r6, #0]
 8006522:	bf14      	ite	ne
 8006524:	230a      	movne	r3, #10
 8006526:	2308      	moveq	r3, #8
 8006528:	2100      	movs	r1, #0
 800652a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800652e:	6866      	ldr	r6, [r4, #4]
 8006530:	60a6      	str	r6, [r4, #8]
 8006532:	2e00      	cmp	r6, #0
 8006534:	bfa2      	ittt	ge
 8006536:	6821      	ldrge	r1, [r4, #0]
 8006538:	f021 0104 	bicge.w	r1, r1, #4
 800653c:	6021      	strge	r1, [r4, #0]
 800653e:	b90d      	cbnz	r5, 8006544 <_printf_i+0x110>
 8006540:	2e00      	cmp	r6, #0
 8006542:	d04b      	beq.n	80065dc <_printf_i+0x1a8>
 8006544:	4616      	mov	r6, r2
 8006546:	fbb5 f1f3 	udiv	r1, r5, r3
 800654a:	fb03 5711 	mls	r7, r3, r1, r5
 800654e:	5dc7      	ldrb	r7, [r0, r7]
 8006550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006554:	462f      	mov	r7, r5
 8006556:	42bb      	cmp	r3, r7
 8006558:	460d      	mov	r5, r1
 800655a:	d9f4      	bls.n	8006546 <_printf_i+0x112>
 800655c:	2b08      	cmp	r3, #8
 800655e:	d10b      	bne.n	8006578 <_printf_i+0x144>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	07df      	lsls	r7, r3, #31
 8006564:	d508      	bpl.n	8006578 <_printf_i+0x144>
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	6861      	ldr	r1, [r4, #4]
 800656a:	4299      	cmp	r1, r3
 800656c:	bfde      	ittt	le
 800656e:	2330      	movle	r3, #48	@ 0x30
 8006570:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006574:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006578:	1b92      	subs	r2, r2, r6
 800657a:	6122      	str	r2, [r4, #16]
 800657c:	f8cd a000 	str.w	sl, [sp]
 8006580:	464b      	mov	r3, r9
 8006582:	aa03      	add	r2, sp, #12
 8006584:	4621      	mov	r1, r4
 8006586:	4640      	mov	r0, r8
 8006588:	f7ff fee6 	bl	8006358 <_printf_common>
 800658c:	3001      	adds	r0, #1
 800658e:	d14a      	bne.n	8006626 <_printf_i+0x1f2>
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	b004      	add	sp, #16
 8006596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	f043 0320 	orr.w	r3, r3, #32
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	4833      	ldr	r0, [pc, #204]	@ (8006670 <_printf_i+0x23c>)
 80065a4:	2778      	movs	r7, #120	@ 0x78
 80065a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	6831      	ldr	r1, [r6, #0]
 80065ae:	061f      	lsls	r7, r3, #24
 80065b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80065b4:	d402      	bmi.n	80065bc <_printf_i+0x188>
 80065b6:	065f      	lsls	r7, r3, #25
 80065b8:	bf48      	it	mi
 80065ba:	b2ad      	uxthmi	r5, r5
 80065bc:	6031      	str	r1, [r6, #0]
 80065be:	07d9      	lsls	r1, r3, #31
 80065c0:	bf44      	itt	mi
 80065c2:	f043 0320 	orrmi.w	r3, r3, #32
 80065c6:	6023      	strmi	r3, [r4, #0]
 80065c8:	b11d      	cbz	r5, 80065d2 <_printf_i+0x19e>
 80065ca:	2310      	movs	r3, #16
 80065cc:	e7ac      	b.n	8006528 <_printf_i+0xf4>
 80065ce:	4827      	ldr	r0, [pc, #156]	@ (800666c <_printf_i+0x238>)
 80065d0:	e7e9      	b.n	80065a6 <_printf_i+0x172>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f023 0320 	bic.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	e7f6      	b.n	80065ca <_printf_i+0x196>
 80065dc:	4616      	mov	r6, r2
 80065de:	e7bd      	b.n	800655c <_printf_i+0x128>
 80065e0:	6833      	ldr	r3, [r6, #0]
 80065e2:	6825      	ldr	r5, [r4, #0]
 80065e4:	6961      	ldr	r1, [r4, #20]
 80065e6:	1d18      	adds	r0, r3, #4
 80065e8:	6030      	str	r0, [r6, #0]
 80065ea:	062e      	lsls	r6, r5, #24
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	d501      	bpl.n	80065f4 <_printf_i+0x1c0>
 80065f0:	6019      	str	r1, [r3, #0]
 80065f2:	e002      	b.n	80065fa <_printf_i+0x1c6>
 80065f4:	0668      	lsls	r0, r5, #25
 80065f6:	d5fb      	bpl.n	80065f0 <_printf_i+0x1bc>
 80065f8:	8019      	strh	r1, [r3, #0]
 80065fa:	2300      	movs	r3, #0
 80065fc:	6123      	str	r3, [r4, #16]
 80065fe:	4616      	mov	r6, r2
 8006600:	e7bc      	b.n	800657c <_printf_i+0x148>
 8006602:	6833      	ldr	r3, [r6, #0]
 8006604:	1d1a      	adds	r2, r3, #4
 8006606:	6032      	str	r2, [r6, #0]
 8006608:	681e      	ldr	r6, [r3, #0]
 800660a:	6862      	ldr	r2, [r4, #4]
 800660c:	2100      	movs	r1, #0
 800660e:	4630      	mov	r0, r6
 8006610:	f7f9 fe0e 	bl	8000230 <memchr>
 8006614:	b108      	cbz	r0, 800661a <_printf_i+0x1e6>
 8006616:	1b80      	subs	r0, r0, r6
 8006618:	6060      	str	r0, [r4, #4]
 800661a:	6863      	ldr	r3, [r4, #4]
 800661c:	6123      	str	r3, [r4, #16]
 800661e:	2300      	movs	r3, #0
 8006620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006624:	e7aa      	b.n	800657c <_printf_i+0x148>
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	4632      	mov	r2, r6
 800662a:	4649      	mov	r1, r9
 800662c:	4640      	mov	r0, r8
 800662e:	47d0      	blx	sl
 8006630:	3001      	adds	r0, #1
 8006632:	d0ad      	beq.n	8006590 <_printf_i+0x15c>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	079b      	lsls	r3, r3, #30
 8006638:	d413      	bmi.n	8006662 <_printf_i+0x22e>
 800663a:	68e0      	ldr	r0, [r4, #12]
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	4298      	cmp	r0, r3
 8006640:	bfb8      	it	lt
 8006642:	4618      	movlt	r0, r3
 8006644:	e7a6      	b.n	8006594 <_printf_i+0x160>
 8006646:	2301      	movs	r3, #1
 8006648:	4632      	mov	r2, r6
 800664a:	4649      	mov	r1, r9
 800664c:	4640      	mov	r0, r8
 800664e:	47d0      	blx	sl
 8006650:	3001      	adds	r0, #1
 8006652:	d09d      	beq.n	8006590 <_printf_i+0x15c>
 8006654:	3501      	adds	r5, #1
 8006656:	68e3      	ldr	r3, [r4, #12]
 8006658:	9903      	ldr	r1, [sp, #12]
 800665a:	1a5b      	subs	r3, r3, r1
 800665c:	42ab      	cmp	r3, r5
 800665e:	dcf2      	bgt.n	8006646 <_printf_i+0x212>
 8006660:	e7eb      	b.n	800663a <_printf_i+0x206>
 8006662:	2500      	movs	r5, #0
 8006664:	f104 0619 	add.w	r6, r4, #25
 8006668:	e7f5      	b.n	8006656 <_printf_i+0x222>
 800666a:	bf00      	nop
 800666c:	08006b61 	.word	0x08006b61
 8006670:	08006b72 	.word	0x08006b72

08006674 <__sflush_r>:
 8006674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667c:	0716      	lsls	r6, r2, #28
 800667e:	4605      	mov	r5, r0
 8006680:	460c      	mov	r4, r1
 8006682:	d454      	bmi.n	800672e <__sflush_r+0xba>
 8006684:	684b      	ldr	r3, [r1, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	dc02      	bgt.n	8006690 <__sflush_r+0x1c>
 800668a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	dd48      	ble.n	8006722 <__sflush_r+0xae>
 8006690:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006692:	2e00      	cmp	r6, #0
 8006694:	d045      	beq.n	8006722 <__sflush_r+0xae>
 8006696:	2300      	movs	r3, #0
 8006698:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800669c:	682f      	ldr	r7, [r5, #0]
 800669e:	6a21      	ldr	r1, [r4, #32]
 80066a0:	602b      	str	r3, [r5, #0]
 80066a2:	d030      	beq.n	8006706 <__sflush_r+0x92>
 80066a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	0759      	lsls	r1, r3, #29
 80066aa:	d505      	bpl.n	80066b8 <__sflush_r+0x44>
 80066ac:	6863      	ldr	r3, [r4, #4]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066b2:	b10b      	cbz	r3, 80066b8 <__sflush_r+0x44>
 80066b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066bc:	6a21      	ldr	r1, [r4, #32]
 80066be:	4628      	mov	r0, r5
 80066c0:	47b0      	blx	r6
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	d106      	bne.n	80066d6 <__sflush_r+0x62>
 80066c8:	6829      	ldr	r1, [r5, #0]
 80066ca:	291d      	cmp	r1, #29
 80066cc:	d82b      	bhi.n	8006726 <__sflush_r+0xb2>
 80066ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006778 <__sflush_r+0x104>)
 80066d0:	410a      	asrs	r2, r1
 80066d2:	07d6      	lsls	r6, r2, #31
 80066d4:	d427      	bmi.n	8006726 <__sflush_r+0xb2>
 80066d6:	2200      	movs	r2, #0
 80066d8:	6062      	str	r2, [r4, #4]
 80066da:	04d9      	lsls	r1, r3, #19
 80066dc:	6922      	ldr	r2, [r4, #16]
 80066de:	6022      	str	r2, [r4, #0]
 80066e0:	d504      	bpl.n	80066ec <__sflush_r+0x78>
 80066e2:	1c42      	adds	r2, r0, #1
 80066e4:	d101      	bne.n	80066ea <__sflush_r+0x76>
 80066e6:	682b      	ldr	r3, [r5, #0]
 80066e8:	b903      	cbnz	r3, 80066ec <__sflush_r+0x78>
 80066ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80066ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066ee:	602f      	str	r7, [r5, #0]
 80066f0:	b1b9      	cbz	r1, 8006722 <__sflush_r+0xae>
 80066f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066f6:	4299      	cmp	r1, r3
 80066f8:	d002      	beq.n	8006700 <__sflush_r+0x8c>
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7ff fbea 	bl	8005ed4 <_free_r>
 8006700:	2300      	movs	r3, #0
 8006702:	6363      	str	r3, [r4, #52]	@ 0x34
 8006704:	e00d      	b.n	8006722 <__sflush_r+0xae>
 8006706:	2301      	movs	r3, #1
 8006708:	4628      	mov	r0, r5
 800670a:	47b0      	blx	r6
 800670c:	4602      	mov	r2, r0
 800670e:	1c50      	adds	r0, r2, #1
 8006710:	d1c9      	bne.n	80066a6 <__sflush_r+0x32>
 8006712:	682b      	ldr	r3, [r5, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0c6      	beq.n	80066a6 <__sflush_r+0x32>
 8006718:	2b1d      	cmp	r3, #29
 800671a:	d001      	beq.n	8006720 <__sflush_r+0xac>
 800671c:	2b16      	cmp	r3, #22
 800671e:	d11e      	bne.n	800675e <__sflush_r+0xea>
 8006720:	602f      	str	r7, [r5, #0]
 8006722:	2000      	movs	r0, #0
 8006724:	e022      	b.n	800676c <__sflush_r+0xf8>
 8006726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800672a:	b21b      	sxth	r3, r3
 800672c:	e01b      	b.n	8006766 <__sflush_r+0xf2>
 800672e:	690f      	ldr	r7, [r1, #16]
 8006730:	2f00      	cmp	r7, #0
 8006732:	d0f6      	beq.n	8006722 <__sflush_r+0xae>
 8006734:	0793      	lsls	r3, r2, #30
 8006736:	680e      	ldr	r6, [r1, #0]
 8006738:	bf08      	it	eq
 800673a:	694b      	ldreq	r3, [r1, #20]
 800673c:	600f      	str	r7, [r1, #0]
 800673e:	bf18      	it	ne
 8006740:	2300      	movne	r3, #0
 8006742:	eba6 0807 	sub.w	r8, r6, r7
 8006746:	608b      	str	r3, [r1, #8]
 8006748:	f1b8 0f00 	cmp.w	r8, #0
 800674c:	dde9      	ble.n	8006722 <__sflush_r+0xae>
 800674e:	6a21      	ldr	r1, [r4, #32]
 8006750:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006752:	4643      	mov	r3, r8
 8006754:	463a      	mov	r2, r7
 8006756:	4628      	mov	r0, r5
 8006758:	47b0      	blx	r6
 800675a:	2800      	cmp	r0, #0
 800675c:	dc08      	bgt.n	8006770 <__sflush_r+0xfc>
 800675e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	4407      	add	r7, r0
 8006772:	eba8 0800 	sub.w	r8, r8, r0
 8006776:	e7e7      	b.n	8006748 <__sflush_r+0xd4>
 8006778:	dfbffffe 	.word	0xdfbffffe

0800677c <_fflush_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	690b      	ldr	r3, [r1, #16]
 8006780:	4605      	mov	r5, r0
 8006782:	460c      	mov	r4, r1
 8006784:	b913      	cbnz	r3, 800678c <_fflush_r+0x10>
 8006786:	2500      	movs	r5, #0
 8006788:	4628      	mov	r0, r5
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	b118      	cbz	r0, 8006796 <_fflush_r+0x1a>
 800678e:	6a03      	ldr	r3, [r0, #32]
 8006790:	b90b      	cbnz	r3, 8006796 <_fflush_r+0x1a>
 8006792:	f7ff f8c1 	bl	8005918 <__sinit>
 8006796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f3      	beq.n	8006786 <_fflush_r+0xa>
 800679e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067a0:	07d0      	lsls	r0, r2, #31
 80067a2:	d404      	bmi.n	80067ae <_fflush_r+0x32>
 80067a4:	0599      	lsls	r1, r3, #22
 80067a6:	d402      	bmi.n	80067ae <_fflush_r+0x32>
 80067a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067aa:	f7ff fb88 	bl	8005ebe <__retarget_lock_acquire_recursive>
 80067ae:	4628      	mov	r0, r5
 80067b0:	4621      	mov	r1, r4
 80067b2:	f7ff ff5f 	bl	8006674 <__sflush_r>
 80067b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067b8:	07da      	lsls	r2, r3, #31
 80067ba:	4605      	mov	r5, r0
 80067bc:	d4e4      	bmi.n	8006788 <_fflush_r+0xc>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	059b      	lsls	r3, r3, #22
 80067c2:	d4e1      	bmi.n	8006788 <_fflush_r+0xc>
 80067c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067c6:	f7ff fb7b 	bl	8005ec0 <__retarget_lock_release_recursive>
 80067ca:	e7dd      	b.n	8006788 <_fflush_r+0xc>

080067cc <__swhatbuf_r>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	460c      	mov	r4, r1
 80067d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d4:	2900      	cmp	r1, #0
 80067d6:	b096      	sub	sp, #88	@ 0x58
 80067d8:	4615      	mov	r5, r2
 80067da:	461e      	mov	r6, r3
 80067dc:	da0d      	bge.n	80067fa <__swhatbuf_r+0x2e>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067e4:	f04f 0100 	mov.w	r1, #0
 80067e8:	bf14      	ite	ne
 80067ea:	2340      	movne	r3, #64	@ 0x40
 80067ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067f0:	2000      	movs	r0, #0
 80067f2:	6031      	str	r1, [r6, #0]
 80067f4:	602b      	str	r3, [r5, #0]
 80067f6:	b016      	add	sp, #88	@ 0x58
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	466a      	mov	r2, sp
 80067fc:	f000 f848 	bl	8006890 <_fstat_r>
 8006800:	2800      	cmp	r0, #0
 8006802:	dbec      	blt.n	80067de <__swhatbuf_r+0x12>
 8006804:	9901      	ldr	r1, [sp, #4]
 8006806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800680a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800680e:	4259      	negs	r1, r3
 8006810:	4159      	adcs	r1, r3
 8006812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006816:	e7eb      	b.n	80067f0 <__swhatbuf_r+0x24>

08006818 <__smakebuf_r>:
 8006818:	898b      	ldrh	r3, [r1, #12]
 800681a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800681c:	079d      	lsls	r5, r3, #30
 800681e:	4606      	mov	r6, r0
 8006820:	460c      	mov	r4, r1
 8006822:	d507      	bpl.n	8006834 <__smakebuf_r+0x1c>
 8006824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	2301      	movs	r3, #1
 800682e:	6163      	str	r3, [r4, #20]
 8006830:	b003      	add	sp, #12
 8006832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006834:	ab01      	add	r3, sp, #4
 8006836:	466a      	mov	r2, sp
 8006838:	f7ff ffc8 	bl	80067cc <__swhatbuf_r>
 800683c:	9f00      	ldr	r7, [sp, #0]
 800683e:	4605      	mov	r5, r0
 8006840:	4639      	mov	r1, r7
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff fbba 	bl	8005fbc <_malloc_r>
 8006848:	b948      	cbnz	r0, 800685e <__smakebuf_r+0x46>
 800684a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800684e:	059a      	lsls	r2, r3, #22
 8006850:	d4ee      	bmi.n	8006830 <__smakebuf_r+0x18>
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	f043 0302 	orr.w	r3, r3, #2
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	e7e2      	b.n	8006824 <__smakebuf_r+0xc>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	6020      	str	r0, [r4, #0]
 8006862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006866:	81a3      	strh	r3, [r4, #12]
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800686e:	b15b      	cbz	r3, 8006888 <__smakebuf_r+0x70>
 8006870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006874:	4630      	mov	r0, r6
 8006876:	f000 f81d 	bl	80068b4 <_isatty_r>
 800687a:	b128      	cbz	r0, 8006888 <__smakebuf_r+0x70>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f023 0303 	bic.w	r3, r3, #3
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	431d      	orrs	r5, r3
 800688c:	81a5      	strh	r5, [r4, #12]
 800688e:	e7cf      	b.n	8006830 <__smakebuf_r+0x18>

08006890 <_fstat_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d07      	ldr	r5, [pc, #28]	@ (80068b0 <_fstat_r+0x20>)
 8006894:	2300      	movs	r3, #0
 8006896:	4604      	mov	r4, r0
 8006898:	4608      	mov	r0, r1
 800689a:	4611      	mov	r1, r2
 800689c:	602b      	str	r3, [r5, #0]
 800689e:	f7fa fa29 	bl	8000cf4 <_fstat>
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	d102      	bne.n	80068ac <_fstat_r+0x1c>
 80068a6:	682b      	ldr	r3, [r5, #0]
 80068a8:	b103      	cbz	r3, 80068ac <_fstat_r+0x1c>
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	bd38      	pop	{r3, r4, r5, pc}
 80068ae:	bf00      	nop
 80068b0:	2000045c 	.word	0x2000045c

080068b4 <_isatty_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d06      	ldr	r5, [pc, #24]	@ (80068d0 <_isatty_r+0x1c>)
 80068b8:	2300      	movs	r3, #0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	602b      	str	r3, [r5, #0]
 80068c0:	f7fa fa28 	bl	8000d14 <_isatty>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_isatty_r+0x1a>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_isatty_r+0x1a>
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	2000045c 	.word	0x2000045c

080068d4 <_sbrk_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4d06      	ldr	r5, [pc, #24]	@ (80068f0 <_sbrk_r+0x1c>)
 80068d8:	2300      	movs	r3, #0
 80068da:	4604      	mov	r4, r0
 80068dc:	4608      	mov	r0, r1
 80068de:	602b      	str	r3, [r5, #0]
 80068e0:	f7fa fa30 	bl	8000d44 <_sbrk>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d102      	bne.n	80068ee <_sbrk_r+0x1a>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	b103      	cbz	r3, 80068ee <_sbrk_r+0x1a>
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	2000045c 	.word	0x2000045c

080068f4 <_init>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr

08006900 <_fini>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr
