
DHCP_TRIAl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007780  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08007960  08007960  00008960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c30  08007c30  000090cc  2**0
                  CONTENTS
  4 .ARM          00000008  08007c30  08007c30  00008c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c38  08007c38  000090cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c38  08007c38  00008c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c3c  08007c3c  00008c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08007c40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  200000cc  08007d0c  000090cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b98  08007d0c  00009b98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121cc  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e43  00000000  00000000  0001b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001e110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4a  00000000  00000000  0001f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002702c  00000000  00000000  0001fd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137b1  00000000  00000000  00046d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1e94  00000000  00000000  0005a52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c3c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004924  00000000  00000000  0014c408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00150d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000cc 	.word	0x200000cc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007948 	.word	0x08007948

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000d0 	.word	0x200000d0
 800021c:	08007948 	.word	0x08007948

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b6:	f003 ff1a 	bl	80043ee <HAL_Init>

	/* USER CODE BEGIN Init */
	setbuf(stdout, NULL);
 80005ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <main+0x74>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f006 faa0 	bl	8006b08 <setbuf>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c8:	f000 f836 	bl	8000638 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005cc:	f000 f910 	bl	80007f0 <MX_GPIO_Init>
	MX_SPI1_Init();
 80005d0:	f000 f87c 	bl	80006cc <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80005d4:	f000 f8c0 	bl	8000758 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("W5500 DHCP TEST!\r\n");
 80005d8:	4813      	ldr	r0, [pc, #76]	@ (8000628 <main+0x78>)
 80005da:	f006 fa8d 	bl	8006af8 <puts>
	W5500Init();
 80005de:	f003 f8dd 	bl	800379c <W5500Init>

	wiz_PhyConf phyconf;

	phyconf.by = PHY_CONFBY_SW;
 80005e2:	2301      	movs	r3, #1
 80005e4:	713b      	strb	r3, [r7, #4]
	phyconf.duplex = PHY_DUPLEX_FULL;
 80005e6:	2301      	movs	r3, #1
 80005e8:	71fb      	strb	r3, [r7, #7]
	phyconf.speed = PHY_SPEED_10;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71bb      	strb	r3, [r7, #6]
	phyconf.mode = PHY_MODE_AUTONEGO;
 80005ee:	2301      	movs	r3, #1
 80005f0:	717b      	strb	r3, [r7, #5]

	ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	200a      	movs	r0, #10
 80005f8:	f003 fa0a 	bl	8003a10 <ctlwizchip>

	PHYStatusCheck();
 80005fc:	f000 f96a 	bl	80008d4 <PHYStatusCheck>
	PrintPHYConf();
 8000600:	f000 f98e 	bl	8000920 <PrintPHYConf>

	DHCP_init(SOCKET_ID_FOR_DHCP, dhcp_buffer);
 8000604:	4909      	ldr	r1, [pc, #36]	@ (800062c <main+0x7c>)
 8000606:	2007      	movs	r0, #7
 8000608:	f001 ff24 	bl	8002454 <DHCP_init>
	reg_dhcp_cbfunc(OnDHCPIPAssigned, NULL, NULL);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <main+0x80>)
 8000612:	f000 fc7d 	bl	8000f10 <reg_dhcp_cbfunc>

	printf("Obtaining IP address ...\r\n");
 8000616:	4807      	ldr	r0, [pc, #28]	@ (8000634 <main+0x84>)
 8000618:	f006 fa6e 	bl	8006af8 <puts>

	while(1)
	{
	  DHCP_run();
 800061c:	f001 fd62 	bl	80020e4 <DHCP_run>
 8000620:	e7fc      	b.n	800061c <main+0x6c>
 8000622:	bf00      	nop
 8000624:	2000007c 	.word	0x2000007c
 8000628:	08007960 	.word	0x08007960
 800062c:	200001e0 	.word	0x200001e0
 8000630:	080009a9 	.word	0x080009a9
 8000634:	08007974 	.word	0x08007974

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2238      	movs	r2, #56	@ 0x38
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 fbf2 	bl	8006e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800065e:	f004 f9d7 	bl	8004a10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000670:	2303      	movs	r3, #3
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0318 	add.w	r3, r7, #24
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fa73 	bl	8004b78 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000698:	f000 fa12 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2101      	movs	r1, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fd71 	bl	800519c <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006c0:	f000 f9fe 	bl	8000ac0 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	@ 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <MX_SPI1_Init+0x84>)
 80006d2:	4a20      	ldr	r2, [pc, #128]	@ (8000754 <MX_SPI1_Init+0x88>)
 80006d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <MX_SPI1_Init+0x84>)
 80006d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <MX_SPI1_Init+0x84>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <MX_SPI1_Init+0x84>)
 80006e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ec:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_SPI1_Init+0x84>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f2:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <MX_SPI1_Init+0x84>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f8:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_SPI1_Init+0x84>)
 80006fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_SPI1_Init+0x84>)
 8000702:	2208      	movs	r2, #8
 8000704:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_SPI1_Init+0x84>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_SPI1_Init+0x84>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_SPI1_Init+0x84>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <MX_SPI1_Init+0x84>)
 800071a:	2207      	movs	r2, #7
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_SPI1_Init+0x84>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_SPI1_Init+0x84>)
 8000726:	2208      	movs	r2, #8
 8000728:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072a:	4809      	ldr	r0, [pc, #36]	@ (8000750 <MX_SPI1_Init+0x84>)
 800072c:	f005 f9a0 	bl	8005a70 <HAL_SPI_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000736:	f000 f9c3 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <MX_SPI1_Init+0x84>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b03      	ldr	r3, [pc, #12]	@ (8000750 <MX_SPI1_Init+0x84>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000748:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000e8 	.word	0x200000e8
 8000754:	40013000 	.word	0x40013000

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 800075e:	4a23      	ldr	r2, [pc, #140]	@ (80007ec <MX_USART2_UART_Init+0x94>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000762:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 8000764:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a0:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 80007a2:	f005 fa10 	bl	8005bc6 <HAL_UART_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007ac:	f000 f988 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 80007b4:	f005 ffac 	bl	8006710 <HAL_UARTEx_SetTxFifoThreshold>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007be:	f000 f97f 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4808      	ldr	r0, [pc, #32]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 80007c6:	f005 ffe1 	bl	800678c <HAL_UARTEx_SetRxFifoThreshold>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007d0:	f000 f976 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_USART2_UART_Init+0x90>)
 80007d6:	f005 ff62 	bl	800669e <HAL_UARTEx_DisableFifoMode>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007e0:	f000 f96e 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000014c 	.word	0x2000014c
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_GPIO_Init+0x90>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a1d      	ldr	r2, [pc, #116]	@ (8000880 <MX_GPIO_Init+0x90>)
 800080c:	f043 0320 	orr.w	r3, r3, #32
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_GPIO_Init+0x90>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_GPIO_Init+0x90>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <MX_GPIO_Init+0x90>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_GPIO_Init+0x90>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_GPIO_Init+0x90>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a11      	ldr	r2, [pc, #68]	@ (8000880 <MX_GPIO_Init+0x90>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_GPIO_Init+0x90>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2103      	movs	r1, #3
 8000852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000856:	f004 f8c3 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800085a:	2303      	movs	r3, #3
 800085c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000874:	f003 ff32 	bl	80046dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <UWriteData>:

/* USER CODE BEGIN 4 */
void UWriteData(const char data)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 800088e:	bf00      	nop
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <UWriteData+0x30>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089a:	2b80      	cmp	r3, #128	@ 0x80
 800089c:	d1f8      	bne.n	8000890 <UWriteData+0xc>

	huart2.Instance->TDR=data;
 800089e:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <UWriteData+0x30>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28

}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2000014c 	.word	0x2000014c

080008b8 <__io_putchar>:

int __io_putchar(int ch)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffdd 	bl	8000884 <UWriteData>
	return ch;
 80008ca:	687b      	ldr	r3, [r7, #4]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	uint8_t tmp;


	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <PHYStatusCheck+0x40>)
 80008dc:	f006 f8a4 	bl	8006a28 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	4619      	mov	r1, r3
 80008e4:	200f      	movs	r0, #15
 80008e6:	f003 f893 	bl	8003a10 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 80008f0:	4809      	ldr	r0, [pc, #36]	@ (8000918 <PHYStatusCheck+0x44>)
 80008f2:	f006 f899 	bl	8006a28 <iprintf>
			HAL_Delay(1500);
 80008f6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80008fa:	f003 fde9 	bl	80044d0 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0ea      	beq.n	80008da <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <PHYStatusCheck+0x48>)
 8000906:	f006 f88f 	bl	8006a28 <iprintf>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08007990 	.word	0x08007990
 8000918:	080079b8 	.word	0x080079b8
 800091c:	080079cc 	.word	0x080079cc

08000920 <PrintPHYConf>:

void PrintPHYConf(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4619      	mov	r1, r3
 800092a:	200b      	movs	r0, #11
 800092c:	f003 f870 	bl	8003a10 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000930:	793b      	ldrb	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d103      	bne.n	800093e <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 8000936:	4814      	ldr	r0, [pc, #80]	@ (8000988 <PrintPHYConf+0x68>)
 8000938:	f006 f876 	bl	8006a28 <iprintf>
 800093c:	e002      	b.n	8000944 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 800093e:	4813      	ldr	r0, [pc, #76]	@ (800098c <PrintPHYConf+0x6c>)
 8000940:	f006 f872 	bl	8006a28 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 8000944:	797b      	ldrb	r3, [r7, #5]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d103      	bne.n	8000952 <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 800094a:	4811      	ldr	r0, [pc, #68]	@ (8000990 <PrintPHYConf+0x70>)
 800094c:	f006 f86c 	bl	8006a28 <iprintf>
 8000950:	e002      	b.n	8000958 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 8000952:	4810      	ldr	r0, [pc, #64]	@ (8000994 <PrintPHYConf+0x74>)
 8000954:	f006 f868 	bl	8006a28 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d103      	bne.n	8000966 <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 800095e:	480e      	ldr	r0, [pc, #56]	@ (8000998 <PrintPHYConf+0x78>)
 8000960:	f006 f862 	bl	8006a28 <iprintf>
 8000964:	e002      	b.n	800096c <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <PrintPHYConf+0x7c>)
 8000968:	f006 f85e 	bl	8006a28 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <PrintPHYConf+0x80>)
 8000974:	f006 f858 	bl	8006a28 <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 8000978:	e002      	b.n	8000980 <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <PrintPHYConf+0x84>)
 800097c:	f006 f854 	bl	8006a28 <iprintf>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	080079e8 	.word	0x080079e8
 800098c:	08007a0c 	.word	0x08007a0c
 8000990:	08007a2c 	.word	0x08007a2c
 8000994:	08007a48 	.word	0x08007a48
 8000998:	08007a68 	.word	0x08007a68
 800099c:	08007a7c 	.word	0x08007a7c
 80009a0:	08007a90 	.word	0x08007a90
 80009a4:	08007aa0 	.word	0x08007aa0

080009a8 <OnDHCPIPAssigned>:

static void OnDHCPIPAssigned(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	printf("IP Obtained: \r\n");
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <OnDHCPIPAssigned+0x38>)
 80009ae:	f006 f8a3 	bl	8006af8 <puts>

	getIPfromDHCP(gWIZNETINFO.ip);
 80009b2:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <OnDHCPIPAssigned+0x3c>)
 80009b4:	f001 fe06 	bl	80025c4 <getIPfromDHCP>
	getGWfromDHCP(gWIZNETINFO.gw);
 80009b8:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <OnDHCPIPAssigned+0x40>)
 80009ba:	f001 fe23 	bl	8002604 <getGWfromDHCP>
	getSNfromDHCP(gWIZNETINFO.sn);
 80009be:	480b      	ldr	r0, [pc, #44]	@ (80009ec <OnDHCPIPAssigned+0x44>)
 80009c0:	f001 fe40 	bl	8002644 <getSNfromDHCP>
	getDNSfromDHCP(gWIZNETINFO.dns);
 80009c4:	480a      	ldr	r0, [pc, #40]	@ (80009f0 <OnDHCPIPAssigned+0x48>)
 80009c6:	f001 fe5d 	bl	8002684 <getDNSfromDHCP>

	gWIZNETINFO.dhcp = NETINFO_DHCP;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <OnDHCPIPAssigned+0x4c>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	759a      	strb	r2, [r3, #22]

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 80009d0:	4908      	ldr	r1, [pc, #32]	@ (80009f4 <OnDHCPIPAssigned+0x4c>)
 80009d2:	2000      	movs	r0, #0
 80009d4:	f003 f8fc 	bl	8003bd0 <ctlnetwork>

	DisplayNetworkConfigurations();
 80009d8:	f000 f80e 	bl	80009f8 <DisplayNetworkConfigurations>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	08007ab4 	.word	0x08007ab4
 80009e4:	20000006 	.word	0x20000006
 80009e8:	2000000e 	.word	0x2000000e
 80009ec:	2000000a 	.word	0x2000000a
 80009f0:	20000012 	.word	0x20000012
 80009f4:	20000000 	.word	0x20000000

080009f8 <DisplayNetworkConfigurations>:
static void DisplayNetworkConfigurations()
{
 80009f8:	b5b0      	push	{r4, r5, r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af04      	add	r7, sp, #16
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 80009fe:	492a      	ldr	r1, [pc, #168]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a00:	2001      	movs	r0, #1
 8000a02:	f003 f8e5 	bl	8003bd0 <ctlnetwork>

	printf(" MAC : %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8000a06:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a0e:	785b      	ldrb	r3, [r3, #1]
 8000a10:	461c      	mov	r4, r3
 8000a12:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a14:	789b      	ldrb	r3, [r3, #2]
 8000a16:	461d      	mov	r5, r3
 8000a18:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a1a:	78db      	ldrb	r3, [r3, #3]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a20:	791b      	ldrb	r3, [r3, #4]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a26:	795b      	ldrb	r3, [r3, #5]
 8000a28:	9302      	str	r3, [sp, #8]
 8000a2a:	9101      	str	r1, [sp, #4]
 8000a2c:	9200      	str	r2, [sp, #0]
 8000a2e:	462b      	mov	r3, r5
 8000a30:	4622      	mov	r2, r4
 8000a32:	4601      	mov	r1, r0
 8000a34:	481d      	ldr	r0, [pc, #116]	@ (8000aac <DisplayNetworkConfigurations+0xb4>)
 8000a36:	f005 fff7 	bl	8006a28 <iprintf>
	printf(" IP : %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a3c:	799b      	ldrb	r3, [r3, #6]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a42:	79db      	ldrb	r3, [r3, #7]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a48:	7a1b      	ldrb	r3, [r3, #8]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a4e:	7a5b      	ldrb	r3, [r3, #9]
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4603      	mov	r3, r0
 8000a54:	4816      	ldr	r0, [pc, #88]	@ (8000ab0 <DisplayNetworkConfigurations+0xb8>)
 8000a56:	f005 ffe7 	bl	8006a28 <iprintf>
	printf(" GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a5c:	7b9b      	ldrb	r3, [r3, #14]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a62:	7bdb      	ldrb	r3, [r3, #15]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a68:	7c1b      	ldrb	r3, [r3, #16]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a6e:	7c5b      	ldrb	r3, [r3, #17]
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	4603      	mov	r3, r0
 8000a74:	480f      	ldr	r0, [pc, #60]	@ (8000ab4 <DisplayNetworkConfigurations+0xbc>)
 8000a76:	f005 ffd7 	bl	8006a28 <iprintf>
	printf(" SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a7c:	7a9b      	ldrb	r3, [r3, #10]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a82:	7adb      	ldrb	r3, [r3, #11]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a88:	7b1b      	ldrb	r3, [r3, #12]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <DisplayNetworkConfigurations+0xb0>)
 8000a8e:	7b5b      	ldrb	r3, [r3, #13]
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	4603      	mov	r3, r0
 8000a94:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <DisplayNetworkConfigurations+0xc0>)
 8000a96:	f005 ffc7 	bl	8006a28 <iprintf>
	printf("=======================================\r\n");
 8000a9a:	4808      	ldr	r0, [pc, #32]	@ (8000abc <DisplayNetworkConfigurations+0xc4>)
 8000a9c:	f006 f82c 	bl	8006af8 <puts>
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	08007ac4 	.word	0x08007ac4
 8000ab0:	08007aec 	.word	0x08007aec
 8000ab4:	08007b00 	.word	0x08007b00
 8000ab8:	08007b14 	.word	0x08007b14
 8000abc:	08007b28 	.word	0x08007b28

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b10 <HAL_MspInit+0x44>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aee:	4a08      	ldr	r2, [pc, #32]	@ (8000b10 <HAL_MspInit+0x44>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b02:	f004 f829 	bl	8004b58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a25      	ldr	r2, [pc, #148]	@ (8000bc8 <HAL_SPI_MspInit+0xb4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d144      	bne.n	8000bc0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b36:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <HAL_SPI_MspInit+0xb8>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3a:	4a24      	ldr	r2, [pc, #144]	@ (8000bcc <HAL_SPI_MspInit+0xb8>)
 8000b3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b42:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <HAL_SPI_MspInit+0xb8>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <HAL_SPI_MspInit+0xb8>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4a1e      	ldr	r2, [pc, #120]	@ (8000bcc <HAL_SPI_MspInit+0xb8>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <HAL_SPI_MspInit+0xb8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_SPI_MspInit+0xb8>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <HAL_SPI_MspInit+0xb8>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <HAL_SPI_MspInit+0xb8>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b7e:	23c0      	movs	r3, #192	@ 0xc0
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9c:	f003 fd9e 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_SPI_MspInit+0xbc>)
 8000bbc:	f003 fd8e 	bl	80046dc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	@ 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40013000 	.word	0x40013000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000400 	.word	0x48000400

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b09e      	sub	sp, #120	@ 0x78
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2254      	movs	r2, #84	@ 0x54
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f006 f91b 	bl	8006e30 <memset>
  if(huart->Instance==USART2)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c7c <HAL_UART_MspInit+0xa8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d136      	bne.n	8000c72 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4618      	mov	r0, r3
 8000c12:	f004 fcdf 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c1c:	f7ff ff50 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_UART_MspInit+0xac>)
 8000c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c24:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <HAL_UART_MspInit+0xac>)
 8000c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_UART_MspInit+0xac>)
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_UART_MspInit+0xac>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3c:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <HAL_UART_MspInit+0xac>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_UART_MspInit+0xac>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c50:	230c      	movs	r3, #12
 8000c52:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c60:	2307      	movs	r3, #7
 8000c62:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6e:	f003 fd35 	bl	80046dc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c72:	bf00      	nop
 8000c74:	3778      	adds	r7, #120	@ 0x78
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	40021000 	.word	0x40021000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f003 fbda 	bl	8004494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  MilliTimer_Handler();
 8000ce0:	f001 fd0a 	bl	80026f8 <MilliTimer_Handler>

  //One second callback for DHCP Module
  static uint16_t milli_count;
  milli_count++;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <SysTick_Handler+0x30>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <SysTick_Handler+0x30>)
 8000cee:	801a      	strh	r2, [r3, #0]
  if(milli_count==1000)
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <SysTick_Handler+0x30>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cf8:	d104      	bne.n	8000d04 <SysTick_Handler+0x2c>
  {
	  milli_count=0;
 8000cfa:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <SysTick_Handler+0x30>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	801a      	strh	r2, [r3, #0]
	  DHCP_time_handler();
 8000d00:	f001 fc52 	bl	80025a8 <DHCP_time_handler>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200009e0 	.word	0x200009e0

08000d0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI15_10_IRQn 0 */
//  BSP_PB_IRQHandler(BUTTON_USER);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e00a      	b.n	8000d42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d2c:	f3af 8000 	nop.w
 8000d30:	4601      	mov	r1, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	60ba      	str	r2, [r7, #8]
 8000d38:	b2ca      	uxtb	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dbf0      	blt.n	8000d2c <_read+0x12>
  }

  return len;
 8000d4a:	687b      	ldr	r3, [r7, #4]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e009      	b.n	8000d7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	60ba      	str	r2, [r7, #8]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fda2 	bl	80008b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	dbf1      	blt.n	8000d66 <_write+0x12>
  }
  return len;
 8000d82:	687b      	ldr	r3, [r7, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_close>:

int _close(int file)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000db4:	605a      	str	r2, [r3, #4]
  return 0;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_isatty>:

int _isatty(int file)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dcc:	2301      	movs	r3, #1
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b085      	sub	sp, #20
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f006 f852 	bl	8006ecc <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200009e4 	.word	0x200009e4
 8000e5c:	20000b98 	.word	0x20000b98

08000e60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000e88:	2204      	movs	r2, #4
 8000e8a:	4909      	ldr	r1, [pc, #36]	@ (8000eb0 <default_ip_assign+0x2c>)
 8000e8c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000e90:	f001 fd3a 	bl	8002908 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000e94:	2204      	movs	r2, #4
 8000e96:	4907      	ldr	r1, [pc, #28]	@ (8000eb4 <default_ip_assign+0x30>)
 8000e98:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8000e9c:	f001 fd34 	bl	8002908 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4905      	ldr	r1, [pc, #20]	@ (8000eb8 <default_ip_assign+0x34>)
 8000ea4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000ea8:	f001 fd2e 	bl	8002908 <WIZCHIP_WRITE_BUF>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200009f8 	.word	0x200009f8
 8000eb4:	20000a00 	.word	0x20000a00
 8000eb8:	200009fc 	.word	0x200009fc

08000ebc <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000ec0:	2180      	movs	r1, #128	@ 0x80
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f001 fc72 	bl	80027ac <WIZCHIP_WRITE>
   getMR(); // for delay
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f001 fc23 	bl	8002714 <WIZCHIP_READ>
   default_ip_assign();
 8000ece:	f7ff ffd9 	bl	8000e84 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8000ed2:	2206      	movs	r2, #6
 8000ed4:	4903      	ldr	r1, [pc, #12]	@ (8000ee4 <default_ip_update+0x28>)
 8000ed6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8000eda:	f001 fd15 	bl	8002908 <WIZCHIP_WRITE_BUF>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000a18 	.word	0x20000a18

08000ee8 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8000eec:	2180      	movs	r1, #128	@ 0x80
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f001 fc5c 	bl	80027ac <WIZCHIP_WRITE>
	getMR(); // for delay
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f001 fc0d 	bl	8002714 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8000efa:	2206      	movs	r2, #6
 8000efc:	4903      	ldr	r1, [pc, #12]	@ (8000f0c <default_ip_conflict+0x24>)
 8000efe:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8000f02:	f001 fd01 	bl	8002908 <WIZCHIP_WRITE_BUF>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000a18 	.word	0x20000a18

08000f10 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <reg_dhcp_cbfunc+0x50>)
 8000f1e:	4a11      	ldr	r2, [pc, #68]	@ (8000f64 <reg_dhcp_cbfunc+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <reg_dhcp_cbfunc+0x58>)
 8000f24:	4a11      	ldr	r2, [pc, #68]	@ (8000f6c <reg_dhcp_cbfunc+0x5c>)
 8000f26:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <reg_dhcp_cbfunc+0x60>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	@ (8000f74 <reg_dhcp_cbfunc+0x64>)
 8000f2c:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <reg_dhcp_cbfunc+0x2a>
 8000f34:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <reg_dhcp_cbfunc+0x50>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <reg_dhcp_cbfunc+0x36>
 8000f40:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <reg_dhcp_cbfunc+0x58>)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <reg_dhcp_cbfunc+0x42>
 8000f4c:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <reg_dhcp_cbfunc+0x60>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2000002c 	.word	0x2000002c
 8000f64:	08000e85 	.word	0x08000e85
 8000f68:	20000030 	.word	0x20000030
 8000f6c:	08000ebd 	.word	0x08000ebd
 8000f70:	20000034 	.word	0x20000034
 8000f74:	08000ee9 	.word	0x08000ee9

08000f78 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2206      	movs	r2, #6
 8000f82:	4619      	mov	r1, r3
 8000f84:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8000f88:	f001 fc5e 	bl	8002848 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000f8c:	4b72      	ldr	r3, [pc, #456]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8000f94:	4b70      	ldr	r3, [pc, #448]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8000f9c:	4b6e      	ldr	r3, [pc, #440]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2206      	movs	r2, #6
 8000fa2:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8000fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8000fac:	4b6a      	ldr	r3, [pc, #424]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8000fb4:	4b69      	ldr	r3, [pc, #420]	@ (800115c <makeDHCPMSG+0x1e4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0e1b      	lsrs	r3, r3, #24
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8000fc0:	4b66      	ldr	r3, [pc, #408]	@ (800115c <makeDHCPMSG+0x1e4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0c1a      	lsrs	r2, r3, #16
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8000fce:	4b63      	ldr	r3, [pc, #396]	@ (800115c <makeDHCPMSG+0x1e4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	0a1a      	lsrs	r2, r3, #8
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8000fdc:	4b5f      	ldr	r3, [pc, #380]	@ (800115c <makeDHCPMSG+0x1e4>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8000fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2200      	movs	r2, #0
 8000fee:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8000ff0:	4b59      	ldr	r3, [pc, #356]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	330a      	adds	r3, #10
 8000ff6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2280      	movs	r2, #128	@ 0x80
 8000ffc:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	3301      	adds	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8001006:	4b54      	ldr	r3, [pc, #336]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 800100e:	4b52      	ldr	r3, [pc, #328]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001016:	4b50      	ldr	r3, [pc, #320]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800101e:	4b4e      	ldr	r3, [pc, #312]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001026:	4b4c      	ldr	r3, [pc, #304]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800102e:	4b4a      	ldr	r3, [pc, #296]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001036:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800103e:	4b46      	ldr	r3, [pc, #280]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001046:	4b44      	ldr	r3, [pc, #272]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800104e:	4b42      	ldr	r3, [pc, #264]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001056:	4b40      	ldr	r3, [pc, #256]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800105e:	4b3e      	ldr	r3, [pc, #248]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001066:	4b3c      	ldr	r3, [pc, #240]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800106e:	4b3a      	ldr	r3, [pc, #232]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001076:	4b38      	ldr	r3, [pc, #224]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2200      	movs	r2, #0
 800107c:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800107e:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001086:	4b34      	ldr	r3, [pc, #208]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a35      	ldr	r2, [pc, #212]	@ (8001160 <makeDHCPMSG+0x1e8>)
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8001090:	4b31      	ldr	r3, [pc, #196]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a32      	ldr	r2, [pc, #200]	@ (8001160 <makeDHCPMSG+0x1e8>)
 8001096:	7852      	ldrb	r2, [r2, #1]
 8001098:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800109a:	4b2f      	ldr	r3, [pc, #188]	@ (8001158 <makeDHCPMSG+0x1e0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a30      	ldr	r2, [pc, #192]	@ (8001160 <makeDHCPMSG+0x1e8>)
 80010a0:	7892      	ldrb	r2, [r2, #2]
 80010a2:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80010a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001158 <makeDHCPMSG+0x1e0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001160 <makeDHCPMSG+0x1e8>)
 80010aa:	78d2      	ldrb	r2, [r2, #3]
 80010ac:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80010ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <makeDHCPMSG+0x1e0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001160 <makeDHCPMSG+0x1e8>)
 80010b4:	7912      	ldrb	r2, [r2, #4]
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80010ba:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <makeDHCPMSG+0x1e0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a28      	ldr	r2, [pc, #160]	@ (8001160 <makeDHCPMSG+0x1e8>)
 80010c0:	7952      	ldrb	r2, [r2, #5]
 80010c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80010c6:	2306      	movs	r3, #6
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e008      	b.n	80010de <makeDHCPMSG+0x166>
 80010cc:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <makeDHCPMSG+0x1e0>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	4413      	add	r3, r2
 80010d4:	2200      	movs	r2, #0
 80010d6:	771a      	strb	r2, [r3, #28]
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	3301      	adds	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d9f3      	bls.n	80010cc <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e009      	b.n	80010fe <makeDHCPMSG+0x186>
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <makeDHCPMSG+0x1e0>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4413      	add	r3, r2
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	3301      	adds	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b3f      	cmp	r3, #63	@ 0x3f
 8001102:	d9f2      	bls.n	80010ea <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e009      	b.n	800111e <makeDHCPMSG+0x1a6>
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <makeDHCPMSG+0x1e0>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	4413      	add	r3, r2
 8001112:	2200      	movs	r2, #0
 8001114:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	daf1      	bge.n	800110a <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2263      	movs	r2, #99	@ 0x63
 800112c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2282      	movs	r2, #130	@ 0x82
 8001136:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <makeDHCPMSG+0x1e0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2253      	movs	r2, #83	@ 0x53
 8001140:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <makeDHCPMSG+0x1e0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2263      	movs	r2, #99	@ 0x63
 800114a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000a14 	.word	0x20000a14
 800115c:	20000a10 	.word	0x20000a10
 8001160:	20000a18 	.word	0x20000a18

08001164 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001164:	b5b0      	push	{r4, r5, r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800116e:	f7ff ff03 	bl	8000f78 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8001172:	4b56      	ldr	r3, [pc, #344]	@ (80012cc <send_DHCP_DISCOVER+0x168>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8001178:	4b54      	ldr	r3, [pc, #336]	@ (80012cc <send_DHCP_DISCOVER+0x168>)
 800117a:	2200      	movs	r2, #0
 800117c:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <send_DHCP_DISCOVER+0x168>)
 8001180:	2200      	movs	r2, #0
 8001182:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001184:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <send_DHCP_DISCOVER+0x168>)
 8001186:	2200      	movs	r2, #0
 8001188:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800118a:	4b51      	ldr	r3, [pc, #324]	@ (80012d0 <send_DHCP_DISCOVER+0x16c>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8001190:	4b4f      	ldr	r3, [pc, #316]	@ (80012d0 <send_DHCP_DISCOVER+0x16c>)
 8001192:	2200      	movs	r2, #0
 8001194:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8001196:	4b4e      	ldr	r3, [pc, #312]	@ (80012d0 <send_DHCP_DISCOVER+0x16c>)
 8001198:	2200      	movs	r2, #0
 800119a:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 800119c:	4b4c      	ldr	r3, [pc, #304]	@ (80012d0 <send_DHCP_DISCOVER+0x16c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80011a2:	2304      	movs	r3, #4
 80011a4:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80011a6:	4b4b      	ldr	r3, [pc, #300]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	1c59      	adds	r1, r3, #1
 80011ae:	80b9      	strh	r1, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	2235      	movs	r2, #53	@ 0x35
 80011b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80011b8:	4b46      	ldr	r3, [pc, #280]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	1c59      	adds	r1, r3, #1
 80011c0:	80b9      	strh	r1, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80011ca:	4b42      	ldr	r3, [pc, #264]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	1c59      	adds	r1, r3, #1
 80011d2:	80b9      	strh	r1, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80011dc:	4b3d      	ldr	r3, [pc, #244]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	1c59      	adds	r1, r3, #1
 80011e4:	80b9      	strh	r1, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	223d      	movs	r2, #61	@ 0x3d
 80011ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80011ee:	4b39      	ldr	r3, [pc, #228]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	1c59      	adds	r1, r3, #1
 80011f6:	80b9      	strh	r1, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	2207      	movs	r2, #7
 80011fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001200:	4b34      	ldr	r3, [pc, #208]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	1c59      	adds	r1, r3, #1
 8001208:	80b9      	strh	r1, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	2201      	movs	r2, #1
 800120e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001212:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	88bb      	ldrh	r3, [r7, #4]
 8001218:	1c59      	adds	r1, r3, #1
 800121a:	80b9      	strh	r1, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <send_DHCP_DISCOVER+0x174>)
 8001220:	7819      	ldrb	r1, [r3, #0]
 8001222:	1813      	adds	r3, r2, r0
 8001224:	460a      	mov	r2, r1
 8001226:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800122a:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	1c59      	adds	r1, r3, #1
 8001232:	80b9      	strh	r1, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <send_DHCP_DISCOVER+0x174>)
 8001238:	7859      	ldrb	r1, [r3, #1]
 800123a:	1813      	adds	r3, r2, r0
 800123c:	460a      	mov	r2, r1
 800123e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001242:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	1c59      	adds	r1, r3, #1
 800124a:	80b9      	strh	r1, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <send_DHCP_DISCOVER+0x174>)
 8001250:	7899      	ldrb	r1, [r3, #2]
 8001252:	1813      	adds	r3, r2, r0
 8001254:	460a      	mov	r2, r1
 8001256:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	1c59      	adds	r1, r3, #1
 8001262:	80b9      	strh	r1, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <send_DHCP_DISCOVER+0x174>)
 8001268:	78d9      	ldrb	r1, [r3, #3]
 800126a:	1813      	adds	r3, r2, r0
 800126c:	460a      	mov	r2, r1
 800126e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	88bb      	ldrh	r3, [r7, #4]
 8001278:	1c59      	adds	r1, r3, #1
 800127a:	80b9      	strh	r1, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <send_DHCP_DISCOVER+0x174>)
 8001280:	7919      	ldrb	r1, [r3, #4]
 8001282:	1813      	adds	r3, r2, r0
 8001284:	460a      	mov	r2, r1
 8001286:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800128a:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	88bb      	ldrh	r3, [r7, #4]
 8001290:	1c59      	adds	r1, r3, #1
 8001292:	80b9      	strh	r1, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <send_DHCP_DISCOVER+0x174>)
 8001298:	7959      	ldrb	r1, [r3, #5]
 800129a:	1813      	adds	r3, r2, r0
 800129c:	460a      	mov	r2, r1
 800129e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	88bb      	ldrh	r3, [r7, #4]
 80012a8:	1c59      	adds	r1, r3, #1
 80012aa:	80b9      	strh	r1, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	220c      	movs	r2, #12
 80012b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <send_DHCP_DISCOVER+0x170>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	1c59      	adds	r1, r3, #1
 80012bc:	80b9      	strh	r1, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	80fb      	strh	r3, [r7, #6]
 80012ca:	e017      	b.n	80012fc <send_DHCP_DISCOVER+0x198>
 80012cc:	200009ec 	.word	0x200009ec
 80012d0:	200009f0 	.word	0x200009f0
 80012d4:	20000a14 	.word	0x20000a14
 80012d8:	20000a18 	.word	0x20000a18
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80012dc:	88f9      	ldrh	r1, [r7, #6]
 80012de:	4b80      	ldr	r3, [pc, #512]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	1c58      	adds	r0, r3, #1
 80012e6:	80b8      	strh	r0, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	4b7e      	ldr	r3, [pc, #504]	@ (80014e4 <send_DHCP_DISCOVER+0x380>)
 80012ec:	5c59      	ldrb	r1, [r3, r1]
 80012ee:	1813      	adds	r3, r2, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	3301      	adds	r3, #1
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	4a79      	ldr	r2, [pc, #484]	@ (80014e4 <send_DHCP_DISCOVER+0x380>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ea      	bne.n	80012dc <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001306:	4b78      	ldr	r3, [pc, #480]	@ (80014e8 <send_DHCP_DISCOVER+0x384>)
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b74      	ldr	r3, [pc, #464]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001310:	681c      	ldr	r4, [r3, #0]
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	1c59      	adds	r1, r3, #1
 8001316:	80b9      	strh	r1, [r7, #4]
 8001318:	461d      	mov	r5, r3
 800131a:	4610      	mov	r0, r2
 800131c:	f001 f9d2 	bl	80026c4 <NibbleToHex>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	1963      	adds	r3, r4, r5
 8001326:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800132a:	4b6f      	ldr	r3, [pc, #444]	@ (80014e8 <send_DHCP_DISCOVER+0x384>)
 800132c:	78da      	ldrb	r2, [r3, #3]
 800132e:	4b6c      	ldr	r3, [pc, #432]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001330:	681c      	ldr	r4, [r3, #0]
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	1c59      	adds	r1, r3, #1
 8001336:	80b9      	strh	r1, [r7, #4]
 8001338:	461d      	mov	r5, r3
 800133a:	4610      	mov	r0, r2
 800133c:	f001 f9c2 	bl	80026c4 <NibbleToHex>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	1963      	adds	r3, r4, r5
 8001346:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800134a:	4b67      	ldr	r3, [pc, #412]	@ (80014e8 <send_DHCP_DISCOVER+0x384>)
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b63      	ldr	r3, [pc, #396]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001354:	681c      	ldr	r4, [r3, #0]
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	1c59      	adds	r1, r3, #1
 800135a:	80b9      	strh	r1, [r7, #4]
 800135c:	461d      	mov	r5, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f001 f9b0 	bl	80026c4 <NibbleToHex>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	1963      	adds	r3, r4, r5
 800136a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800136e:	4b5e      	ldr	r3, [pc, #376]	@ (80014e8 <send_DHCP_DISCOVER+0x384>)
 8001370:	791a      	ldrb	r2, [r3, #4]
 8001372:	4b5b      	ldr	r3, [pc, #364]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001374:	681c      	ldr	r4, [r3, #0]
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	1c59      	adds	r1, r3, #1
 800137a:	80b9      	strh	r1, [r7, #4]
 800137c:	461d      	mov	r5, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f001 f9a0 	bl	80026c4 <NibbleToHex>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	1963      	adds	r3, r4, r5
 800138a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800138e:	4b56      	ldr	r3, [pc, #344]	@ (80014e8 <send_DHCP_DISCOVER+0x384>)
 8001390:	795b      	ldrb	r3, [r3, #5]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b52      	ldr	r3, [pc, #328]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001398:	681c      	ldr	r4, [r3, #0]
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	1c59      	adds	r1, r3, #1
 800139e:	80b9      	strh	r1, [r7, #4]
 80013a0:	461d      	mov	r5, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f001 f98e 	bl	80026c4 <NibbleToHex>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	1963      	adds	r3, r4, r5
 80013ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80013b2:	4b4d      	ldr	r3, [pc, #308]	@ (80014e8 <send_DHCP_DISCOVER+0x384>)
 80013b4:	795a      	ldrb	r2, [r3, #5]
 80013b6:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 80013b8:	681c      	ldr	r4, [r3, #0]
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	1c59      	adds	r1, r3, #1
 80013be:	80b9      	strh	r1, [r7, #4]
 80013c0:	461d      	mov	r5, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f001 f97e 	bl	80026c4 <NibbleToHex>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	1963      	adds	r3, r4, r5
 80013ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	b2d9      	uxtb	r1, r3
 80013d6:	4b42      	ldr	r3, [pc, #264]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	88b8      	ldrh	r0, [r7, #4]
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	3307      	adds	r3, #7
 80013e0:	1ac3      	subs	r3, r0, r3
 80013e2:	3106      	adds	r1, #6
 80013e4:	b2c9      	uxtb	r1, r1
 80013e6:	4413      	add	r3, r2
 80013e8:	460a      	mov	r2, r1
 80013ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80013ee:	4b3c      	ldr	r3, [pc, #240]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	1c59      	adds	r1, r3, #1
 80013f6:	80b9      	strh	r1, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	2237      	movs	r2, #55	@ 0x37
 80013fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001400:	4b37      	ldr	r3, [pc, #220]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	1c59      	adds	r1, r3, #1
 8001408:	80b9      	strh	r1, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	2206      	movs	r2, #6
 800140e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001412:	4b33      	ldr	r3, [pc, #204]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	88bb      	ldrh	r3, [r7, #4]
 8001418:	1c59      	adds	r1, r3, #1
 800141a:	80b9      	strh	r1, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	2201      	movs	r2, #1
 8001420:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001424:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	1c59      	adds	r1, r3, #1
 800142c:	80b9      	strh	r1, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	2203      	movs	r2, #3
 8001432:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001436:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	88bb      	ldrh	r3, [r7, #4]
 800143c:	1c59      	adds	r1, r3, #1
 800143e:	80b9      	strh	r1, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	2206      	movs	r2, #6
 8001444:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001448:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	1c59      	adds	r1, r3, #1
 8001450:	80b9      	strh	r1, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	220f      	movs	r2, #15
 8001456:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800145a:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	88bb      	ldrh	r3, [r7, #4]
 8001460:	1c59      	adds	r1, r3, #1
 8001462:	80b9      	strh	r1, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	223a      	movs	r2, #58	@ 0x3a
 8001468:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800146c:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	88bb      	ldrh	r3, [r7, #4]
 8001472:	1c59      	adds	r1, r3, #1
 8001474:	80b9      	strh	r1, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	223b      	movs	r2, #59	@ 0x3b
 800147a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	88bb      	ldrh	r3, [r7, #4]
 8001484:	1c59      	adds	r1, r3, #1
 8001486:	80b9      	strh	r1, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	22ff      	movs	r2, #255	@ 0xff
 800148c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	80fb      	strh	r3, [r7, #6]
 8001494:	e009      	b.n	80014aa <send_DHCP_DISCOVER+0x346>
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4413      	add	r3, r2
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	3301      	adds	r3, #1
 80014a8:	80fb      	strh	r3, [r7, #6]
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80014b0:	d3f1      	bcc.n	8001496 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80014b2:	23ff      	movs	r3, #255	@ 0xff
 80014b4:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80014b6:	23ff      	movs	r3, #255	@ 0xff
 80014b8:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80014ba:	23ff      	movs	r3, #255	@ 0xff
 80014bc:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80014be:	23ff      	movs	r3, #255	@ 0xff
 80014c0:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <send_DHCP_DISCOVER+0x388>)
 80014c4:	7818      	ldrb	r0, [r3, #0]
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <send_DHCP_DISCOVER+0x37c>)
 80014c8:	6819      	ldr	r1, [r3, #0]
 80014ca:	463b      	mov	r3, r7
 80014cc:	2243      	movs	r2, #67	@ 0x43
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80014d4:	f001 fd86 	bl	8002fe4 <sendto>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bdb0      	pop	{r4, r5, r7, pc}
 80014e0:	20000a14 	.word	0x20000a14
 80014e4:	20000024 	.word	0x20000024
 80014e8:	20000a18 	.word	0x20000a18
 80014ec:	200009e8 	.word	0x200009e8

080014f0 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80014fa:	f7ff fd3d 	bl	8000f78 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80014fe:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <send_DHCP_REQUEST+0x7c>)
 8001500:	f993 3000 	ldrsb.w	r3, [r3]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d004      	beq.n	8001512 <send_DHCP_REQUEST+0x22>
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <send_DHCP_REQUEST+0x7c>)
 800150a:	f993 3000 	ldrsb.w	r3, [r3]
 800150e:	2b04      	cmp	r3, #4
 8001510:	d134      	bne.n	800157c <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <send_DHCP_REQUEST+0x80>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	330a      	adds	r3, #10
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800151c:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <send_DHCP_REQUEST+0x80>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	330a      	adds	r3, #10
 8001522:	3301      	adds	r3, #1
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <send_DHCP_REQUEST+0x80>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a11      	ldr	r2, [pc, #68]	@ (8001574 <send_DHCP_REQUEST+0x84>)
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <send_DHCP_REQUEST+0x80>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0f      	ldr	r2, [pc, #60]	@ (8001574 <send_DHCP_REQUEST+0x84>)
 8001538:	7852      	ldrb	r2, [r2, #1]
 800153a:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <send_DHCP_REQUEST+0x80>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0c      	ldr	r2, [pc, #48]	@ (8001574 <send_DHCP_REQUEST+0x84>)
 8001542:	7892      	ldrb	r2, [r2, #2]
 8001544:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <send_DHCP_REQUEST+0x80>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <send_DHCP_REQUEST+0x84>)
 800154c:	78d2      	ldrb	r2, [r2, #3]
 800154e:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <send_DHCP_REQUEST+0x88>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <send_DHCP_REQUEST+0x88>)
 8001558:	785b      	ldrb	r3, [r3, #1]
 800155a:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <send_DHCP_REQUEST+0x88>)
 800155e:	789b      	ldrb	r3, [r3, #2]
 8001560:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8001562:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <send_DHCP_REQUEST+0x88>)
 8001564:	78db      	ldrb	r3, [r3, #3]
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	e010      	b.n	800158c <send_DHCP_REQUEST+0x9c>
 800156a:	bf00      	nop
 800156c:	20000a08 	.word	0x20000a08
 8001570:	20000a14 	.word	0x20000a14
 8001574:	200009f8 	.word	0x200009f8
 8001578:	200009ec 	.word	0x200009ec
   }
   else
   {
   	ip[0] = 255;
 800157c:	23ff      	movs	r3, #255	@ 0xff
 800157e:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001580:	23ff      	movs	r3, #255	@ 0xff
 8001582:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001584:	23ff      	movs	r3, #255	@ 0xff
 8001586:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001588:	23ff      	movs	r3, #255	@ 0xff
 800158a:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800158c:	2304      	movs	r3, #4
 800158e:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001590:	4b8d      	ldr	r3, [pc, #564]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	897b      	ldrh	r3, [r7, #10]
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	8179      	strh	r1, [r7, #10]
 800159a:	4413      	add	r3, r2
 800159c:	2235      	movs	r2, #53	@ 0x35
 800159e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80015a2:	4b89      	ldr	r3, [pc, #548]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	1c59      	adds	r1, r3, #1
 80015aa:	8179      	strh	r1, [r7, #10]
 80015ac:	4413      	add	r3, r2
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80015b4:	4b84      	ldr	r3, [pc, #528]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	1c59      	adds	r1, r3, #1
 80015bc:	8179      	strh	r1, [r7, #10]
 80015be:	4413      	add	r3, r2
 80015c0:	2203      	movs	r2, #3
 80015c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80015c6:	4b80      	ldr	r3, [pc, #512]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	897b      	ldrh	r3, [r7, #10]
 80015cc:	1c59      	adds	r1, r3, #1
 80015ce:	8179      	strh	r1, [r7, #10]
 80015d0:	4413      	add	r3, r2
 80015d2:	223d      	movs	r2, #61	@ 0x3d
 80015d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80015d8:	4b7b      	ldr	r3, [pc, #492]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	897b      	ldrh	r3, [r7, #10]
 80015de:	1c59      	adds	r1, r3, #1
 80015e0:	8179      	strh	r1, [r7, #10]
 80015e2:	4413      	add	r3, r2
 80015e4:	2207      	movs	r2, #7
 80015e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80015ea:	4b77      	ldr	r3, [pc, #476]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	897b      	ldrh	r3, [r7, #10]
 80015f0:	1c59      	adds	r1, r3, #1
 80015f2:	8179      	strh	r1, [r7, #10]
 80015f4:	4413      	add	r3, r2
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80015fc:	4b72      	ldr	r3, [pc, #456]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	897b      	ldrh	r3, [r7, #10]
 8001602:	1c59      	adds	r1, r3, #1
 8001604:	8179      	strh	r1, [r7, #10]
 8001606:	4618      	mov	r0, r3
 8001608:	4b70      	ldr	r3, [pc, #448]	@ (80017cc <send_DHCP_REQUEST+0x2dc>)
 800160a:	7819      	ldrb	r1, [r3, #0]
 800160c:	1813      	adds	r3, r2, r0
 800160e:	460a      	mov	r2, r1
 8001610:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001614:	4b6c      	ldr	r3, [pc, #432]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	897b      	ldrh	r3, [r7, #10]
 800161a:	1c59      	adds	r1, r3, #1
 800161c:	8179      	strh	r1, [r7, #10]
 800161e:	4618      	mov	r0, r3
 8001620:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <send_DHCP_REQUEST+0x2dc>)
 8001622:	7859      	ldrb	r1, [r3, #1]
 8001624:	1813      	adds	r3, r2, r0
 8001626:	460a      	mov	r2, r1
 8001628:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800162c:	4b66      	ldr	r3, [pc, #408]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	897b      	ldrh	r3, [r7, #10]
 8001632:	1c59      	adds	r1, r3, #1
 8001634:	8179      	strh	r1, [r7, #10]
 8001636:	4618      	mov	r0, r3
 8001638:	4b64      	ldr	r3, [pc, #400]	@ (80017cc <send_DHCP_REQUEST+0x2dc>)
 800163a:	7899      	ldrb	r1, [r3, #2]
 800163c:	1813      	adds	r3, r2, r0
 800163e:	460a      	mov	r2, r1
 8001640:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001644:	4b60      	ldr	r3, [pc, #384]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	897b      	ldrh	r3, [r7, #10]
 800164a:	1c59      	adds	r1, r3, #1
 800164c:	8179      	strh	r1, [r7, #10]
 800164e:	4618      	mov	r0, r3
 8001650:	4b5e      	ldr	r3, [pc, #376]	@ (80017cc <send_DHCP_REQUEST+0x2dc>)
 8001652:	78d9      	ldrb	r1, [r3, #3]
 8001654:	1813      	adds	r3, r2, r0
 8001656:	460a      	mov	r2, r1
 8001658:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800165c:	4b5a      	ldr	r3, [pc, #360]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	897b      	ldrh	r3, [r7, #10]
 8001662:	1c59      	adds	r1, r3, #1
 8001664:	8179      	strh	r1, [r7, #10]
 8001666:	4618      	mov	r0, r3
 8001668:	4b58      	ldr	r3, [pc, #352]	@ (80017cc <send_DHCP_REQUEST+0x2dc>)
 800166a:	7919      	ldrb	r1, [r3, #4]
 800166c:	1813      	adds	r3, r2, r0
 800166e:	460a      	mov	r2, r1
 8001670:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001674:	4b54      	ldr	r3, [pc, #336]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	897b      	ldrh	r3, [r7, #10]
 800167a:	1c59      	adds	r1, r3, #1
 800167c:	8179      	strh	r1, [r7, #10]
 800167e:	4618      	mov	r0, r3
 8001680:	4b52      	ldr	r3, [pc, #328]	@ (80017cc <send_DHCP_REQUEST+0x2dc>)
 8001682:	7959      	ldrb	r1, [r3, #5]
 8001684:	1813      	adds	r3, r2, r0
 8001686:	460a      	mov	r2, r1
 8001688:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2bff      	cmp	r3, #255	@ 0xff
 8001690:	f040 8084 	bne.w	800179c <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001694:	4b4c      	ldr	r3, [pc, #304]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	897b      	ldrh	r3, [r7, #10]
 800169a:	1c59      	adds	r1, r3, #1
 800169c:	8179      	strh	r1, [r7, #10]
 800169e:	4413      	add	r3, r2
 80016a0:	2232      	movs	r2, #50	@ 0x32
 80016a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80016a6:	4b48      	ldr	r3, [pc, #288]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	897b      	ldrh	r3, [r7, #10]
 80016ac:	1c59      	adds	r1, r3, #1
 80016ae:	8179      	strh	r1, [r7, #10]
 80016b0:	4413      	add	r3, r2
 80016b2:	2204      	movs	r2, #4
 80016b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80016b8:	4b43      	ldr	r3, [pc, #268]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	897b      	ldrh	r3, [r7, #10]
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	8179      	strh	r1, [r7, #10]
 80016c2:	4618      	mov	r0, r3
 80016c4:	4b42      	ldr	r3, [pc, #264]	@ (80017d0 <send_DHCP_REQUEST+0x2e0>)
 80016c6:	7819      	ldrb	r1, [r3, #0]
 80016c8:	1813      	adds	r3, r2, r0
 80016ca:	460a      	mov	r2, r1
 80016cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80016d0:	4b3d      	ldr	r3, [pc, #244]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	897b      	ldrh	r3, [r7, #10]
 80016d6:	1c59      	adds	r1, r3, #1
 80016d8:	8179      	strh	r1, [r7, #10]
 80016da:	4618      	mov	r0, r3
 80016dc:	4b3c      	ldr	r3, [pc, #240]	@ (80017d0 <send_DHCP_REQUEST+0x2e0>)
 80016de:	7859      	ldrb	r1, [r3, #1]
 80016e0:	1813      	adds	r3, r2, r0
 80016e2:	460a      	mov	r2, r1
 80016e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80016e8:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	897b      	ldrh	r3, [r7, #10]
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	8179      	strh	r1, [r7, #10]
 80016f2:	4618      	mov	r0, r3
 80016f4:	4b36      	ldr	r3, [pc, #216]	@ (80017d0 <send_DHCP_REQUEST+0x2e0>)
 80016f6:	7899      	ldrb	r1, [r3, #2]
 80016f8:	1813      	adds	r3, r2, r0
 80016fa:	460a      	mov	r2, r1
 80016fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001700:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	897b      	ldrh	r3, [r7, #10]
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	8179      	strh	r1, [r7, #10]
 800170a:	4618      	mov	r0, r3
 800170c:	4b30      	ldr	r3, [pc, #192]	@ (80017d0 <send_DHCP_REQUEST+0x2e0>)
 800170e:	78d9      	ldrb	r1, [r3, #3]
 8001710:	1813      	adds	r3, r2, r0
 8001712:	460a      	mov	r2, r1
 8001714:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001718:	4b2b      	ldr	r3, [pc, #172]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	897b      	ldrh	r3, [r7, #10]
 800171e:	1c59      	adds	r1, r3, #1
 8001720:	8179      	strh	r1, [r7, #10]
 8001722:	4413      	add	r3, r2
 8001724:	2236      	movs	r2, #54	@ 0x36
 8001726:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800172a:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	897b      	ldrh	r3, [r7, #10]
 8001730:	1c59      	adds	r1, r3, #1
 8001732:	8179      	strh	r1, [r7, #10]
 8001734:	4413      	add	r3, r2
 8001736:	2204      	movs	r2, #4
 8001738:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800173c:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	897b      	ldrh	r3, [r7, #10]
 8001742:	1c59      	adds	r1, r3, #1
 8001744:	8179      	strh	r1, [r7, #10]
 8001746:	4618      	mov	r0, r3
 8001748:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <send_DHCP_REQUEST+0x2e4>)
 800174a:	7819      	ldrb	r1, [r3, #0]
 800174c:	1813      	adds	r3, r2, r0
 800174e:	460a      	mov	r2, r1
 8001750:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001754:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	897b      	ldrh	r3, [r7, #10]
 800175a:	1c59      	adds	r1, r3, #1
 800175c:	8179      	strh	r1, [r7, #10]
 800175e:	4618      	mov	r0, r3
 8001760:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <send_DHCP_REQUEST+0x2e4>)
 8001762:	7859      	ldrb	r1, [r3, #1]
 8001764:	1813      	adds	r3, r2, r0
 8001766:	460a      	mov	r2, r1
 8001768:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800176c:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	897b      	ldrh	r3, [r7, #10]
 8001772:	1c59      	adds	r1, r3, #1
 8001774:	8179      	strh	r1, [r7, #10]
 8001776:	4618      	mov	r0, r3
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <send_DHCP_REQUEST+0x2e4>)
 800177a:	7899      	ldrb	r1, [r3, #2]
 800177c:	1813      	adds	r3, r2, r0
 800177e:	460a      	mov	r2, r1
 8001780:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001784:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	897b      	ldrh	r3, [r7, #10]
 800178a:	1c59      	adds	r1, r3, #1
 800178c:	8179      	strh	r1, [r7, #10]
 800178e:	4618      	mov	r0, r3
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <send_DHCP_REQUEST+0x2e4>)
 8001792:	78d9      	ldrb	r1, [r3, #3]
 8001794:	1813      	adds	r3, r2, r0
 8001796:	460a      	mov	r2, r1
 8001798:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800179c:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	897b      	ldrh	r3, [r7, #10]
 80017a2:	1c59      	adds	r1, r3, #1
 80017a4:	8179      	strh	r1, [r7, #10]
 80017a6:	4413      	add	r3, r2
 80017a8:	220c      	movs	r2, #12
 80017aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <send_DHCP_REQUEST+0x2d8>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	897b      	ldrh	r3, [r7, #10]
 80017b4:	1c59      	adds	r1, r3, #1
 80017b6:	8179      	strh	r1, [r7, #10]
 80017b8:	4413      	add	r3, r2
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e019      	b.n	80017fa <send_DHCP_REQUEST+0x30a>
 80017c6:	bf00      	nop
 80017c8:	20000a14 	.word	0x20000a14
 80017cc:	20000a18 	.word	0x20000a18
 80017d0:	200009f8 	.word	0x200009f8
 80017d4:	200009ec 	.word	0x200009ec
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80017d8:	4b86      	ldr	r3, [pc, #536]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	897b      	ldrh	r3, [r7, #10]
 80017de:	1c59      	adds	r1, r3, #1
 80017e0:	8179      	strh	r1, [r7, #10]
 80017e2:	4618      	mov	r0, r3
 80017e4:	4984      	ldr	r1, [pc, #528]	@ (80019f8 <send_DHCP_REQUEST+0x508>)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	440b      	add	r3, r1
 80017ea:	7819      	ldrb	r1, [r3, #0]
 80017ec:	1813      	adds	r3, r2, r0
 80017ee:	460a      	mov	r2, r1
 80017f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4a7f      	ldr	r2, [pc, #508]	@ (80019f8 <send_DHCP_REQUEST+0x508>)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1e8      	bne.n	80017d8 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001806:	4b7d      	ldr	r3, [pc, #500]	@ (80019fc <send_DHCP_REQUEST+0x50c>)
 8001808:	78db      	ldrb	r3, [r3, #3]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b79      	ldr	r3, [pc, #484]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001810:	681c      	ldr	r4, [r3, #0]
 8001812:	897b      	ldrh	r3, [r7, #10]
 8001814:	1c59      	adds	r1, r3, #1
 8001816:	8179      	strh	r1, [r7, #10]
 8001818:	461d      	mov	r5, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f000 ff52 	bl	80026c4 <NibbleToHex>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	1963      	adds	r3, r4, r5
 8001826:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800182a:	4b74      	ldr	r3, [pc, #464]	@ (80019fc <send_DHCP_REQUEST+0x50c>)
 800182c:	78da      	ldrb	r2, [r3, #3]
 800182e:	4b71      	ldr	r3, [pc, #452]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001830:	681c      	ldr	r4, [r3, #0]
 8001832:	897b      	ldrh	r3, [r7, #10]
 8001834:	1c59      	adds	r1, r3, #1
 8001836:	8179      	strh	r1, [r7, #10]
 8001838:	461d      	mov	r5, r3
 800183a:	4610      	mov	r0, r2
 800183c:	f000 ff42 	bl	80026c4 <NibbleToHex>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	1963      	adds	r3, r4, r5
 8001846:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800184a:	4b6c      	ldr	r3, [pc, #432]	@ (80019fc <send_DHCP_REQUEST+0x50c>)
 800184c:	791b      	ldrb	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b68      	ldr	r3, [pc, #416]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001854:	681c      	ldr	r4, [r3, #0]
 8001856:	897b      	ldrh	r3, [r7, #10]
 8001858:	1c59      	adds	r1, r3, #1
 800185a:	8179      	strh	r1, [r7, #10]
 800185c:	461d      	mov	r5, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f000 ff30 	bl	80026c4 <NibbleToHex>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	1963      	adds	r3, r4, r5
 800186a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800186e:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <send_DHCP_REQUEST+0x50c>)
 8001870:	791a      	ldrb	r2, [r3, #4]
 8001872:	4b60      	ldr	r3, [pc, #384]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001874:	681c      	ldr	r4, [r3, #0]
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	1c59      	adds	r1, r3, #1
 800187a:	8179      	strh	r1, [r7, #10]
 800187c:	461d      	mov	r5, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f000 ff20 	bl	80026c4 <NibbleToHex>
 8001884:	4603      	mov	r3, r0
 8001886:	461a      	mov	r2, r3
 8001888:	1963      	adds	r3, r4, r5
 800188a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800188e:	4b5b      	ldr	r3, [pc, #364]	@ (80019fc <send_DHCP_REQUEST+0x50c>)
 8001890:	795b      	ldrb	r3, [r3, #5]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b57      	ldr	r3, [pc, #348]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001898:	681c      	ldr	r4, [r3, #0]
 800189a:	897b      	ldrh	r3, [r7, #10]
 800189c:	1c59      	adds	r1, r3, #1
 800189e:	8179      	strh	r1, [r7, #10]
 80018a0:	461d      	mov	r5, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f000 ff0e 	bl	80026c4 <NibbleToHex>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	1963      	adds	r3, r4, r5
 80018ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80018b2:	4b52      	ldr	r3, [pc, #328]	@ (80019fc <send_DHCP_REQUEST+0x50c>)
 80018b4:	795a      	ldrb	r2, [r3, #5]
 80018b6:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 80018b8:	681c      	ldr	r4, [r3, #0]
 80018ba:	897b      	ldrh	r3, [r7, #10]
 80018bc:	1c59      	adds	r1, r3, #1
 80018be:	8179      	strh	r1, [r7, #10]
 80018c0:	461d      	mov	r5, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f000 fefe 	bl	80026c4 <NibbleToHex>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	1963      	adds	r3, r4, r5
 80018ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	b2d9      	uxtb	r1, r3
 80018d6:	4b47      	ldr	r3, [pc, #284]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	8978      	ldrh	r0, [r7, #10]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3307      	adds	r3, #7
 80018e0:	1ac3      	subs	r3, r0, r3
 80018e2:	3106      	adds	r1, #6
 80018e4:	b2c9      	uxtb	r1, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	460a      	mov	r2, r1
 80018ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80018ee:	4b41      	ldr	r3, [pc, #260]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	897b      	ldrh	r3, [r7, #10]
 80018f4:	1c59      	adds	r1, r3, #1
 80018f6:	8179      	strh	r1, [r7, #10]
 80018f8:	4413      	add	r3, r2
 80018fa:	2237      	movs	r2, #55	@ 0x37
 80018fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001900:	4b3c      	ldr	r3, [pc, #240]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	897b      	ldrh	r3, [r7, #10]
 8001906:	1c59      	adds	r1, r3, #1
 8001908:	8179      	strh	r1, [r7, #10]
 800190a:	4413      	add	r3, r2
 800190c:	2208      	movs	r2, #8
 800190e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001912:	4b38      	ldr	r3, [pc, #224]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	897b      	ldrh	r3, [r7, #10]
 8001918:	1c59      	adds	r1, r3, #1
 800191a:	8179      	strh	r1, [r7, #10]
 800191c:	4413      	add	r3, r2
 800191e:	2201      	movs	r2, #1
 8001920:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001924:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	897b      	ldrh	r3, [r7, #10]
 800192a:	1c59      	adds	r1, r3, #1
 800192c:	8179      	strh	r1, [r7, #10]
 800192e:	4413      	add	r3, r2
 8001930:	2203      	movs	r2, #3
 8001932:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001936:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	897b      	ldrh	r3, [r7, #10]
 800193c:	1c59      	adds	r1, r3, #1
 800193e:	8179      	strh	r1, [r7, #10]
 8001940:	4413      	add	r3, r2
 8001942:	2206      	movs	r2, #6
 8001944:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001948:	4b2a      	ldr	r3, [pc, #168]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	897b      	ldrh	r3, [r7, #10]
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	8179      	strh	r1, [r7, #10]
 8001952:	4413      	add	r3, r2
 8001954:	220f      	movs	r2, #15
 8001956:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800195a:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	897b      	ldrh	r3, [r7, #10]
 8001960:	1c59      	adds	r1, r3, #1
 8001962:	8179      	strh	r1, [r7, #10]
 8001964:	4413      	add	r3, r2
 8001966:	223a      	movs	r2, #58	@ 0x3a
 8001968:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800196c:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	897b      	ldrh	r3, [r7, #10]
 8001972:	1c59      	adds	r1, r3, #1
 8001974:	8179      	strh	r1, [r7, #10]
 8001976:	4413      	add	r3, r2
 8001978:	223b      	movs	r2, #59	@ 0x3b
 800197a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 800197e:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	1c59      	adds	r1, r3, #1
 8001986:	8179      	strh	r1, [r7, #10]
 8001988:	4413      	add	r3, r2
 800198a:	221f      	movs	r2, #31
 800198c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001990:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	897b      	ldrh	r3, [r7, #10]
 8001996:	1c59      	adds	r1, r3, #1
 8001998:	8179      	strh	r1, [r7, #10]
 800199a:	4413      	add	r3, r2
 800199c:	2221      	movs	r2, #33	@ 0x21
 800199e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	897b      	ldrh	r3, [r7, #10]
 80019a8:	1c59      	adds	r1, r3, #1
 80019aa:	8179      	strh	r1, [r7, #10]
 80019ac:	4413      	add	r3, r2
 80019ae:	22ff      	movs	r2, #255	@ 0xff
 80019b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80019b4:	897b      	ldrh	r3, [r7, #10]
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e009      	b.n	80019ce <send_DHCP_REQUEST+0x4de>
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	33ec      	adds	r3, #236	@ 0xec
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80019d4:	dbf1      	blt.n	80019ba <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <send_DHCP_REQUEST+0x510>)
 80019d8:	7818      	ldrb	r0, [r3, #0]
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <send_DHCP_REQUEST+0x504>)
 80019dc:	6819      	ldr	r1, [r3, #0]
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2243      	movs	r2, #67	@ 0x43
 80019e2:	9200      	str	r2, [sp, #0]
 80019e4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80019e8:	f001 fafc 	bl	8002fe4 <sendto>

}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	20000a14 	.word	0x20000a14
 80019f8:	20000024 	.word	0x20000024
 80019fc:	20000a18 	.word	0x20000a18
 8001a00:	200009e8 	.word	0x200009e8

08001a04 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001a0e:	f7ff fab3 	bl	8000f78 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001a12:	2304      	movs	r3, #4
 8001a14:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001a16:	4b9f      	ldr	r3, [pc, #636]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	330a      	adds	r3, #10
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001a20:	4b9c      	ldr	r3, [pc, #624]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	330a      	adds	r3, #10
 8001a26:	3301      	adds	r3, #1
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001a2c:	4b99      	ldr	r3, [pc, #612]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	1c59      	adds	r1, r3, #1
 8001a34:	8179      	strh	r1, [r7, #10]
 8001a36:	4413      	add	r3, r2
 8001a38:	2235      	movs	r2, #53	@ 0x35
 8001a3a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001a3e:	4b95      	ldr	r3, [pc, #596]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	897b      	ldrh	r3, [r7, #10]
 8001a44:	1c59      	adds	r1, r3, #1
 8001a46:	8179      	strh	r1, [r7, #10]
 8001a48:	4413      	add	r3, r2
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001a50:	4b90      	ldr	r3, [pc, #576]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	897b      	ldrh	r3, [r7, #10]
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	8179      	strh	r1, [r7, #10]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001a62:	4b8c      	ldr	r3, [pc, #560]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	897b      	ldrh	r3, [r7, #10]
 8001a68:	1c59      	adds	r1, r3, #1
 8001a6a:	8179      	strh	r1, [r7, #10]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	223d      	movs	r2, #61	@ 0x3d
 8001a70:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001a74:	4b87      	ldr	r3, [pc, #540]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	897b      	ldrh	r3, [r7, #10]
 8001a7a:	1c59      	adds	r1, r3, #1
 8001a7c:	8179      	strh	r1, [r7, #10]
 8001a7e:	4413      	add	r3, r2
 8001a80:	2207      	movs	r2, #7
 8001a82:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001a86:	4b83      	ldr	r3, [pc, #524]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	897b      	ldrh	r3, [r7, #10]
 8001a8c:	1c59      	adds	r1, r3, #1
 8001a8e:	8179      	strh	r1, [r7, #10]
 8001a90:	4413      	add	r3, r2
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001a98:	4b7e      	ldr	r3, [pc, #504]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	897b      	ldrh	r3, [r7, #10]
 8001a9e:	1c59      	adds	r1, r3, #1
 8001aa0:	8179      	strh	r1, [r7, #10]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4b7c      	ldr	r3, [pc, #496]	@ (8001c98 <send_DHCP_DECLINE+0x294>)
 8001aa6:	7819      	ldrb	r1, [r3, #0]
 8001aa8:	1813      	adds	r3, r2, r0
 8001aaa:	460a      	mov	r2, r1
 8001aac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001ab0:	4b78      	ldr	r3, [pc, #480]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	897b      	ldrh	r3, [r7, #10]
 8001ab6:	1c59      	adds	r1, r3, #1
 8001ab8:	8179      	strh	r1, [r7, #10]
 8001aba:	4618      	mov	r0, r3
 8001abc:	4b76      	ldr	r3, [pc, #472]	@ (8001c98 <send_DHCP_DECLINE+0x294>)
 8001abe:	7859      	ldrb	r1, [r3, #1]
 8001ac0:	1813      	adds	r3, r2, r0
 8001ac2:	460a      	mov	r2, r1
 8001ac4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001ac8:	4b72      	ldr	r3, [pc, #456]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	897b      	ldrh	r3, [r7, #10]
 8001ace:	1c59      	adds	r1, r3, #1
 8001ad0:	8179      	strh	r1, [r7, #10]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4b70      	ldr	r3, [pc, #448]	@ (8001c98 <send_DHCP_DECLINE+0x294>)
 8001ad6:	7899      	ldrb	r1, [r3, #2]
 8001ad8:	1813      	adds	r3, r2, r0
 8001ada:	460a      	mov	r2, r1
 8001adc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	897b      	ldrh	r3, [r7, #10]
 8001ae6:	1c59      	adds	r1, r3, #1
 8001ae8:	8179      	strh	r1, [r7, #10]
 8001aea:	4618      	mov	r0, r3
 8001aec:	4b6a      	ldr	r3, [pc, #424]	@ (8001c98 <send_DHCP_DECLINE+0x294>)
 8001aee:	78d9      	ldrb	r1, [r3, #3]
 8001af0:	1813      	adds	r3, r2, r0
 8001af2:	460a      	mov	r2, r1
 8001af4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001af8:	4b66      	ldr	r3, [pc, #408]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	897b      	ldrh	r3, [r7, #10]
 8001afe:	1c59      	adds	r1, r3, #1
 8001b00:	8179      	strh	r1, [r7, #10]
 8001b02:	4618      	mov	r0, r3
 8001b04:	4b64      	ldr	r3, [pc, #400]	@ (8001c98 <send_DHCP_DECLINE+0x294>)
 8001b06:	7919      	ldrb	r1, [r3, #4]
 8001b08:	1813      	adds	r3, r2, r0
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001b10:	4b60      	ldr	r3, [pc, #384]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	1c59      	adds	r1, r3, #1
 8001b18:	8179      	strh	r1, [r7, #10]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c98 <send_DHCP_DECLINE+0x294>)
 8001b1e:	7959      	ldrb	r1, [r3, #5]
 8001b20:	1813      	adds	r3, r2, r0
 8001b22:	460a      	mov	r2, r1
 8001b24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001b28:	4b5a      	ldr	r3, [pc, #360]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	897b      	ldrh	r3, [r7, #10]
 8001b2e:	1c59      	adds	r1, r3, #1
 8001b30:	8179      	strh	r1, [r7, #10]
 8001b32:	4413      	add	r3, r2
 8001b34:	2232      	movs	r2, #50	@ 0x32
 8001b36:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001b3a:	4b56      	ldr	r3, [pc, #344]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	897b      	ldrh	r3, [r7, #10]
 8001b40:	1c59      	adds	r1, r3, #1
 8001b42:	8179      	strh	r1, [r7, #10]
 8001b44:	4413      	add	r3, r2
 8001b46:	2204      	movs	r2, #4
 8001b48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001b4c:	4b51      	ldr	r3, [pc, #324]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	897b      	ldrh	r3, [r7, #10]
 8001b52:	1c59      	adds	r1, r3, #1
 8001b54:	8179      	strh	r1, [r7, #10]
 8001b56:	4618      	mov	r0, r3
 8001b58:	4b50      	ldr	r3, [pc, #320]	@ (8001c9c <send_DHCP_DECLINE+0x298>)
 8001b5a:	7819      	ldrb	r1, [r3, #0]
 8001b5c:	1813      	adds	r3, r2, r0
 8001b5e:	460a      	mov	r2, r1
 8001b60:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001b64:	4b4b      	ldr	r3, [pc, #300]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	1c59      	adds	r1, r3, #1
 8001b6c:	8179      	strh	r1, [r7, #10]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4b4a      	ldr	r3, [pc, #296]	@ (8001c9c <send_DHCP_DECLINE+0x298>)
 8001b72:	7859      	ldrb	r1, [r3, #1]
 8001b74:	1813      	adds	r3, r2, r0
 8001b76:	460a      	mov	r2, r1
 8001b78:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001b7c:	4b45      	ldr	r3, [pc, #276]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	897b      	ldrh	r3, [r7, #10]
 8001b82:	1c59      	adds	r1, r3, #1
 8001b84:	8179      	strh	r1, [r7, #10]
 8001b86:	4618      	mov	r0, r3
 8001b88:	4b44      	ldr	r3, [pc, #272]	@ (8001c9c <send_DHCP_DECLINE+0x298>)
 8001b8a:	7899      	ldrb	r1, [r3, #2]
 8001b8c:	1813      	adds	r3, r2, r0
 8001b8e:	460a      	mov	r2, r1
 8001b90:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001b94:	4b3f      	ldr	r3, [pc, #252]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	897b      	ldrh	r3, [r7, #10]
 8001b9a:	1c59      	adds	r1, r3, #1
 8001b9c:	8179      	strh	r1, [r7, #10]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8001c9c <send_DHCP_DECLINE+0x298>)
 8001ba2:	78d9      	ldrb	r1, [r3, #3]
 8001ba4:	1813      	adds	r3, r2, r0
 8001ba6:	460a      	mov	r2, r1
 8001ba8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001bac:	4b39      	ldr	r3, [pc, #228]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	1c59      	adds	r1, r3, #1
 8001bb4:	8179      	strh	r1, [r7, #10]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2236      	movs	r2, #54	@ 0x36
 8001bba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001bbe:	4b35      	ldr	r3, [pc, #212]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	1c59      	adds	r1, r3, #1
 8001bc6:	8179      	strh	r1, [r7, #10]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2204      	movs	r2, #4
 8001bcc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001bd0:	4b30      	ldr	r3, [pc, #192]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	897b      	ldrh	r3, [r7, #10]
 8001bd6:	1c59      	adds	r1, r3, #1
 8001bd8:	8179      	strh	r1, [r7, #10]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4b30      	ldr	r3, [pc, #192]	@ (8001ca0 <send_DHCP_DECLINE+0x29c>)
 8001bde:	7819      	ldrb	r1, [r3, #0]
 8001be0:	1813      	adds	r3, r2, r0
 8001be2:	460a      	mov	r2, r1
 8001be4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001be8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	897b      	ldrh	r3, [r7, #10]
 8001bee:	1c59      	adds	r1, r3, #1
 8001bf0:	8179      	strh	r1, [r7, #10]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca0 <send_DHCP_DECLINE+0x29c>)
 8001bf6:	7859      	ldrb	r1, [r3, #1]
 8001bf8:	1813      	adds	r3, r2, r0
 8001bfa:	460a      	mov	r2, r1
 8001bfc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	1c59      	adds	r1, r3, #1
 8001c08:	8179      	strh	r1, [r7, #10]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <send_DHCP_DECLINE+0x29c>)
 8001c0e:	7899      	ldrb	r1, [r3, #2]
 8001c10:	1813      	adds	r3, r2, r0
 8001c12:	460a      	mov	r2, r1
 8001c14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	1c59      	adds	r1, r3, #1
 8001c20:	8179      	strh	r1, [r7, #10]
 8001c22:	4618      	mov	r0, r3
 8001c24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <send_DHCP_DECLINE+0x29c>)
 8001c26:	78d9      	ldrb	r1, [r3, #3]
 8001c28:	1813      	adds	r3, r2, r0
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001c30:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	8179      	strh	r1, [r7, #10]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	22ff      	movs	r2, #255	@ 0xff
 8001c3e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	e009      	b.n	8001c5c <send_DHCP_DECLINE+0x258>
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	33ec      	adds	r3, #236	@ 0xec
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001c62:	dbf1      	blt.n	8001c48 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001c64:	23ff      	movs	r3, #255	@ 0xff
 8001c66:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001c68:	23ff      	movs	r3, #255	@ 0xff
 8001c6a:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001c6c:	23ff      	movs	r3, #255	@ 0xff
 8001c6e:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001c70:	23ff      	movs	r3, #255	@ 0xff
 8001c72:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <send_DHCP_DECLINE+0x2a0>)
 8001c76:	7818      	ldrb	r0, [r3, #0]
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <send_DHCP_DECLINE+0x290>)
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2243      	movs	r2, #67	@ 0x43
 8001c80:	9200      	str	r2, [sp, #0]
 8001c82:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001c86:	f001 f9ad 	bl	8002fe4 <sendto>
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000a14 	.word	0x20000a14
 8001c98:	20000a18 	.word	0x20000a18
 8001c9c:	200009f8 	.word	0x200009f8
 8001ca0:	200009ec 	.word	0x200009ec
 8001ca4:	200009e8 	.word	0x200009e8

08001ca8 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001cb2:	4ba1      	ldr	r3, [pc, #644]	@ (8001f38 <parseDHCPMSG+0x290>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fecf 	bl	8002a5a <getSn_RX_RSR>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	823b      	strh	r3, [r7, #16]
 8001cc0:	8a3b      	ldrh	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d011      	beq.n	8001cea <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001cc6:	4b9c      	ldr	r3, [pc, #624]	@ (8001f38 <parseDHCPMSG+0x290>)
 8001cc8:	7818      	ldrb	r0, [r3, #0]
 8001cca:	4b9c      	ldr	r3, [pc, #624]	@ (8001f3c <parseDHCPMSG+0x294>)
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	1d3c      	adds	r4, r7, #4
 8001cd0:	8a3a      	ldrh	r2, [r7, #16]
 8001cd2:	1cbb      	adds	r3, r7, #2
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	f001 fab8 	bl	800324c <recvfrom>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	2b43      	cmp	r3, #67	@ 0x43
 8001ce4:	f040 81ed 	bne.w	80020c2 <parseDHCPMSG+0x41a>
 8001ce8:	e001      	b.n	8001cee <parseDHCPMSG+0x46>
   else return 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e1eb      	b.n	80020c6 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001cee:	4b93      	ldr	r3, [pc, #588]	@ (8001f3c <parseDHCPMSG+0x294>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	7f1a      	ldrb	r2, [r3, #28]
 8001cf4:	4b92      	ldr	r3, [pc, #584]	@ (8001f40 <parseDHCPMSG+0x298>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d124      	bne.n	8001d46 <parseDHCPMSG+0x9e>
 8001cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8001f3c <parseDHCPMSG+0x294>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	7f5a      	ldrb	r2, [r3, #29]
 8001d02:	4b8f      	ldr	r3, [pc, #572]	@ (8001f40 <parseDHCPMSG+0x298>)
 8001d04:	785b      	ldrb	r3, [r3, #1]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d11d      	bne.n	8001d46 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d0a:	4b8c      	ldr	r3, [pc, #560]	@ (8001f3c <parseDHCPMSG+0x294>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	7f9a      	ldrb	r2, [r3, #30]
 8001d10:	4b8b      	ldr	r3, [pc, #556]	@ (8001f40 <parseDHCPMSG+0x298>)
 8001d12:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d116      	bne.n	8001d46 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d18:	4b88      	ldr	r3, [pc, #544]	@ (8001f3c <parseDHCPMSG+0x294>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	7fda      	ldrb	r2, [r3, #31]
 8001d1e:	4b88      	ldr	r3, [pc, #544]	@ (8001f40 <parseDHCPMSG+0x298>)
 8001d20:	78db      	ldrb	r3, [r3, #3]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d10f      	bne.n	8001d46 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001d26:	4b85      	ldr	r3, [pc, #532]	@ (8001f3c <parseDHCPMSG+0x294>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d2e:	4b84      	ldr	r3, [pc, #528]	@ (8001f40 <parseDHCPMSG+0x298>)
 8001d30:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d107      	bne.n	8001d46 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001d36:	4b81      	ldr	r3, [pc, #516]	@ (8001f3c <parseDHCPMSG+0x294>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001d3e:	4b80      	ldr	r3, [pc, #512]	@ (8001f40 <parseDHCPMSG+0x298>)
 8001d40:	795b      	ldrb	r3, [r3, #5]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e1bd      	b.n	80020c6 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8001d4a:	4b7e      	ldr	r3, [pc, #504]	@ (8001f44 <parseDHCPMSG+0x29c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <parseDHCPMSG+0xc2>
 8001d52:	4b7c      	ldr	r3, [pc, #496]	@ (8001f44 <parseDHCPMSG+0x29c>)
 8001d54:	785b      	ldrb	r3, [r3, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <parseDHCPMSG+0xc2>
 8001d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f44 <parseDHCPMSG+0x29c>)
 8001d5c:	789b      	ldrb	r3, [r3, #2]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <parseDHCPMSG+0xc2>
 8001d62:	4b78      	ldr	r3, [pc, #480]	@ (8001f44 <parseDHCPMSG+0x29c>)
 8001d64:	78db      	ldrb	r3, [r3, #3]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d029      	beq.n	8001dbe <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001d6a:	793a      	ldrb	r2, [r7, #4]
 8001d6c:	4b75      	ldr	r3, [pc, #468]	@ (8001f44 <parseDHCPMSG+0x29c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d10e      	bne.n	8001d92 <parseDHCPMSG+0xea>
 8001d74:	797a      	ldrb	r2, [r7, #5]
 8001d76:	4b73      	ldr	r3, [pc, #460]	@ (8001f44 <parseDHCPMSG+0x29c>)
 8001d78:	785b      	ldrb	r3, [r3, #1]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d109      	bne.n	8001d92 <parseDHCPMSG+0xea>
 8001d7e:	79ba      	ldrb	r2, [r7, #6]
 8001d80:	4b70      	ldr	r3, [pc, #448]	@ (8001f44 <parseDHCPMSG+0x29c>)
 8001d82:	789b      	ldrb	r3, [r3, #2]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d104      	bne.n	8001d92 <parseDHCPMSG+0xea>
 8001d88:	79fa      	ldrb	r2, [r7, #7]
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f44 <parseDHCPMSG+0x29c>)
 8001d8c:	78db      	ldrb	r3, [r3, #3]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d015      	beq.n	8001dbe <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001d92:	793a      	ldrb	r2, [r7, #4]
 8001d94:	4b6c      	ldr	r3, [pc, #432]	@ (8001f48 <parseDHCPMSG+0x2a0>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d10e      	bne.n	8001dba <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001d9c:	797a      	ldrb	r2, [r7, #5]
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f48 <parseDHCPMSG+0x2a0>)
 8001da0:	785b      	ldrb	r3, [r3, #1]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d109      	bne.n	8001dba <parseDHCPMSG+0x112>
 8001da6:	79ba      	ldrb	r2, [r7, #6]
 8001da8:	4b67      	ldr	r3, [pc, #412]	@ (8001f48 <parseDHCPMSG+0x2a0>)
 8001daa:	789b      	ldrb	r3, [r3, #2]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d104      	bne.n	8001dba <parseDHCPMSG+0x112>
 8001db0:	79fa      	ldrb	r2, [r7, #7]
 8001db2:	4b65      	ldr	r3, [pc, #404]	@ (8001f48 <parseDHCPMSG+0x2a0>)
 8001db4:	78db      	ldrb	r3, [r3, #3]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e183      	b.n	80020c6 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001f3c <parseDHCPMSG+0x294>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	33f0      	adds	r3, #240	@ 0xf0
 8001dc8:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001dca:	8a3b      	ldrh	r3, [r7, #16]
 8001dcc:	3bf0      	subs	r3, #240	@ 0xf0
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001dd4:	e170      	b.n	80020b8 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b36      	cmp	r3, #54	@ 0x36
 8001ddc:	dc76      	bgt.n	8001ecc <parseDHCPMSG+0x224>
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f2c0 815d 	blt.w	800209e <parseDHCPMSG+0x3f6>
 8001de4:	2b36      	cmp	r3, #54	@ 0x36
 8001de6:	f200 815a 	bhi.w	800209e <parseDHCPMSG+0x3f6>
 8001dea:	a201      	add	r2, pc, #4	@ (adr r2, 8001df0 <parseDHCPMSG+0x148>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001ed9 	.word	0x08001ed9
 8001df4:	08001ef9 	.word	0x08001ef9
 8001df8:	0800209f 	.word	0x0800209f
 8001dfc:	08001f51 	.word	0x08001f51
 8001e00:	0800209f 	.word	0x0800209f
 8001e04:	0800209f 	.word	0x0800209f
 8001e08:	08001f9d 	.word	0x08001f9d
 8001e0c:	0800209f 	.word	0x0800209f
 8001e10:	0800209f 	.word	0x0800209f
 8001e14:	0800209f 	.word	0x0800209f
 8001e18:	0800209f 	.word	0x0800209f
 8001e1c:	0800209f 	.word	0x0800209f
 8001e20:	0800209f 	.word	0x0800209f
 8001e24:	0800209f 	.word	0x0800209f
 8001e28:	0800209f 	.word	0x0800209f
 8001e2c:	0800209f 	.word	0x0800209f
 8001e30:	0800209f 	.word	0x0800209f
 8001e34:	0800209f 	.word	0x0800209f
 8001e38:	0800209f 	.word	0x0800209f
 8001e3c:	0800209f 	.word	0x0800209f
 8001e40:	0800209f 	.word	0x0800209f
 8001e44:	0800209f 	.word	0x0800209f
 8001e48:	0800209f 	.word	0x0800209f
 8001e4c:	0800209f 	.word	0x0800209f
 8001e50:	0800209f 	.word	0x0800209f
 8001e54:	0800209f 	.word	0x0800209f
 8001e58:	0800209f 	.word	0x0800209f
 8001e5c:	0800209f 	.word	0x0800209f
 8001e60:	0800209f 	.word	0x0800209f
 8001e64:	0800209f 	.word	0x0800209f
 8001e68:	0800209f 	.word	0x0800209f
 8001e6c:	0800209f 	.word	0x0800209f
 8001e70:	0800209f 	.word	0x0800209f
 8001e74:	0800209f 	.word	0x0800209f
 8001e78:	0800209f 	.word	0x0800209f
 8001e7c:	0800209f 	.word	0x0800209f
 8001e80:	0800209f 	.word	0x0800209f
 8001e84:	0800209f 	.word	0x0800209f
 8001e88:	0800209f 	.word	0x0800209f
 8001e8c:	0800209f 	.word	0x0800209f
 8001e90:	0800209f 	.word	0x0800209f
 8001e94:	0800209f 	.word	0x0800209f
 8001e98:	0800209f 	.word	0x0800209f
 8001e9c:	0800209f 	.word	0x0800209f
 8001ea0:	0800209f 	.word	0x0800209f
 8001ea4:	0800209f 	.word	0x0800209f
 8001ea8:	0800209f 	.word	0x0800209f
 8001eac:	0800209f 	.word	0x0800209f
 8001eb0:	0800209f 	.word	0x0800209f
 8001eb4:	0800209f 	.word	0x0800209f
 8001eb8:	0800209f 	.word	0x0800209f
 8001ebc:	08001fe9 	.word	0x08001fe9
 8001ec0:	0800209f 	.word	0x0800209f
 8001ec4:	08001ee1 	.word	0x08001ee1
 8001ec8:	08002045 	.word	0x08002045
 8001ecc:	2bff      	cmp	r3, #255	@ 0xff
 8001ece:	f040 80e6 	bne.w	800209e <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	617b      	str	r3, [r7, #20]
   				break;
 8001ed6:	e0ef      	b.n	80020b8 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
   				break;
 8001ede:	e0eb      	b.n	80020b8 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
   				p++;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	617a      	str	r2, [r7, #20]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	74fb      	strb	r3, [r7, #19]
   				break;
 8001ef6:	e0df      	b.n	80020b8 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
   				p++;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	617a      	str	r2, [r7, #20]
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <parseDHCPMSG+0x2a4>)
 8001f0e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	617a      	str	r2, [r7, #20]
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <parseDHCPMSG+0x2a4>)
 8001f1a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	617a      	str	r2, [r7, #20]
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <parseDHCPMSG+0x2a4>)
 8001f26:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	617a      	str	r2, [r7, #20]
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <parseDHCPMSG+0x2a4>)
 8001f32:	70da      	strb	r2, [r3, #3]
   				break;
 8001f34:	e0c0      	b.n	80020b8 <parseDHCPMSG+0x410>
 8001f36:	bf00      	nop
 8001f38:	200009e8 	.word	0x200009e8
 8001f3c:	20000a14 	.word	0x20000a14
 8001f40:	20000a18 	.word	0x20000a18
 8001f44:	200009ec 	.word	0x200009ec
 8001f48:	200009f0 	.word	0x200009f0
 8001f4c:	20000a00 	.word	0x20000a00
   			case routersOnSubnet :
   				p++;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	617a      	str	r2, [r7, #20]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	617a      	str	r2, [r7, #20]
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	4b59      	ldr	r3, [pc, #356]	@ (80020d0 <parseDHCPMSG+0x428>)
 8001f6a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	617a      	str	r2, [r7, #20]
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	4b56      	ldr	r3, [pc, #344]	@ (80020d0 <parseDHCPMSG+0x428>)
 8001f76:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	617a      	str	r2, [r7, #20]
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	4b53      	ldr	r3, [pc, #332]	@ (80020d0 <parseDHCPMSG+0x428>)
 8001f82:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	617a      	str	r2, [r7, #20]
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	4b50      	ldr	r3, [pc, #320]	@ (80020d0 <parseDHCPMSG+0x428>)
 8001f8e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001f90:	7afb      	ldrb	r3, [r7, #11]
 8001f92:	3b04      	subs	r3, #4
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
   				break;
 8001f9a:	e08d      	b.n	80020b8 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	617a      	str	r2, [r7, #20]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	617a      	str	r2, [r7, #20]
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	4b47      	ldr	r3, [pc, #284]	@ (80020d4 <parseDHCPMSG+0x42c>)
 8001fb6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	617a      	str	r2, [r7, #20]
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	4b44      	ldr	r3, [pc, #272]	@ (80020d4 <parseDHCPMSG+0x42c>)
 8001fc2:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	617a      	str	r2, [r7, #20]
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	4b41      	ldr	r3, [pc, #260]	@ (80020d4 <parseDHCPMSG+0x42c>)
 8001fce:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	617a      	str	r2, [r7, #20]
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <parseDHCPMSG+0x42c>)
 8001fda:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
   				break;
 8001fe6:	e067      	b.n	80020b8 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	617a      	str	r2, [r7, #20]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	617a      	str	r2, [r7, #20]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <parseDHCPMSG+0x430>)
 8002004:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002006:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <parseDHCPMSG+0x430>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	021a      	lsls	r2, r3, #8
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	1c59      	adds	r1, r3, #1
 8002010:	6179      	str	r1, [r7, #20]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4413      	add	r3, r2
 8002016:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <parseDHCPMSG+0x430>)
 8002018:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <parseDHCPMSG+0x430>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	021a      	lsls	r2, r3, #8
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	6179      	str	r1, [r7, #20]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4413      	add	r3, r2
 800202a:	4a2b      	ldr	r2, [pc, #172]	@ (80020d8 <parseDHCPMSG+0x430>)
 800202c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800202e:	4b2a      	ldr	r3, [pc, #168]	@ (80020d8 <parseDHCPMSG+0x430>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	021a      	lsls	r2, r3, #8
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1c59      	adds	r1, r3, #1
 8002038:	6179      	str	r1, [r7, #20]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4413      	add	r3, r2
 800203e:	4a26      	ldr	r2, [pc, #152]	@ (80020d8 <parseDHCPMSG+0x430>)
 8002040:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8002042:	e039      	b.n	80020b8 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	617a      	str	r2, [r7, #20]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	617a      	str	r2, [r7, #20]
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <parseDHCPMSG+0x434>)
 800205e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	617a      	str	r2, [r7, #20]
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <parseDHCPMSG+0x434>)
 800206a:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	617a      	str	r2, [r7, #20]
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <parseDHCPMSG+0x434>)
 8002076:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	617a      	str	r2, [r7, #20]
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <parseDHCPMSG+0x434>)
 8002082:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002084:	793a      	ldrb	r2, [r7, #4]
 8002086:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <parseDHCPMSG+0x438>)
 8002088:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800208a:	797a      	ldrb	r2, [r7, #5]
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <parseDHCPMSG+0x438>)
 800208e:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8002090:	79ba      	ldrb	r2, [r7, #6]
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <parseDHCPMSG+0x438>)
 8002094:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <parseDHCPMSG+0x438>)
 800209a:	70da      	strb	r2, [r3, #3]
   				break;
 800209c:	e00c      	b.n	80020b8 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	617a      	str	r2, [r7, #20]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 80020ae:	7afb      	ldrb	r3, [r7, #11]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4413      	add	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
   				break;
 80020b6:	bf00      	nop
		while ( p < e ) {
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f4ff ae8a 	bcc.w	8001dd6 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80020c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200009fc 	.word	0x200009fc
 80020d4:	20000a04 	.word	0x20000a04
 80020d8:	2000001c 	.word	0x2000001c
 80020dc:	200009ec 	.word	0x200009ec
 80020e0:	200009f0 	.word	0x200009f0

080020e4 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80020ea:	4b7f      	ldr	r3, [pc, #508]	@ (80022e8 <DHCP_run+0x204>)
 80020ec:	f993 3000 	ldrsb.w	r3, [r3]
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d101      	bne.n	80020f8 <DHCP_run+0x14>
 80020f4:	2305      	movs	r3, #5
 80020f6:	e0f3      	b.n	80022e0 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80020f8:	4b7c      	ldr	r3, [pc, #496]	@ (80022ec <DHCP_run+0x208>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3301      	adds	r3, #1
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fb04 	bl	8002714 <WIZCHIP_READ>
 800210c:	4603      	mov	r3, r0
 800210e:	2b22      	cmp	r3, #34	@ 0x22
 8002110:	d006      	beq.n	8002120 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8002112:	4b76      	ldr	r3, [pc, #472]	@ (80022ec <DHCP_run+0x208>)
 8002114:	7818      	ldrb	r0, [r3, #0]
 8002116:	2300      	movs	r3, #0
 8002118:	2244      	movs	r2, #68	@ 0x44
 800211a:	2102      	movs	r1, #2
 800211c:	f000 fde0 	bl	8002ce0 <socket>

	ret = DHCP_RUNNING;
 8002120:	2301      	movs	r3, #1
 8002122:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002124:	f7ff fdc0 	bl	8001ca8 <parseDHCPMSG>
 8002128:	4603      	mov	r3, r0
 800212a:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 800212c:	4b6e      	ldr	r3, [pc, #440]	@ (80022e8 <DHCP_run+0x204>)
 800212e:	f993 3000 	ldrsb.w	r3, [r3]
 8002132:	2b04      	cmp	r3, #4
 8002134:	f200 80d0 	bhi.w	80022d8 <DHCP_run+0x1f4>
 8002138:	a201      	add	r2, pc, #4	@ (adr r2, 8002140 <DHCP_run+0x5c>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002155 	.word	0x08002155
 8002144:	08002179 	.word	0x08002179
 8002148:	080021bd 	.word	0x080021bd
 800214c:	0800220d 	.word	0x0800220d
 8002150:	08002267 	.word	0x08002267
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8002154:	4b66      	ldr	r3, [pc, #408]	@ (80022f0 <DHCP_run+0x20c>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800215a:	4b65      	ldr	r3, [pc, #404]	@ (80022f0 <DHCP_run+0x20c>)
 800215c:	2200      	movs	r2, #0
 800215e:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8002160:	4b63      	ldr	r3, [pc, #396]	@ (80022f0 <DHCP_run+0x20c>)
 8002162:	2200      	movs	r2, #0
 8002164:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8002166:	4b62      	ldr	r3, [pc, #392]	@ (80022f0 <DHCP_run+0x20c>)
 8002168:	2200      	movs	r2, #0
 800216a:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 800216c:	f7fe fffa 	bl	8001164 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8002170:	4b5d      	ldr	r3, [pc, #372]	@ (80022e8 <DHCP_run+0x204>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
   		break;
 8002176:	e0b2      	b.n	80022de <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002178:	79bb      	ldrb	r3, [r7, #6]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d119      	bne.n	80021b2 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800217e:	4b5d      	ldr	r3, [pc, #372]	@ (80022f4 <DHCP_run+0x210>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	7c1a      	ldrb	r2, [r3, #16]
 8002184:	4b5a      	ldr	r3, [pc, #360]	@ (80022f0 <DHCP_run+0x20c>)
 8002186:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002188:	4b5a      	ldr	r3, [pc, #360]	@ (80022f4 <DHCP_run+0x210>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	7c5a      	ldrb	r2, [r3, #17]
 800218e:	4b58      	ldr	r3, [pc, #352]	@ (80022f0 <DHCP_run+0x20c>)
 8002190:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002192:	4b58      	ldr	r3, [pc, #352]	@ (80022f4 <DHCP_run+0x210>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	7c9a      	ldrb	r2, [r3, #18]
 8002198:	4b55      	ldr	r3, [pc, #340]	@ (80022f0 <DHCP_run+0x20c>)
 800219a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800219c:	4b55      	ldr	r3, [pc, #340]	@ (80022f4 <DHCP_run+0x210>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	7cda      	ldrb	r2, [r3, #19]
 80021a2:	4b53      	ldr	r3, [pc, #332]	@ (80022f0 <DHCP_run+0x20c>)
 80021a4:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80021a6:	f7ff f9a3 	bl	80014f0 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80021aa:	4b4f      	ldr	r3, [pc, #316]	@ (80022e8 <DHCP_run+0x204>)
 80021ac:	2202      	movs	r2, #2
 80021ae:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80021b0:	e095      	b.n	80022de <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80021b2:	f000 f8b1 	bl	8002318 <check_DHCP_timeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
         break;
 80021ba:	e090      	b.n	80022de <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80021bc:	79bb      	ldrb	r3, [r7, #6]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d116      	bne.n	80021f0 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80021c2:	f000 f909 	bl	80023d8 <check_DHCP_leasedIP>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80021cc:	4b4a      	ldr	r3, [pc, #296]	@ (80022f8 <DHCP_run+0x214>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4798      	blx	r3
					reset_DHCP_timeout();
 80021d2:	f000 f9d3 	bl	800257c <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80021d6:	4b44      	ldr	r3, [pc, #272]	@ (80022e8 <DHCP_run+0x204>)
 80021d8:	2203      	movs	r2, #3
 80021da:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80021dc:	e07f      	b.n	80022de <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80021de:	f000 f9cd 	bl	800257c <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80021e2:	4b46      	ldr	r3, [pc, #280]	@ (80022fc <DHCP_run+0x218>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80021e8:	4b3f      	ldr	r3, [pc, #252]	@ (80022e8 <DHCP_run+0x204>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
		break;
 80021ee:	e076      	b.n	80022de <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80021f0:	79bb      	ldrb	r3, [r7, #6]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d105      	bne.n	8002202 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80021f6:	f000 f9c1 	bl	800257c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80021fa:	4b3b      	ldr	r3, [pc, #236]	@ (80022e8 <DHCP_run+0x204>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
		break;
 8002200:	e06d      	b.n	80022de <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002202:	f000 f889 	bl	8002318 <check_DHCP_timeout>
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
		break;
 800220a:	e068      	b.n	80022de <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800220c:	2304      	movs	r3, #4
 800220e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8002210:	4b3b      	ldr	r3, [pc, #236]	@ (8002300 <DHCP_run+0x21c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d060      	beq.n	80022dc <DHCP_run+0x1f8>
 800221a:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <DHCP_run+0x21c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	085a      	lsrs	r2, r3, #1
 8002220:	4b38      	ldr	r3, [pc, #224]	@ (8002304 <DHCP_run+0x220>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d259      	bcs.n	80022dc <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800222c:	4b30      	ldr	r3, [pc, #192]	@ (80022f0 <DHCP_run+0x20c>)
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	4b35      	ldr	r3, [pc, #212]	@ (8002308 <DHCP_run+0x224>)
 8002232:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002234:	4b2e      	ldr	r3, [pc, #184]	@ (80022f0 <DHCP_run+0x20c>)
 8002236:	785a      	ldrb	r2, [r3, #1]
 8002238:	4b33      	ldr	r3, [pc, #204]	@ (8002308 <DHCP_run+0x224>)
 800223a:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800223c:	4b2c      	ldr	r3, [pc, #176]	@ (80022f0 <DHCP_run+0x20c>)
 800223e:	789a      	ldrb	r2, [r3, #2]
 8002240:	4b31      	ldr	r3, [pc, #196]	@ (8002308 <DHCP_run+0x224>)
 8002242:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8002244:	4b2a      	ldr	r3, [pc, #168]	@ (80022f0 <DHCP_run+0x20c>)
 8002246:	78da      	ldrb	r2, [r3, #3]
 8002248:	4b2f      	ldr	r3, [pc, #188]	@ (8002308 <DHCP_run+0x224>)
 800224a:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 800224c:	4b2f      	ldr	r3, [pc, #188]	@ (800230c <DHCP_run+0x228>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	4a2e      	ldr	r2, [pc, #184]	@ (800230c <DHCP_run+0x228>)
 8002254:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8002256:	f7ff f94b 	bl	80014f0 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800225a:	f000 f98f 	bl	800257c <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800225e:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <DHCP_run+0x204>)
 8002260:	2204      	movs	r2, #4
 8002262:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002264:	e03a      	b.n	80022dc <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8002266:	2304      	movs	r3, #4
 8002268:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800226a:	79bb      	ldrb	r3, [r7, #6]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d125      	bne.n	80022bc <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8002270:	4b27      	ldr	r3, [pc, #156]	@ (8002310 <DHCP_run+0x22c>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <DHCP_run+0x224>)
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <DHCP_run+0x20c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d111      	bne.n	80022a6 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002282:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <DHCP_run+0x224>)
 8002284:	785a      	ldrb	r2, [r3, #1]
 8002286:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <DHCP_run+0x20c>)
 8002288:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800228a:	429a      	cmp	r2, r3
 800228c:	d10b      	bne.n	80022a6 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800228e:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <DHCP_run+0x224>)
 8002290:	789a      	ldrb	r2, [r3, #2]
 8002292:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <DHCP_run+0x20c>)
 8002294:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d105      	bne.n	80022a6 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800229a:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <DHCP_run+0x224>)
 800229c:	78da      	ldrb	r2, [r3, #3]
 800229e:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <DHCP_run+0x20c>)
 80022a0:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d004      	beq.n	80022b0 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 80022a6:	2303      	movs	r3, #3
 80022a8:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80022aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <DHCP_run+0x230>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80022b0:	f000 f964 	bl	800257c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <DHCP_run+0x204>)
 80022b6:	2203      	movs	r2, #3
 80022b8:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80022ba:	e010      	b.n	80022de <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80022bc:	79bb      	ldrb	r3, [r7, #6]
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d105      	bne.n	80022ce <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80022c2:	f000 f95b 	bl	800257c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <DHCP_run+0x204>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
	   	break;
 80022cc:	e007      	b.n	80022de <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80022ce:	f000 f823 	bl	8002318 <check_DHCP_timeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
	   	break;
 80022d6:	e002      	b.n	80022de <DHCP_run+0x1fa>
		default :
   		break;
 80022d8:	bf00      	nop
 80022da:	e000      	b.n	80022de <DHCP_run+0x1fa>
		break;
 80022dc:	bf00      	nop
	}

	return ret;
 80022de:	79fb      	ldrb	r3, [r7, #7]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000a08 	.word	0x20000a08
 80022ec:	200009e8 	.word	0x200009e8
 80022f0:	200009f8 	.word	0x200009f8
 80022f4:	20000a14 	.word	0x20000a14
 80022f8:	2000002c 	.word	0x2000002c
 80022fc:	20000034 	.word	0x20000034
 8002300:	2000001c 	.word	0x2000001c
 8002304:	20000a0c 	.word	0x20000a0c
 8002308:	200009f4 	.word	0x200009f4
 800230c:	20000a10 	.word	0x20000a10
 8002310:	20000a09 	.word	0x20000a09
 8002314:	20000030 	.word	0x20000030

08002318 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800231e:	2301      	movs	r3, #1
 8002320:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8002322:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <check_DHCP_timeout+0xb0>)
 8002324:	f993 3000 	ldrsb.w	r3, [r3]
 8002328:	2b01      	cmp	r3, #1
 800232a:	dc2d      	bgt.n	8002388 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <check_DHCP_timeout+0xb4>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b27      	ldr	r3, [pc, #156]	@ (80023d0 <check_DHCP_timeout+0xb8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d242      	bcs.n	80023be <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8002338:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <check_DHCP_timeout+0xbc>)
 800233a:	f993 3000 	ldrsb.w	r3, [r3]
 800233e:	2b04      	cmp	r3, #4
 8002340:	d00c      	beq.n	800235c <check_DHCP_timeout+0x44>
 8002342:	2b04      	cmp	r3, #4
 8002344:	dc0d      	bgt.n	8002362 <check_DHCP_timeout+0x4a>
 8002346:	2b01      	cmp	r3, #1
 8002348:	d002      	beq.n	8002350 <check_DHCP_timeout+0x38>
 800234a:	2b02      	cmp	r3, #2
 800234c:	d003      	beq.n	8002356 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800234e:	e008      	b.n	8002362 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8002350:	f7fe ff08 	bl	8001164 <send_DHCP_DISCOVER>
				break;
 8002354:	e006      	b.n	8002364 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002356:	f7ff f8cb 	bl	80014f0 <send_DHCP_REQUEST>
				break;
 800235a:	e003      	b.n	8002364 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800235c:	f7ff f8c8 	bl	80014f0 <send_DHCP_REQUEST>
				break;
 8002360:	e000      	b.n	8002364 <check_DHCP_timeout+0x4c>
				break;
 8002362:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8002364:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <check_DHCP_timeout+0xb8>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800236a:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <check_DHCP_timeout+0xb8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	330a      	adds	r3, #10
 8002370:	4a16      	ldr	r2, [pc, #88]	@ (80023cc <check_DHCP_timeout+0xb4>)
 8002372:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <check_DHCP_timeout+0xb0>)
 8002376:	f993 3000 	ldrsb.w	r3, [r3]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	b25a      	sxtb	r2, r3
 8002382:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <check_DHCP_timeout+0xb0>)
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e01a      	b.n	80023be <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <check_DHCP_timeout+0xbc>)
 800238a:	f993 3000 	ldrsb.w	r3, [r3]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d00c      	beq.n	80023ac <check_DHCP_timeout+0x94>
 8002392:	2b04      	cmp	r3, #4
 8002394:	dc10      	bgt.n	80023b8 <check_DHCP_timeout+0xa0>
 8002396:	2b01      	cmp	r3, #1
 8002398:	d002      	beq.n	80023a0 <check_DHCP_timeout+0x88>
 800239a:	2b02      	cmp	r3, #2
 800239c:	d006      	beq.n	80023ac <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800239e:	e00b      	b.n	80023b8 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <check_DHCP_timeout+0xbc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80023a6:	2300      	movs	r3, #0
 80023a8:	71fb      	strb	r3, [r7, #7]
				break;
 80023aa:	e006      	b.n	80023ba <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80023ac:	f7fe feda 	bl	8001164 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <check_DHCP_timeout+0xbc>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
				break;
 80023b6:	e000      	b.n	80023ba <check_DHCP_timeout+0xa2>
				break;
 80023b8:	bf00      	nop
		}
		reset_DHCP_timeout();
 80023ba:	f000 f8df 	bl	800257c <reset_DHCP_timeout>
	}
	return ret;
 80023be:	79fb      	ldrb	r3, [r7, #7]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000a09 	.word	0x20000a09
 80023cc:	20000020 	.word	0x20000020
 80023d0:	20000a0c 	.word	0x20000a0c
 80023d4:	20000a08 	.word	0x20000a08

080023d8 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80023de:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80023e2:	f000 f997 	bl	8002714 <WIZCHIP_READ>
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80023ea:	2103      	movs	r1, #3
 80023ec:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80023f0:	f000 f9dc 	bl	80027ac <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80023f4:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <check_DHCP_leasedIP+0x6c>)
 80023f6:	7818      	ldrb	r0, [r3, #0]
 80023f8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <check_DHCP_leasedIP+0x70>)
 8002400:	2211      	movs	r2, #17
 8002402:	4912      	ldr	r1, [pc, #72]	@ (800244c <check_DHCP_leasedIP+0x74>)
 8002404:	f000 fdee 	bl	8002fe4 <sendto>
 8002408:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	4619      	mov	r1, r3
 800240e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002412:	f000 f9cb 	bl	80027ac <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f113 0f0d 	cmn.w	r3, #13
 800241c:	d101      	bne.n	8002422 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800241e:	2301      	movs	r3, #1
 8002420:	e00c      	b.n	800243c <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002422:	f7ff faef 	bl	8001a04 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <check_DHCP_leasedIP+0x78>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 800242c:	bf00      	nop
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <check_DHCP_leasedIP+0x78>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d9f9      	bls.n	800242e <check_DHCP_leasedIP+0x56>

		return 0;
 800243a:	2300      	movs	r3, #0
	}
}	
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200009e8 	.word	0x200009e8
 8002448:	200009f8 	.word	0x200009f8
 800244c:	08007b54 	.word	0x08007b54
 8002450:	20000a0c 	.word	0x20000a0c

08002454 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002464:	2206      	movs	r2, #6
 8002466:	493f      	ldr	r1, [pc, #252]	@ (8002564 <DHCP_init+0x110>)
 8002468:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800246c:	f000 f9ec 	bl	8002848 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002470:	4b3c      	ldr	r3, [pc, #240]	@ (8002564 <DHCP_init+0x110>)
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	4b3b      	ldr	r3, [pc, #236]	@ (8002564 <DHCP_init+0x110>)
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	4313      	orrs	r3, r2
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <DHCP_init+0x110>)
 800247e:	789b      	ldrb	r3, [r3, #2]
 8002480:	4313      	orrs	r3, r2
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b37      	ldr	r3, [pc, #220]	@ (8002564 <DHCP_init+0x110>)
 8002486:	78db      	ldrb	r3, [r3, #3]
 8002488:	4313      	orrs	r3, r2
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <DHCP_init+0x110>)
 800248e:	791b      	ldrb	r3, [r3, #4]
 8002490:	4313      	orrs	r3, r2
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <DHCP_init+0x110>)
 8002496:	795b      	ldrb	r3, [r3, #5]
 8002498:	4313      	orrs	r3, r2
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d117      	bne.n	80024d0 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 80024a0:	4b30      	ldr	r3, [pc, #192]	@ (8002564 <DHCP_init+0x110>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 80024a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002564 <DHCP_init+0x110>)
 80024a8:	2208      	movs	r2, #8
 80024aa:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 80024ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002564 <DHCP_init+0x110>)
 80024ae:	22dc      	movs	r2, #220	@ 0xdc
 80024b0:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 80024b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002564 <DHCP_init+0x110>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 80024b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002564 <DHCP_init+0x110>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 80024be:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <DHCP_init+0x110>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 80024c4:	2206      	movs	r2, #6
 80024c6:	4927      	ldr	r1, [pc, #156]	@ (8002564 <DHCP_init+0x110>)
 80024c8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80024cc:	f000 fa1c 	bl	8002908 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80024d0:	4a25      	ldr	r2, [pc, #148]	@ (8002568 <DHCP_init+0x114>)
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80024d6:	4a25      	ldr	r2, [pc, #148]	@ (800256c <DHCP_init+0x118>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80024dc:	4b24      	ldr	r3, [pc, #144]	@ (8002570 <DHCP_init+0x11c>)
 80024de:	4a25      	ldr	r2, [pc, #148]	@ (8002574 <DHCP_init+0x120>)
 80024e0:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80024e2:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <DHCP_init+0x110>)
 80024e4:	78db      	ldrb	r3, [r3, #3]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b21      	ldr	r3, [pc, #132]	@ (8002570 <DHCP_init+0x11c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	4a20      	ldr	r2, [pc, #128]	@ (8002570 <DHCP_init+0x11c>)
 80024f0:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80024f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <DHCP_init+0x110>)
 80024f4:	791b      	ldrb	r3, [r3, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <DHCP_init+0x11c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002570 <DHCP_init+0x11c>)
 8002500:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002502:	4b18      	ldr	r3, [pc, #96]	@ (8002564 <DHCP_init+0x110>)
 8002504:	795b      	ldrb	r3, [r3, #5]
 8002506:	461a      	mov	r2, r3
 8002508:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <DHCP_init+0x11c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4413      	add	r3, r2
 800250e:	4a18      	ldr	r2, [pc, #96]	@ (8002570 <DHCP_init+0x11c>)
 8002510:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002512:	4b14      	ldr	r3, [pc, #80]	@ (8002564 <DHCP_init+0x110>)
 8002514:	78da      	ldrb	r2, [r3, #3]
 8002516:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <DHCP_init+0x110>)
 8002518:	791b      	ldrb	r3, [r3, #4]
 800251a:	4053      	eors	r3, r2
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <DHCP_init+0x110>)
 8002520:	795b      	ldrb	r3, [r3, #5]
 8002522:	4053      	eors	r3, r2
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <DHCP_init+0x11c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4413      	add	r3, r2
 800252e:	4a10      	ldr	r2, [pc, #64]	@ (8002570 <DHCP_init+0x11c>)
 8002530:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	2204      	movs	r2, #4
 8002538:	4619      	mov	r1, r3
 800253a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800253e:	f000 f9e3 	bl	8002908 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	2204      	movs	r2, #4
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800254e:	f000 f9db 	bl	8002908 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002552:	f000 f813 	bl	800257c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <DHCP_init+0x124>)
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000a18 	.word	0x20000a18
 8002568:	200009e8 	.word	0x200009e8
 800256c:	20000a14 	.word	0x20000a14
 8002570:	20000a10 	.word	0x20000a10
 8002574:	12345678 	.word	0x12345678
 8002578:	20000a08 	.word	0x20000a08

0800257c <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <reset_DHCP_timeout+0x20>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <reset_DHCP_timeout+0x24>)
 8002588:	220a      	movs	r2, #10
 800258a:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <reset_DHCP_timeout+0x28>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	20000a0c 	.word	0x20000a0c
 80025a0:	20000020 	.word	0x20000020
 80025a4:	20000a09 	.word	0x20000a09

080025a8 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 80025ac:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <DHCP_time_handler+0x18>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	4a03      	ldr	r2, [pc, #12]	@ (80025c0 <DHCP_time_handler+0x18>)
 80025b4:	6013      	str	r3, [r2, #0]
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	20000a0c 	.word	0x20000a0c

080025c4 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <getIPfromDHCP+0x3c>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a09      	ldr	r2, [pc, #36]	@ (8002600 <getIPfromDHCP+0x3c>)
 80025da:	7852      	ldrb	r2, [r2, #1]
 80025dc:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3302      	adds	r3, #2
 80025e2:	4a07      	ldr	r2, [pc, #28]	@ (8002600 <getIPfromDHCP+0x3c>)
 80025e4:	7892      	ldrb	r2, [r2, #2]
 80025e6:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3303      	adds	r3, #3
 80025ec:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <getIPfromDHCP+0x3c>)
 80025ee:	78d2      	ldrb	r2, [r2, #3]
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	200009f8 	.word	0x200009f8

08002604 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 800260c:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <getGWfromDHCP+0x3c>)
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3301      	adds	r3, #1
 8002618:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <getGWfromDHCP+0x3c>)
 800261a:	7852      	ldrb	r2, [r2, #1]
 800261c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3302      	adds	r3, #2
 8002622:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <getGWfromDHCP+0x3c>)
 8002624:	7892      	ldrb	r2, [r2, #2]
 8002626:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3303      	adds	r3, #3
 800262c:	4a04      	ldr	r2, [pc, #16]	@ (8002640 <getGWfromDHCP+0x3c>)
 800262e:	78d2      	ldrb	r2, [r2, #3]
 8002630:	701a      	strb	r2, [r3, #0]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	200009fc 	.word	0x200009fc

08002644 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800264c:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <getSNfromDHCP+0x3c>)
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3301      	adds	r3, #1
 8002658:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <getSNfromDHCP+0x3c>)
 800265a:	7852      	ldrb	r2, [r2, #1]
 800265c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3302      	adds	r3, #2
 8002662:	4a07      	ldr	r2, [pc, #28]	@ (8002680 <getSNfromDHCP+0x3c>)
 8002664:	7892      	ldrb	r2, [r2, #2]
 8002666:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3303      	adds	r3, #3
 800266c:	4a04      	ldr	r2, [pc, #16]	@ (8002680 <getSNfromDHCP+0x3c>)
 800266e:	78d2      	ldrb	r2, [r2, #3]
 8002670:	701a      	strb	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000a00 	.word	0x20000a00

08002684 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 800268c:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <getDNSfromDHCP+0x3c>)
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3301      	adds	r3, #1
 8002698:	4a09      	ldr	r2, [pc, #36]	@ (80026c0 <getDNSfromDHCP+0x3c>)
 800269a:	7852      	ldrb	r2, [r2, #1]
 800269c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3302      	adds	r3, #2
 80026a2:	4a07      	ldr	r2, [pc, #28]	@ (80026c0 <getDNSfromDHCP+0x3c>)
 80026a4:	7892      	ldrb	r2, [r2, #2]
 80026a6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3303      	adds	r3, #3
 80026ac:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <getDNSfromDHCP+0x3c>)
 80026ae:	78d2      	ldrb	r2, [r2, #3]
 80026b0:	701a      	strb	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000a04 	.word	0x20000a04

080026c4 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2b09      	cmp	r3, #9
 80026da:	d803      	bhi.n	80026e4 <NibbleToHex+0x20>
    return nibble + '0';
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	3330      	adds	r3, #48	@ 0x30
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e002      	b.n	80026ea <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	3337      	adds	r3, #55	@ 0x37
 80026e8:	b2db      	uxtb	r3, r3
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
	MilliTimer++;
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <MilliTimer_Handler+0x18>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a03      	ldr	r2, [pc, #12]	@ (8002710 <MilliTimer_Handler+0x18>)
 8002704:	6013      	str	r3, [r2, #0]
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	20000a20 	.word	0x20000a20

08002714 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800271c:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <WIZCHIP_READ+0x94>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002722:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <WIZCHIP_READ+0x94>)
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002728:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <WIZCHIP_READ+0x94>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <WIZCHIP_READ+0x24>
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <WIZCHIP_READ+0x94>)
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d114      	bne.n	8002762 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <WIZCHIP_READ+0x94>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	0c12      	lsrs	r2, r2, #16
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	4610      	mov	r0, r2
 8002744:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002746:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <WIZCHIP_READ+0x94>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	0a12      	lsrs	r2, r2, #8
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	4610      	mov	r0, r2
 8002752:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002754:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <WIZCHIP_READ+0x94>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	4610      	mov	r0, r2
 800275e:	4798      	blx	r3
 8002760:	e011      	b.n	8002786 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	b2db      	uxtb	r3, r3
 8002768:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	b2db      	uxtb	r3, r3
 8002770:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <WIZCHIP_READ+0x94>)
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	2103      	movs	r1, #3
 8002782:	4610      	mov	r0, r2
 8002784:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <WIZCHIP_READ+0x94>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4798      	blx	r3
 800278c:	4603      	mov	r3, r0
 800278e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <WIZCHIP_READ+0x94>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002796:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <WIZCHIP_READ+0x94>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	4798      	blx	r3
   return ret;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000003c 	.word	0x2000003c

080027ac <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80027b8:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80027be:	4b21      	ldr	r3, [pc, #132]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80027cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d119      	bne.n	8002808 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	0c12      	lsrs	r2, r2, #16
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	4610      	mov	r0, r2
 80027e0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80027e2:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	0a12      	lsrs	r2, r2, #8
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4610      	mov	r0, r2
 80027ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80027f0:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4610      	mov	r0, r2
 80027fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	4610      	mov	r0, r2
 8002804:	4798      	blx	r3
 8002806:	e013      	b.n	8002830 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	0c1b      	lsrs	r3, r3, #16
 800280c:	b2db      	uxtb	r3, r3
 800280e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	b2db      	uxtb	r3, r3
 8002816:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 8002824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002826:	f107 020c 	add.w	r2, r7, #12
 800282a:	2104      	movs	r1, #4
 800282c:	4610      	mov	r0, r2
 800282e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002830:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002836:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <WIZCHIP_WRITE+0x98>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	4798      	blx	r3
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	2000003c 	.word	0x2000003c

08002848 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002856:	4b2b      	ldr	r3, [pc, #172]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800285c:	4b29      	ldr	r3, [pc, #164]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002862:	4b28      	ldr	r3, [pc, #160]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <WIZCHIP_READ_BUF+0x2a>
 800286a:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 800286c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d126      	bne.n	80028c0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002872:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	0c12      	lsrs	r2, r2, #16
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	4610      	mov	r0, r2
 800287e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002880:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	0a12      	lsrs	r2, r2, #8
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	4610      	mov	r0, r2
 800288c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800288e:	4b1d      	ldr	r3, [pc, #116]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	4610      	mov	r0, r2
 8002898:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800289a:	2300      	movs	r3, #0
 800289c:	82fb      	strh	r3, [r7, #22]
 800289e:	e00a      	b.n	80028b6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80028a0:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	8afa      	ldrh	r2, [r7, #22]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	188c      	adds	r4, r1, r2
 80028aa:	4798      	blx	r3
 80028ac:	4603      	mov	r3, r0
 80028ae:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80028b0:	8afb      	ldrh	r3, [r7, #22]
 80028b2:	3301      	adds	r3, #1
 80028b4:	82fb      	strh	r3, [r7, #22]
 80028b6:	8afa      	ldrh	r2, [r7, #22]
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d3f0      	bcc.n	80028a0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80028be:	e017      	b.n	80028f0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028da:	f107 0210 	add.w	r2, r7, #16
 80028de:	2103      	movs	r1, #3
 80028e0:	4610      	mov	r0, r2
 80028e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80028e4:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	88fa      	ldrh	r2, [r7, #6]
 80028ea:	4611      	mov	r1, r2
 80028ec:	68b8      	ldr	r0, [r7, #8]
 80028ee:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80028f0:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80028f6:	4b03      	ldr	r3, [pc, #12]	@ (8002904 <WIZCHIP_READ_BUF+0xbc>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	4798      	blx	r3
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}
 8002904:	2000003c 	.word	0x2000003c

08002908 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	4613      	mov	r3, r2
 8002914:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002916:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800291c:	4b29      	ldr	r3, [pc, #164]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800292a:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 800292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292e:	2b00      	cmp	r3, #0
 8002930:	d126      	bne.n	8002980 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002932:	4b24      	ldr	r3, [pc, #144]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	0c12      	lsrs	r2, r2, #16
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	4610      	mov	r0, r2
 800293e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002940:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	0a12      	lsrs	r2, r2, #8
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	4610      	mov	r0, r2
 800294c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800294e:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	4610      	mov	r0, r2
 8002958:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800295a:	2300      	movs	r3, #0
 800295c:	82fb      	strh	r3, [r7, #22]
 800295e:	e00a      	b.n	8002976 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002960:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	8afa      	ldrh	r2, [r7, #22]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	440a      	add	r2, r1
 800296a:	7812      	ldrb	r2, [r2, #0]
 800296c:	4610      	mov	r0, r2
 800296e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002970:	8afb      	ldrh	r3, [r7, #22]
 8002972:	3301      	adds	r3, #1
 8002974:	82fb      	strh	r3, [r7, #22]
 8002976:	8afa      	ldrh	r2, [r7, #22]
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	429a      	cmp	r2, r3
 800297c:	d3f0      	bcc.n	8002960 <WIZCHIP_WRITE_BUF+0x58>
 800297e:	e017      	b.n	80029b0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	0c1b      	lsrs	r3, r3, #16
 8002984:	b2db      	uxtb	r3, r3
 8002986:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	b2db      	uxtb	r3, r3
 800298e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	f107 0210 	add.w	r2, r7, #16
 800299e:	2103      	movs	r1, #3
 80029a0:	4610      	mov	r0, r2
 80029a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80029a4:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	4611      	mov	r1, r2
 80029ac:	68b8      	ldr	r0, [r7, #8]
 80029ae:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80029b0:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80029b6:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <WIZCHIP_WRITE_BUF+0xbc>)
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	4798      	blx	r3
}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000003c 	.word	0x2000003c

080029c8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	81fb      	strh	r3, [r7, #14]
 80029d6:	2300      	movs	r3, #0
 80029d8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	3301      	adds	r3, #1
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fe94 	bl	8002714 <WIZCHIP_READ>
 80029ec:	4603      	mov	r3, r0
 80029ee:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80029f0:	89bb      	ldrh	r3, [r7, #12]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	b29c      	uxth	r4, r3
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	3301      	adds	r3, #1
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fe86 	bl	8002714 <WIZCHIP_READ>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4423      	add	r3, r4
 8002a0c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002a0e:	89bb      	ldrh	r3, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d019      	beq.n	8002a48 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	3301      	adds	r3, #1
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fe77 	bl	8002714 <WIZCHIP_READ>
 8002a26:	4603      	mov	r3, r0
 8002a28:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002a2a:	89fb      	ldrh	r3, [r7, #14]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	b29c      	uxth	r4, r3
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	3301      	adds	r3, #1
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fe69 	bl	8002714 <WIZCHIP_READ>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4423      	add	r3, r4
 8002a46:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a48:	89fa      	ldrh	r2, [r7, #14]
 8002a4a:	89bb      	ldrh	r3, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1c4      	bne.n	80029da <getSn_TX_FSR+0x12>
   return val;
 8002a50:	89fb      	ldrh	r3, [r7, #14]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}

08002a5a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002a5a:	b590      	push	{r4, r7, lr}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	81fb      	strh	r3, [r7, #14]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3301      	adds	r3, #1
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fe4b 	bl	8002714 <WIZCHIP_READ>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a82:	89bb      	ldrh	r3, [r7, #12]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b29c      	uxth	r4, r3
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fe3d 	bl	8002714 <WIZCHIP_READ>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4423      	add	r3, r4
 8002a9e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002aa0:	89bb      	ldrh	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d019      	beq.n	8002ada <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	3301      	adds	r3, #1
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fe2e 	bl	8002714 <WIZCHIP_READ>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002abc:	89fb      	ldrh	r3, [r7, #14]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	b29c      	uxth	r4, r3
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fe20 	bl	8002714 <WIZCHIP_READ>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4423      	add	r3, r4
 8002ad8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002ada:	89fa      	ldrh	r2, [r7, #14]
 8002adc:	89bb      	ldrh	r3, [r7, #12]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d1c4      	bne.n	8002a6c <getSn_RX_RSR+0x12>
   return val;
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
 8002af8:	4613      	mov	r3, r2
 8002afa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002b04:	88bb      	ldrh	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d046      	beq.n	8002b98 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	3301      	adds	r3, #1
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fdfc 	bl	8002714 <WIZCHIP_READ>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	b29c      	uxth	r4, r3
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	3301      	adds	r3, #1
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fdf0 	bl	8002714 <WIZCHIP_READ>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4423      	add	r3, r4
 8002b38:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002b3a:	89fb      	ldrh	r3, [r7, #14]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	79fa      	ldrb	r2, [r7, #7]
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	3202      	adds	r2, #2
 8002b44:	00d2      	lsls	r2, r2, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002b4a:	88bb      	ldrh	r3, [r7, #4]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	f7ff fed9 	bl	8002908 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002b56:	89fa      	ldrh	r2, [r7, #14]
 8002b58:	88bb      	ldrh	r3, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	3301      	adds	r3, #1
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	89fb      	ldrh	r3, [r7, #14]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f7ff fe18 	bl	80027ac <WIZCHIP_WRITE>
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	3301      	adds	r3, #1
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	89fb      	ldrh	r3, [r7, #14]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f7ff fe0b 	bl	80027ac <WIZCHIP_WRITE>
 8002b96:	e000      	b.n	8002b9a <wiz_send_data+0xae>
   if(len == 0)  return;
 8002b98:	bf00      	nop
}
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd90      	pop	{r4, r7, pc}

08002ba0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
 8002bac:	4613      	mov	r3, r2
 8002bae:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002bb8:	88bb      	ldrh	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d046      	beq.n	8002c4c <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fda2 	bl	8002714 <WIZCHIP_READ>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	b29c      	uxth	r4, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3301      	adds	r3, #1
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fd96 	bl	8002714 <WIZCHIP_READ>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4423      	add	r3, r4
 8002bec:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002bee:	89fb      	ldrh	r3, [r7, #14]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	79fa      	ldrb	r2, [r7, #7]
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	3203      	adds	r2, #3
 8002bf8:	00d2      	lsls	r2, r2, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002bfe:	88bb      	ldrh	r3, [r7, #4]
 8002c00:	461a      	mov	r2, r3
 8002c02:	6839      	ldr	r1, [r7, #0]
 8002c04:	68b8      	ldr	r0, [r7, #8]
 8002c06:	f7ff fe1f 	bl	8002848 <WIZCHIP_READ_BUF>
   ptr += len;
 8002c0a:	89fa      	ldrh	r2, [r7, #14]
 8002c0c:	88bb      	ldrh	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	3301      	adds	r3, #1
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002c1e:	461a      	mov	r2, r3
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f7ff fdbe 	bl	80027ac <WIZCHIP_WRITE>
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3301      	adds	r3, #1
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	89fb      	ldrh	r3, [r7, #14]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f7ff fdb1 	bl	80027ac <WIZCHIP_WRITE>
 8002c4a:	e000      	b.n	8002c4e <wiz_recv_data+0xae>
   if(len == 0) return;
 8002c4c:	bf00      	nop
}
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}

08002c54 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	460a      	mov	r2, r1
 8002c5e:	71fb      	strb	r3, [r7, #7]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fd4d 	bl	8002714 <WIZCHIP_READ>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	b29c      	uxth	r4, r3
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3301      	adds	r3, #1
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fd41 	bl	8002714 <WIZCHIP_READ>
 8002c92:	4603      	mov	r3, r0
 8002c94:	4423      	add	r3, r4
 8002c96:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002c98:	89fa      	ldrh	r2, [r7, #14]
 8002c9a:	88bb      	ldrh	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002cac:	461a      	mov	r2, r3
 8002cae:	89fb      	ldrh	r3, [r7, #14]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4610      	mov	r0, r2
 8002cba:	f7ff fd77 	bl	80027ac <WIZCHIP_WRITE>
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002cca:	461a      	mov	r2, r3
 8002ccc:	89fb      	ldrh	r3, [r7, #14]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f7ff fd6a 	bl	80027ac <WIZCHIP_WRITE>
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd90      	pop	{r4, r7, pc}

08002ce0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	71fb      	strb	r3, [r7, #7]
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71bb      	strb	r3, [r7, #6]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	80bb      	strh	r3, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d902      	bls.n	8002d0a <socket+0x2a>
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295
 8002d08:	e0f0      	b.n	8002eec <socket+0x20c>
	switch(protocol)
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d005      	beq.n	8002d1c <socket+0x3c>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	dd11      	ble.n	8002d38 <socket+0x58>
 8002d14:	3b02      	subs	r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d80e      	bhi.n	8002d38 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002d1a:	e011      	b.n	8002d40 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	2204      	movs	r2, #4
 8002d22:	4619      	mov	r1, r3
 8002d24:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002d28:	f7ff fd8e 	bl	8002848 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <socket+0x5e>
 8002d32:	f06f 0302 	mvn.w	r3, #2
 8002d36:	e0d9      	b.n	8002eec <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002d38:	f06f 0304 	mvn.w	r3, #4
 8002d3c:	e0d6      	b.n	8002eec <socket+0x20c>
	    break;
 8002d3e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <socket+0x70>
 8002d4a:	f06f 0305 	mvn.w	r3, #5
 8002d4e:	e0cd      	b.n	8002eec <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d028      	beq.n	8002da8 <socket+0xc8>
	{
   	switch(protocol)
 8002d56:	79bb      	ldrb	r3, [r7, #6]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d002      	beq.n	8002d62 <socket+0x82>
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d008      	beq.n	8002d72 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002d60:	e022      	b.n	8002da8 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11a      	bne.n	8002da2 <socket+0xc2>
 8002d6c:	f06f 0305 	mvn.w	r3, #5
 8002d70:	e0bc      	b.n	8002eec <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	db02      	blt.n	8002d8a <socket+0xaa>
 8002d84:	f06f 0305 	mvn.w	r3, #5
 8002d88:	e0b0      	b.n	8002eec <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	db04      	blt.n	8002da6 <socket+0xc6>
 8002d9c:	f06f 0305 	mvn.w	r3, #5
 8002da0:	e0a4      	b.n	8002eec <socket+0x20c>
   	      break;
 8002da2:	bf00      	nop
 8002da4:	e000      	b.n	8002da8 <socket+0xc8>
   	      break;
 8002da6:	bf00      	nop
   	}
   }
	close(sn);
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f8ac 	bl	8002f08 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	3301      	adds	r3, #1
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4618      	mov	r0, r3
 8002dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbe:	f023 030f 	bic.w	r3, r3, #15
 8002dc2:	b25a      	sxtb	r2, r3
 8002dc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7ff fcec 	bl	80027ac <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002dd4:	88bb      	ldrh	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d110      	bne.n	8002dfc <socket+0x11c>
	{
	   port = sock_any_port++;
 8002dda:	4b46      	ldr	r3, [pc, #280]	@ (8002ef4 <socket+0x214>)
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	b291      	uxth	r1, r2
 8002de2:	4a44      	ldr	r2, [pc, #272]	@ (8002ef4 <socket+0x214>)
 8002de4:	8011      	strh	r1, [r2, #0]
 8002de6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002de8:	4b42      	ldr	r3, [pc, #264]	@ (8002ef4 <socket+0x214>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d103      	bne.n	8002dfc <socket+0x11c>
 8002df4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef4 <socket+0x214>)
 8002df6:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002dfa:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	3301      	adds	r3, #1
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e08:	461a      	mov	r2, r3
 8002e0a:	88bb      	ldrh	r3, [r7, #4]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7ff fcc9 	bl	80027ac <WIZCHIP_WRITE>
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	3301      	adds	r3, #1
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e26:	461a      	mov	r2, r3
 8002e28:	88bb      	ldrh	r3, [r7, #4]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f7ff fcbc 	bl	80027ac <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	3301      	adds	r3, #1
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fcb2 	bl	80027ac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002e48:	bf00      	nop
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	3301      	adds	r3, #1
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fc5c 	bl	8002714 <WIZCHIP_READ>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f3      	bne.n	8002e4a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	2201      	movs	r2, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	b21a      	sxth	r2, r3
 8002e70:	4b21      	ldr	r3, [pc, #132]	@ (8002ef8 <socket+0x218>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b21b      	sxth	r3, r3
 8002e76:	4013      	ands	r3, r2
 8002e78:	b21b      	sxth	r3, r3
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <socket+0x218>)
 8002e7e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 0201 	and.w	r2, r3, #1
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	b21a      	sxth	r2, r3
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <socket+0x218>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	4b17      	ldr	r3, [pc, #92]	@ (8002ef8 <socket+0x218>)
 8002e9c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	b21a      	sxth	r2, r3
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <socket+0x21c>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b21b      	sxth	r3, r3
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	b21b      	sxth	r3, r3
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <socket+0x21c>)
 8002eba:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	4a10      	ldr	r2, [pc, #64]	@ (8002f00 <socket+0x220>)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f04 <socket+0x224>)
 8002eca:	2100      	movs	r1, #0
 8002ecc:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002ece:	bf00      	nop
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fc19 	bl	8002714 <WIZCHIP_READ>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f3      	beq.n	8002ed0 <socket+0x1f0>
   return (int8_t)sn;
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd90      	pop	{r4, r7, pc}
 8002ef4:	20000038 	.word	0x20000038
 8002ef8:	20000a24 	.word	0x20000a24
 8002efc:	20000a26 	.word	0x20000a26
 8002f00:	20000a28 	.word	0x20000a28
 8002f04:	20000a38 	.word	0x20000a38

08002f08 <close>:

int8_t close(uint8_t sn)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d902      	bls.n	8002f1e <close+0x16>
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	e055      	b.n	8002fca <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	3301      	adds	r3, #1
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f2a:	2110      	movs	r1, #16
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fc3d 	bl	80027ac <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002f32:	bf00      	nop
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	3301      	adds	r3, #1
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fbe7 	bl	8002714 <WIZCHIP_READ>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f3      	bne.n	8002f34 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	3301      	adds	r3, #1
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002f58:	211f      	movs	r1, #31
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fc26 	bl	80027ac <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2201      	movs	r2, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	b21a      	sxth	r2, r3
 8002f6e:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <close+0xcc>)
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	4013      	ands	r3, r2
 8002f76:	b21b      	sxth	r3, r3
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <close+0xcc>)
 8002f7c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	2201      	movs	r2, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	b21a      	sxth	r2, r3
 8002f8c:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <close+0xd0>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	4013      	ands	r3, r2
 8002f94:	b21b      	sxth	r3, r3
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd8 <close+0xd0>)
 8002f9a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fdc <close+0xd4>)
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <close+0xd8>)
 8002faa:	2100      	movs	r1, #0
 8002fac:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002fae:	bf00      	nop
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fba9 	bl	8002714 <WIZCHIP_READ>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f3      	bne.n	8002fb0 <close+0xa8>
	return SOCK_OK;
 8002fc8:	2301      	movs	r3, #1
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000a24 	.word	0x20000a24
 8002fd8:	20000a26 	.word	0x20000a26
 8002fdc:	20000a28 	.word	0x20000a28
 8002fe0:	20000a38 	.word	0x20000a38

08002fe4 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	4603      	mov	r3, r0
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d902      	bls.n	800300a <sendto+0x26>
 8003004:	f04f 33ff 	mov.w	r3, #4294967295
 8003008:	e11a      	b.n	8003240 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	3301      	adds	r3, #1
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fb7e 	bl	8002714 <WIZCHIP_READ>
 8003018:	4603      	mov	r3, r0
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	3b02      	subs	r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d902      	bls.n	800302a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003024:	f06f 0304 	mvn.w	r3, #4
 8003028:	e10a      	b.n	8003240 <sendto+0x25c>
         break;
 800302a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800302c:	89bb      	ldrh	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <sendto+0x54>
 8003032:	f06f 030d 	mvn.w	r3, #13
 8003036:	e103      	b.n	8003240 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	3201      	adds	r2, #1
 8003046:	7812      	ldrb	r2, [r2, #0]
 8003048:	4413      	add	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	3202      	adds	r2, #2
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	4413      	add	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	3203      	adds	r2, #3
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	4413      	add	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <sendto+0xa8>
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	3301      	adds	r3, #1
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fb4c 	bl	8002714 <WIZCHIP_READ>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d002      	beq.n	800308c <sendto+0xa8>
 8003086:	f06f 030b 	mvn.w	r3, #11
 800308a:	e0d9      	b.n	8003240 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800308c:	8c3b      	ldrh	r3, [r7, #32]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10e      	bne.n	80030b0 <sendto+0xcc>
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	3301      	adds	r3, #1
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fb3a 	bl	8002714 <WIZCHIP_READ>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d002      	beq.n	80030b0 <sendto+0xcc>
 80030aa:	f06f 030a 	mvn.w	r3, #10
 80030ae:	e0c7      	b.n	8003240 <sendto+0x25c>
   tmp = getSn_SR(sn);
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	3301      	adds	r3, #1
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fb29 	bl	8002714 <WIZCHIP_READ>
 80030c2:	4603      	mov	r3, r0
 80030c4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	2b42      	cmp	r3, #66	@ 0x42
 80030ca:	d008      	beq.n	80030de <sendto+0xfa>
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	2b22      	cmp	r3, #34	@ 0x22
 80030d0:	d005      	beq.n	80030de <sendto+0xfa>
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	2b32      	cmp	r3, #50	@ 0x32
 80030d6:	d002      	beq.n	80030de <sendto+0xfa>
 80030d8:	f06f 0306 	mvn.w	r3, #6
 80030dc:	e0b0      	b.n	8003240 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	3301      	adds	r3, #1
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80030ea:	2204      	movs	r2, #4
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fc0a 	bl	8002908 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	3301      	adds	r3, #1
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003100:	461a      	mov	r2, r3
 8003102:	8c3b      	ldrh	r3, [r7, #32]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	b29b      	uxth	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f7ff fb4d 	bl	80027ac <WIZCHIP_WRITE>
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	3301      	adds	r3, #1
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800311e:	461a      	mov	r2, r3
 8003120:	8c3b      	ldrh	r3, [r7, #32]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f7ff fb40 	bl	80027ac <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	3301      	adds	r3, #1
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff faeb 	bl	8002714 <WIZCHIP_READ>
 800313e:	4603      	mov	r3, r0
 8003140:	029b      	lsls	r3, r3, #10
 8003142:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003144:	89ba      	ldrh	r2, [r7, #12]
 8003146:	8abb      	ldrh	r3, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	d901      	bls.n	8003150 <sendto+0x16c>
 800314c:	8abb      	ldrh	r3, [r7, #20]
 800314e:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fc38 	bl	80029c8 <getSn_TX_FSR>
 8003158:	4603      	mov	r3, r0
 800315a:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	3301      	adds	r3, #1
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fad3 	bl	8002714 <WIZCHIP_READ>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <sendto+0x196>
 8003174:	f06f 0303 	mvn.w	r3, #3
 8003178:	e062      	b.n	8003240 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800317a:	4b33      	ldr	r3, [pc, #204]	@ (8003248 <sendto+0x264>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	fa42 f303 	asr.w	r3, r2, r3
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <sendto+0x1b6>
 800318e:	89ba      	ldrh	r2, [r7, #12]
 8003190:	8abb      	ldrh	r3, [r7, #20]
 8003192:	429a      	cmp	r2, r3
 8003194:	d901      	bls.n	800319a <sendto+0x1b6>
 8003196:	2300      	movs	r3, #0
 8003198:	e052      	b.n	8003240 <sendto+0x25c>
      if(len <= freesize) break;
 800319a:	89ba      	ldrh	r2, [r7, #12]
 800319c:	8abb      	ldrh	r3, [r7, #20]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d900      	bls.n	80031a4 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 80031a2:	e7d5      	b.n	8003150 <sendto+0x16c>
      if(len <= freesize) break;
 80031a4:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80031a6:	89ba      	ldrh	r2, [r7, #12]
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fc9d 	bl	8002aec <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	3301      	adds	r3, #1
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80031be:	2120      	movs	r1, #32
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff faf3 	bl	80027ac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80031c6:	bf00      	nop
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	3301      	adds	r3, #1
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fa9d 	bl	8002714 <WIZCHIP_READ>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f3      	bne.n	80031c8 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	3301      	adds	r3, #1
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fa91 	bl	8002714 <WIZCHIP_READ>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	3301      	adds	r3, #1
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003210:	2110      	movs	r1, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff faca 	bl	80027ac <WIZCHIP_WRITE>
         break;
 8003218:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800321a:	89bb      	ldrh	r3, [r7, #12]
 800321c:	e010      	b.n	8003240 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0db      	beq.n	80031e0 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	3301      	adds	r3, #1
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003234:	2108      	movs	r1, #8
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fab8 	bl	80027ac <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800323c:	f06f 030c 	mvn.w	r3, #12
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000a24 	.word	0x20000a24

0800324c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	4603      	mov	r3, r0
 8003258:	73fb      	strb	r3, [r7, #15]
 800325a:	4613      	mov	r3, r2
 800325c:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800325e:	2300      	movs	r3, #0
 8003260:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d902      	bls.n	800326e <recvfrom+0x22>
 8003268:	f04f 33ff 	mov.w	r3, #4294967295
 800326c:	e1d2      	b.n	8003614 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	3301      	adds	r3, #1
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fa4c 	bl	8002714 <WIZCHIP_READ>
 800327c:	4603      	mov	r3, r0
 800327e:	777b      	strb	r3, [r7, #29]
 8003280:	7f7b      	ldrb	r3, [r7, #29]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b02      	subs	r3, #2
 8003288:	2b02      	cmp	r3, #2
 800328a:	d902      	bls.n	8003292 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800328c:	f06f 0304 	mvn.w	r3, #4
 8003290:	e1c0      	b.n	8003614 <recvfrom+0x3c8>
         break;
 8003292:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003294:	89bb      	ldrh	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <recvfrom+0x54>
 800329a:	f06f 030d 	mvn.w	r3, #13
 800329e:	e1b9      	b.n	8003614 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	4a87      	ldr	r2, [pc, #540]	@ (80034c0 <recvfrom+0x274>)
 80032a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d128      	bne.n	80032fe <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fbd3 	bl	8002a5a <getSn_RX_RSR>
 80032b4:	4603      	mov	r3, r0
 80032b6:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	3301      	adds	r3, #1
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fa25 	bl	8002714 <WIZCHIP_READ>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <recvfrom+0x8a>
 80032d0:	f06f 0303 	mvn.w	r3, #3
 80032d4:	e19e      	b.n	8003614 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80032d6:	4b7b      	ldr	r3, [pc, #492]	@ (80034c4 <recvfrom+0x278>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	fa42 f303 	asr.w	r3, r2, r3
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <recvfrom+0xa8>
 80032ea:	8bfb      	ldrh	r3, [r7, #30]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <recvfrom+0xa8>
 80032f0:	2300      	movs	r3, #0
 80032f2:	e18f      	b.n	8003614 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 80032f4:	8bfb      	ldrh	r3, [r7, #30]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d100      	bne.n	80032fc <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80032fa:	e7d7      	b.n	80032ac <recvfrom+0x60>
         if(pack_len != 0) break;
 80032fc:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80032fe:	7f7b      	ldrb	r3, [r7, #29]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	2b04      	cmp	r3, #4
 8003306:	d078      	beq.n	80033fa <recvfrom+0x1ae>
 8003308:	2b04      	cmp	r3, #4
 800330a:	f300 8140 	bgt.w	800358e <recvfrom+0x342>
 800330e:	2b02      	cmp	r3, #2
 8003310:	d003      	beq.n	800331a <recvfrom+0xce>
 8003312:	2b03      	cmp	r3, #3
 8003314:	f000 80da 	beq.w	80034cc <recvfrom+0x280>
 8003318:	e139      	b.n	800358e <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	4a68      	ldr	r2, [pc, #416]	@ (80034c0 <recvfrom+0x274>)
 800331e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d151      	bne.n	80033ca <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8003326:	f107 0114 	add.w	r1, r7, #20
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2208      	movs	r2, #8
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fc36 	bl	8002ba0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	3301      	adds	r3, #1
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003340:	2140      	movs	r1, #64	@ 0x40
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fa32 	bl	80027ac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003348:	bf00      	nop
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	3301      	adds	r3, #1
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff f9dc 	bl	8002714 <WIZCHIP_READ>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f3      	bne.n	800334a <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8003362:	7d3a      	ldrb	r2, [r7, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3301      	adds	r3, #1
 800336c:	7d7a      	ldrb	r2, [r7, #21]
 800336e:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3302      	adds	r3, #2
 8003374:	7dba      	ldrb	r2, [r7, #22]
 8003376:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3303      	adds	r3, #3
 800337c:	7dfa      	ldrb	r2, [r7, #23]
 800337e:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8003380:	7e3b      	ldrb	r3, [r7, #24]
 8003382:	461a      	mov	r2, r3
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	b29b      	uxth	r3, r3
 8003390:	7e7a      	ldrb	r2, [r7, #25]
 8003392:	4413      	add	r3, r2
 8003394:	b29a      	uxth	r2, r3
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800339a:	7eba      	ldrb	r2, [r7, #26]
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	4611      	mov	r1, r2
 80033a0:	4a47      	ldr	r2, [pc, #284]	@ (80034c0 <recvfrom+0x274>)
 80033a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	4a45      	ldr	r2, [pc, #276]	@ (80034c0 <recvfrom+0x274>)
 80033aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	7efb      	ldrb	r3, [r7, #27]
 80033b4:	4619      	mov	r1, r3
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	440a      	add	r2, r1
 80033ba:	b291      	uxth	r1, r2
 80033bc:	4a40      	ldr	r2, [pc, #256]	@ (80034c0 <recvfrom+0x274>)
 80033be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	4a40      	ldr	r2, [pc, #256]	@ (80034c8 <recvfrom+0x27c>)
 80033c6:	2180      	movs	r1, #128	@ 0x80
 80033c8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	4a3c      	ldr	r2, [pc, #240]	@ (80034c0 <recvfrom+0x274>)
 80033ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d2:	89ba      	ldrh	r2, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d202      	bcs.n	80033de <recvfrom+0x192>
 80033d8:	89bb      	ldrh	r3, [r7, #12]
 80033da:	83fb      	strh	r3, [r7, #30]
 80033dc:	e004      	b.n	80033e8 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	4a37      	ldr	r2, [pc, #220]	@ (80034c0 <recvfrom+0x274>)
 80033e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033e6:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80033e8:	8bfb      	ldrh	r3, [r7, #30]
 80033ea:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80033ec:	8bfa      	ldrh	r2, [r7, #30]
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fbd4 	bl	8002ba0 <wiz_recv_data>
			break;
 80033f8:	e0d5      	b.n	80035a6 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	4a30      	ldr	r2, [pc, #192]	@ (80034c0 <recvfrom+0x274>)
 80033fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d145      	bne.n	8003492 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8003406:	f107 0114 	add.w	r1, r7, #20
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2202      	movs	r2, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fbc6 	bl	8002ba0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	3301      	adds	r3, #1
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003420:	2140      	movs	r1, #64	@ 0x40
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f9c2 	bl	80027ac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003428:	bf00      	nop
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	3301      	adds	r3, #1
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff f96c 	bl	8002714 <WIZCHIP_READ>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f3      	bne.n	800342a <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8003442:	7d3a      	ldrb	r2, [r7, #20]
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	4611      	mov	r1, r2
 8003448:	4a1d      	ldr	r2, [pc, #116]	@ (80034c0 <recvfrom+0x274>)
 800344a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	4a1b      	ldr	r2, [pc, #108]	@ (80034c0 <recvfrom+0x274>)
 8003452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	b29b      	uxth	r3, r3
 800345a:	7d7a      	ldrb	r2, [r7, #21]
 800345c:	4413      	add	r3, r2
 800345e:	b29a      	uxth	r2, r3
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	3a02      	subs	r2, #2
 8003464:	b291      	uxth	r1, r2
 8003466:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <recvfrom+0x274>)
 8003468:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	4a14      	ldr	r2, [pc, #80]	@ (80034c0 <recvfrom+0x274>)
 8003470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003474:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8003478:	4293      	cmp	r3, r2
 800347a:	d906      	bls.n	800348a <recvfrom+0x23e>
   			{
   			   close(sn);
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fd42 	bl	8002f08 <close>
   			   return SOCKFATAL_PACKLEN;
 8003484:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8003488:	e0c4      	b.n	8003614 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	4a0e      	ldr	r2, [pc, #56]	@ (80034c8 <recvfrom+0x27c>)
 800348e:	2180      	movs	r1, #128	@ 0x80
 8003490:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	4a0a      	ldr	r2, [pc, #40]	@ (80034c0 <recvfrom+0x274>)
 8003496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800349a:	89ba      	ldrh	r2, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d202      	bcs.n	80034a6 <recvfrom+0x25a>
 80034a0:	89bb      	ldrh	r3, [r7, #12]
 80034a2:	83fb      	strh	r3, [r7, #30]
 80034a4:	e004      	b.n	80034b0 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	4a05      	ldr	r2, [pc, #20]	@ (80034c0 <recvfrom+0x274>)
 80034aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ae:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80034b0:	8bfa      	ldrh	r2, [r7, #30]
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fb72 	bl	8002ba0 <wiz_recv_data>
		   break;
 80034bc:	e073      	b.n	80035a6 <recvfrom+0x35a>
 80034be:	bf00      	nop
 80034c0:	20000a28 	.word	0x20000a28
 80034c4:	20000a24 	.word	0x20000a24
 80034c8:	20000a38 	.word	0x20000a38
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	4a53      	ldr	r2, [pc, #332]	@ (800361c <recvfrom+0x3d0>)
 80034d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d144      	bne.n	8003562 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 80034d8:	f107 0114 	add.w	r1, r7, #20
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2206      	movs	r2, #6
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fb5d 	bl	8002ba0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	3301      	adds	r3, #1
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034f2:	2140      	movs	r1, #64	@ 0x40
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff f959 	bl	80027ac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80034fa:	bf00      	nop
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	3301      	adds	r3, #1
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff f903 	bl	8002714 <WIZCHIP_READ>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f3      	bne.n	80034fc <recvfrom+0x2b0>
   			addr[0] = head[0];
 8003514:	7d3a      	ldrb	r2, [r7, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3301      	adds	r3, #1
 800351e:	7d7a      	ldrb	r2, [r7, #21]
 8003520:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3302      	adds	r3, #2
 8003526:	7dba      	ldrb	r2, [r7, #22]
 8003528:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3303      	adds	r3, #3
 800352e:	7dfa      	ldrb	r2, [r7, #23]
 8003530:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8003532:	7e3a      	ldrb	r2, [r7, #24]
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4a38      	ldr	r2, [pc, #224]	@ (800361c <recvfrom+0x3d0>)
 800353a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	4a36      	ldr	r2, [pc, #216]	@ (800361c <recvfrom+0x3d0>)
 8003542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	b29a      	uxth	r2, r3
 800354a:	7e7b      	ldrb	r3, [r7, #25]
 800354c:	4619      	mov	r1, r3
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	440a      	add	r2, r1
 8003552:	b291      	uxth	r1, r2
 8003554:	4a31      	ldr	r2, [pc, #196]	@ (800361c <recvfrom+0x3d0>)
 8003556:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	4a30      	ldr	r2, [pc, #192]	@ (8003620 <recvfrom+0x3d4>)
 800355e:	2180      	movs	r1, #128	@ 0x80
 8003560:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	4a2d      	ldr	r2, [pc, #180]	@ (800361c <recvfrom+0x3d0>)
 8003566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800356a:	89ba      	ldrh	r2, [r7, #12]
 800356c:	429a      	cmp	r2, r3
 800356e:	d202      	bcs.n	8003576 <recvfrom+0x32a>
 8003570:	89bb      	ldrh	r3, [r7, #12]
 8003572:	83fb      	strh	r3, [r7, #30]
 8003574:	e004      	b.n	8003580 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	4a28      	ldr	r2, [pc, #160]	@ (800361c <recvfrom+0x3d0>)
 800357a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800357e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003580:	8bfa      	ldrh	r2, [r7, #30]
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fb0a 	bl	8002ba0 <wiz_recv_data>
			break;
 800358c:	e00b      	b.n	80035a6 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800358e:	8bfa      	ldrh	r2, [r7, #30]
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fb5d 	bl	8002c54 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	491f      	ldr	r1, [pc, #124]	@ (800361c <recvfrom+0x3d0>)
 800359e:	8bfa      	ldrh	r2, [r7, #30]
 80035a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80035a4:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	3301      	adds	r3, #1
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80035b2:	2140      	movs	r1, #64	@ 0x40
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff f8f9 	bl	80027ac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80035ba:	bf00      	nop
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	3301      	adds	r3, #1
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff f8a3 	bl	8002714 <WIZCHIP_READ>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f3      	bne.n	80035bc <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	4a11      	ldr	r2, [pc, #68]	@ (800361c <recvfrom+0x3d0>)
 80035d8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	8bfa      	ldrh	r2, [r7, #30]
 80035e0:	1a8a      	subs	r2, r1, r2
 80035e2:	b291      	uxth	r1, r2
 80035e4:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <recvfrom+0x3d0>)
 80035e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	4a0b      	ldr	r2, [pc, #44]	@ (800361c <recvfrom+0x3d0>)
 80035ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	4a09      	ldr	r2, [pc, #36]	@ (8003620 <recvfrom+0x3d4>)
 80035fa:	5cd2      	ldrb	r2, [r2, r3]
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	b2d1      	uxtb	r1, r2
 8003604:	4a06      	ldr	r2, [pc, #24]	@ (8003620 <recvfrom+0x3d4>)
 8003606:	54d1      	strb	r1, [r2, r3]
 8003608:	e003      	b.n	8003612 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	4a04      	ldr	r2, [pc, #16]	@ (8003620 <recvfrom+0x3d4>)
 800360e:	2100      	movs	r1, #0
 8003610:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8003612:	8bfb      	ldrh	r3, [r7, #30]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000a28 	.word	0x20000a28
 8003620:	20000a38 	.word	0x20000a38

08003624 <SPIReadWrite>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800362e:	bf00      	nop
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <SPIReadWrite+0x4c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d1f8      	bne.n	8003630 <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 800363e:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <SPIReadWrite+0x4c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	79fa      	ldrb	r2, [r7, #7]
 8003646:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 8003648:	bf00      	nop
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <SPIReadWrite+0x4c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d1f8      	bne.n	800364a <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 8003658:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <SPIReadWrite+0x4c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b2db      	uxtb	r3, r3
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	200000e8 	.word	0x200000e8

08003674 <wizchip_select>:

void  wizchip_select(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003678:	2200      	movs	r2, #0
 800367a:	2102      	movs	r1, #2
 800367c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003680:	f001 f9ae 	bl	80049e0 <HAL_GPIO_WritePin>
}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}

08003688 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800368c:	2201      	movs	r2, #1
 800368e:	2102      	movs	r1, #2
 8003690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003694:	f001 f9a4 	bl	80049e0 <HAL_GPIO_WritePin>
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}

0800369c <wizchip_read>:

uint8_t wizchip_read()
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 80036a2:	2000      	movs	r0, #0
 80036a4:	f7ff ffbe 	bl	8003624 <SPIReadWrite>
 80036a8:	4603      	mov	r3, r0
 80036aa:	71fb      	strb	r3, [r7, #7]
	return rb;
 80036ac:	79fb      	ldrb	r3, [r7, #7]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	4603      	mov	r3, r0
 80036be:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ffae 	bl	8003624 <SPIReadWrite>
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 80036dc:	2300      	movs	r3, #0
 80036de:	81fb      	strh	r3, [r7, #14]
 80036e0:	e00c      	b.n	80036fc <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7ff ff9e 	bl	8003624 <SPIReadWrite>
 80036e8:	4603      	mov	r3, r0
 80036ea:	461a      	mov	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	701a      	strb	r2, [r3, #0]
		pBuf++;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3301      	adds	r3, #1
 80036f4:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 80036f6:	89fb      	ldrh	r3, [r7, #14]
 80036f8:	3301      	adds	r3, #1
 80036fa:	81fb      	strh	r3, [r7, #14]
 80036fc:	89fa      	ldrh	r2, [r7, #14]
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	429a      	cmp	r2, r3
 8003702:	d3ee      	bcc.n	80036e2 <wizchip_readburst+0x12>
	}
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 800371a:	2300      	movs	r3, #0
 800371c:	81fb      	strh	r3, [r7, #14]
 800371e:	e00a      	b.n	8003736 <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff7d 	bl	8003624 <SPIReadWrite>
		pBuf++;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3301      	adds	r3, #1
 800372e:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	3301      	adds	r3, #1
 8003734:	81fb      	strh	r3, [r7, #14]
 8003736:	89fa      	ldrh	r2, [r7, #14]
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	429a      	cmp	r2, r3
 800373c:	d3f0      	bcc.n	8003720 <wizchip_writeburst+0x12>
	}
}
 800373e:	bf00      	nop
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <W5500IOInit>:

void W5500IOInit()
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA10
	 * and
	 * CS->PA11
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374e:	1d3b      	adds	r3, r7, #4
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800375c:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <W5500IOInit+0x50>)
 800375e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003760:	4a0d      	ldr	r2, [pc, #52]	@ (8003798 <W5500IOInit+0x50>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003768:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <W5500IOInit+0x50>)
 800376a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003774:	2303      	movs	r3, #3
 8003776:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003778:	2301      	movs	r3, #1
 800377a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003780:	2302      	movs	r3, #2
 8003782:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	4619      	mov	r1, r3
 8003788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800378c:	f000 ffa6 	bl	80046dc <HAL_GPIO_Init>
}
 8003790:	bf00      	nop
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000

0800379c <W5500Init>:

void W5500Init()
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 80037a2:	4b21      	ldr	r3, [pc, #132]	@ (8003828 <W5500Init+0x8c>)
 80037a4:	1d3c      	adds	r4, r7, #4
 80037a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 80037ac:	f7ff ffcc 	bl	8003748 <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default
 80037b0:	2201      	movs	r2, #1
 80037b2:	2102      	movs	r1, #2
 80037b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037b8:	f001 f912 	bl	80049e0 <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80037bc:	2200      	movs	r2, #0
 80037be:	2101      	movs	r1, #1
 80037c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037c4:	f001 f90c 	bl	80049e0 <HAL_GPIO_WritePin>
	tmp = 0xFF;
 80037c8:	23ff      	movs	r3, #255	@ 0xff
 80037ca:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 80037cc:	bf00      	nop
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	1e5a      	subs	r2, r3, #1
 80037d2:	75fa      	strb	r2, [r7, #23]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1fa      	bne.n	80037ce <W5500Init+0x32>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80037d8:	2201      	movs	r2, #1
 80037da:	2101      	movs	r1, #1
 80037dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037e0:	f001 f8fe 	bl	80049e0 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80037e4:	4911      	ldr	r1, [pc, #68]	@ (800382c <W5500Init+0x90>)
 80037e6:	4812      	ldr	r0, [pc, #72]	@ (8003830 <W5500Init+0x94>)
 80037e8:	f000 f894 	bl	8003914 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 80037ec:	4911      	ldr	r1, [pc, #68]	@ (8003834 <W5500Init+0x98>)
 80037ee:	4812      	ldr	r0, [pc, #72]	@ (8003838 <W5500Init+0x9c>)
 80037f0:	f000 f8b6 	bl	8003960 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 80037f4:	4911      	ldr	r1, [pc, #68]	@ (800383c <W5500Init+0xa0>)
 80037f6:	4812      	ldr	r0, [pc, #72]	@ (8003840 <W5500Init+0xa4>)
 80037f8:	f000 f8de 	bl	80039b8 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	2001      	movs	r0, #1
 8003802:	f000 f905 	bl	8003a10 <ctlwizchip>
 8003806:	4603      	mov	r3, r0
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d104      	bne.n	8003818 <W5500Init+0x7c>
		printf("WIZCHIP Initialized Failed.\r\n");
 800380e:	480d      	ldr	r0, [pc, #52]	@ (8003844 <W5500Init+0xa8>)
 8003810:	f003 f972 	bl	8006af8 <puts>
		while (1);
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <W5500Init+0x78>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 8003818:	480b      	ldr	r0, [pc, #44]	@ (8003848 <W5500Init+0xac>)
 800381a:	f003 f96d 	bl	8006af8 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	bf00      	nop
 8003828:	08007bac 	.word	0x08007bac
 800382c:	08003689 	.word	0x08003689
 8003830:	08003675 	.word	0x08003675
 8003834:	080036b7 	.word	0x080036b7
 8003838:	0800369d 	.word	0x0800369d
 800383c:	0800370f 	.word	0x0800370f
 8003840:	080036d1 	.word	0x080036d1
 8003844:	08007b68 	.word	0x08007b68
 8003848:	08007b88 	.word	0x08007b88

0800384c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	70fb      	strb	r3, [r7, #3]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
 80038c0:	2300      	movs	r3, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	807b      	strh	r3, [r7, #2]
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	807b      	strh	r3, [r7, #2]
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <reg_wizchip_cs_cbfunc+0x16>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800392a:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <reg_wizchip_cs_cbfunc+0x40>)
 800392c:	4a0a      	ldr	r2, [pc, #40]	@ (8003958 <reg_wizchip_cs_cbfunc+0x44>)
 800392e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003930:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <reg_wizchip_cs_cbfunc+0x40>)
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <reg_wizchip_cs_cbfunc+0x48>)
 8003934:	619a      	str	r2, [r3, #24]
 8003936:	e006      	b.n	8003946 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003938:	4a06      	ldr	r2, [pc, #24]	@ (8003954 <reg_wizchip_cs_cbfunc+0x40>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800393e:	4a05      	ldr	r2, [pc, #20]	@ (8003954 <reg_wizchip_cs_cbfunc+0x40>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6193      	str	r3, [r2, #24]
   }
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	2000003c 	.word	0x2000003c
 8003958:	08003869 	.word	0x08003869
 800395c:	08003877 	.word	0x08003877

08003960 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800396a:	bf00      	nop
 800396c:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <reg_wizchip_spi_cbfunc+0x4c>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f9      	beq.n	800396c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <reg_wizchip_spi_cbfunc+0x24>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d106      	bne.n	8003992 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <reg_wizchip_spi_cbfunc+0x4c>)
 8003986:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <reg_wizchip_spi_cbfunc+0x50>)
 8003988:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800398a:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <reg_wizchip_spi_cbfunc+0x4c>)
 800398c:	4a09      	ldr	r2, [pc, #36]	@ (80039b4 <reg_wizchip_spi_cbfunc+0x54>)
 800398e:	621a      	str	r2, [r3, #32]
 8003990:	e006      	b.n	80039a0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003992:	4a06      	ldr	r2, [pc, #24]	@ (80039ac <reg_wizchip_spi_cbfunc+0x4c>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003998:	4a04      	ldr	r2, [pc, #16]	@ (80039ac <reg_wizchip_spi_cbfunc+0x4c>)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6213      	str	r3, [r2, #32]
   }
}
 800399e:	bf00      	nop
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	2000003c 	.word	0x2000003c
 80039b0:	080038bd 	.word	0x080038bd
 80039b4:	080038cd 	.word	0x080038cd

080039b8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80039c2:	bf00      	nop
 80039c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f9      	beq.n	80039c4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <reg_wizchip_spiburst_cbfunc+0x24>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80039dc:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80039de:	4a0a      	ldr	r2, [pc, #40]	@ (8003a08 <reg_wizchip_spiburst_cbfunc+0x50>)
 80039e0:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80039e2:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80039e4:	4a09      	ldr	r2, [pc, #36]	@ (8003a0c <reg_wizchip_spiburst_cbfunc+0x54>)
 80039e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80039e8:	e006      	b.n	80039f8 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80039ea:	4a06      	ldr	r2, [pc, #24]	@ (8003a04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80039f0:	4a04      	ldr	r2, [pc, #16]	@ (8003a04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	2000003c 	.word	0x2000003c
 8003a08:	080038e3 	.word	0x080038e3
 8003a0c:	080038fb 	.word	0x080038fb

08003a10 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	f200 80c5 	bhi.w	8003bba <ctlwizchip+0x1aa>
 8003a30:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <ctlwizchip+0x28>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a7f 	.word	0x08003a7f
 8003a40:	08003aab 	.word	0x08003aab
 8003a44:	08003a9f 	.word	0x08003a9f
 8003a48:	08003ab9 	.word	0x08003ab9
 8003a4c:	08003ac5 	.word	0x08003ac5
 8003a50:	08003ad3 	.word	0x08003ad3
 8003a54:	08003af9 	.word	0x08003af9
 8003a58:	08003b1b 	.word	0x08003b1b
 8003a5c:	08003b5f 	.word	0x08003b5f
 8003a60:	08003b65 	.word	0x08003b65
 8003a64:	08003b6d 	.word	0x08003b6d
 8003a68:	08003bc1 	.word	0x08003bc1
 8003a6c:	08003b75 	.word	0x08003b75
 8003a70:	08003b83 	.word	0x08003b83
 8003a74:	08003b9f 	.word	0x08003b9f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003a78:	f000 f8e8 	bl	8003c4c <wizchip_sw_reset>
         break;
 8003a7c:	e0a1      	b.n	8003bc2 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f925 	bl	8003ce4 <wizchip_init>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	e092      	b.n	8003bc4 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f9aa 	bl	8003dfc <wizchip_clrinterrupt>
         break;
 8003aa8:	e08b      	b.n	8003bc2 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003aaa:	f000 f9db 	bl	8003e64 <wizchip_getinterrupt>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	801a      	strh	r2, [r3, #0]
         break;
 8003ab6:	e084      	b.n	8003bc2 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 f9f6 	bl	8003eae <wizchip_setinterruptmask>
         break;         
 8003ac2:	e07e      	b.n	8003bc2 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003ac4:	f000 fa0e 	bl	8003ee4 <wizchip_getinterruptmask>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	801a      	strh	r2, [r3, #0]
         break;
 8003ad0:	e077      	b.n	8003bc2 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	4619      	mov	r1, r3
 8003ade:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003ae2:	f7fe fe63 	bl	80027ac <WIZCHIP_WRITE>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	4619      	mov	r1, r3
 8003aee:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003af2:	f7fe fe5b 	bl	80027ac <WIZCHIP_WRITE>
         break;
 8003af6:	e064      	b.n	8003bc2 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003af8:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003afc:	f7fe fe0a 	bl	8002714 <WIZCHIP_READ>
 8003b00:	4603      	mov	r3, r0
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	b29c      	uxth	r4, r3
 8003b06:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003b0a:	f7fe fe03 	bl	8002714 <WIZCHIP_READ>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4423      	add	r3, r4
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	801a      	strh	r2, [r3, #0]
         break;
 8003b18:	e053      	b.n	8003bc2 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003bcc <ctlwizchip+0x1bc>)
 8003b1c:	789a      	ldrb	r2, [r3, #2]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a29      	ldr	r2, [pc, #164]	@ (8003bcc <ctlwizchip+0x1bc>)
 8003b28:	78d2      	ldrb	r2, [r2, #3]
 8003b2a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	3302      	adds	r3, #2
 8003b30:	4a26      	ldr	r2, [pc, #152]	@ (8003bcc <ctlwizchip+0x1bc>)
 8003b32:	7912      	ldrb	r2, [r2, #4]
 8003b34:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	3303      	adds	r3, #3
 8003b3a:	4a24      	ldr	r2, [pc, #144]	@ (8003bcc <ctlwizchip+0x1bc>)
 8003b3c:	7952      	ldrb	r2, [r2, #5]
 8003b3e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4a21      	ldr	r2, [pc, #132]	@ (8003bcc <ctlwizchip+0x1bc>)
 8003b46:	7992      	ldrb	r2, [r2, #6]
 8003b48:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	3305      	adds	r3, #5
 8003b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bcc <ctlwizchip+0x1bc>)
 8003b50:	79d2      	ldrb	r2, [r2, #7]
 8003b52:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	3306      	adds	r3, #6
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
         break;
 8003b5c:	e031      	b.n	8003bc2 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003b5e:	f000 fa13 	bl	8003f88 <wizphy_reset>
         break;
 8003b62:	e02e      	b.n	8003bc2 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003b64:	6838      	ldr	r0, [r7, #0]
 8003b66:	f000 fa36 	bl	8003fd6 <wizphy_setphyconf>
         break;
 8003b6a:	e02a      	b.n	8003bc2 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003b6c:	6838      	ldr	r0, [r7, #0]
 8003b6e:	f000 fa75 	bl	800405c <wizphy_getphyconf>
         break;
 8003b72:	e026      	b.n	8003bc2 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fad9 	bl	8004130 <wizphy_setphypmode>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	e020      	b.n	8003bc4 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003b82:	f000 f9e8 	bl	8003f56 <wizphy_getphypmode>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2bff      	cmp	r3, #255	@ 0xff
 8003b8e:	d102      	bne.n	8003b96 <ctlwizchip+0x186>
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295
 8003b94:	e016      	b.n	8003bc4 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	7dfa      	ldrb	r2, [r7, #23]
 8003b9a:	701a      	strb	r2, [r3, #0]
         break;
 8003b9c:	e011      	b.n	8003bc2 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003b9e:	f000 f9c4 	bl	8003f2a <wizphy_getphylink>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	2bff      	cmp	r3, #255	@ 0xff
 8003baa:	d102      	bne.n	8003bb2 <ctlwizchip+0x1a2>
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	e008      	b.n	8003bc4 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	7dfa      	ldrb	r2, [r7, #23]
 8003bb6:	701a      	strb	r2, [r3, #0]
         break;
 8003bb8:	e003      	b.n	8003bc2 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	e001      	b.n	8003bc4 <ctlwizchip+0x1b4>
         break;
 8003bc0:	bf00      	nop
   }
   return 0;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd90      	pop	{r4, r7, pc}
 8003bcc:	2000003c 	.word	0x2000003c

08003bd0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d82c      	bhi.n	8003c3c <ctlnetwork+0x6c>
 8003be2:	a201      	add	r2, pc, #4	@ (adr r2, 8003be8 <ctlnetwork+0x18>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c01 	.word	0x08003c01
 8003bec:	08003c09 	.word	0x08003c09
 8003bf0:	08003c11 	.word	0x08003c11
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c35 	.word	0x08003c35
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003c00:	6838      	ldr	r0, [r7, #0]
 8003c02:	f000 fadf 	bl	80041c4 <wizchip_setnetinfo>
         break;
 8003c06:	e01c      	b.n	8003c42 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003c08:	6838      	ldr	r0, [r7, #0]
 8003c0a:	f000 fb1b 	bl	8004244 <wizchip_getnetinfo>
         break;
 8003c0e:	e018      	b.n	8003c42 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fb55 	bl	80042c4 <wizchip_setnetmode>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	e012      	b.n	8003c44 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003c1e:	f000 fb73 	bl	8004308 <wizchip_getnetmode>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	701a      	strb	r2, [r3, #0]
         break;
 8003c2a:	e00a      	b.n	8003c42 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003c2c:	6838      	ldr	r0, [r7, #0]
 8003c2e:	f000 fb73 	bl	8004318 <wizchip_settimeout>
         break;
 8003c32:	e006      	b.n	8003c42 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003c34:	6838      	ldr	r0, [r7, #0]
 8003c36:	f000 fb90 	bl	800435a <wizchip_gettimeout>
         break;
 8003c3a:	e002      	b.n	8003c42 <ctlnetwork+0x72>
      default:
         return -1;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	e000      	b.n	8003c44 <ctlnetwork+0x74>
   }
   return 0;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003c52:	1d3b      	adds	r3, r7, #4
 8003c54:	2206      	movs	r2, #6
 8003c56:	4619      	mov	r1, r3
 8003c58:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003c5c:	f7fe fdf4 	bl	8002848 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	2204      	movs	r2, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003c6c:	f7fe fdec 	bl	8002848 <WIZCHIP_READ_BUF>
 8003c70:	f107 0310 	add.w	r3, r7, #16
 8003c74:	2204      	movs	r2, #4
 8003c76:	4619      	mov	r1, r3
 8003c78:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003c7c:	f7fe fde4 	bl	8002848 <WIZCHIP_READ_BUF>
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	2204      	movs	r2, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003c8c:	f7fe fddc 	bl	8002848 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003c90:	2180      	movs	r1, #128	@ 0x80
 8003c92:	2000      	movs	r0, #0
 8003c94:	f7fe fd8a 	bl	80027ac <WIZCHIP_WRITE>
   getMR(); // for delay
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f7fe fd3b 	bl	8002714 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	2206      	movs	r2, #6
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003ca8:	f7fe fe2e 	bl	8002908 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003cb8:	f7fe fe26 	bl	8002908 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003cc8:	f7fe fe1e 	bl	8002908 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003ccc:	f107 030c 	add.w	r3, r7, #12
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003cd8:	f7fe fe16 	bl	8002908 <WIZCHIP_WRITE_BUF>
}
 8003cdc:	bf00      	nop
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003cf2:	f7ff ffab 	bl	8003c4c <wizchip_sw_reset>
   if(txsize)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d03b      	beq.n	8003d74 <wizchip_init+0x90>
   {
      tmp = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	e015      	b.n	8003d32 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	7bbb      	ldrb	r3, [r7, #14]
 8003d12:	4413      	add	r3, r2
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	dd02      	ble.n	8003d26 <wizchip_init+0x42>
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	e066      	b.n	8003df4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	73fb      	strb	r3, [r7, #15]
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	2b07      	cmp	r3, #7
 8003d38:	dde5      	ble.n	8003d06 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
 8003d3e:	e015      	b.n	8003d6c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	3301      	adds	r3, #1
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f7fe fd26 	bl	80027ac <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d70:	2b07      	cmp	r3, #7
 8003d72:	dde5      	ble.n	8003d40 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d03b      	beq.n	8003df2 <wizchip_init+0x10e>
   {
      tmp = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e015      	b.n	8003db0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	7bbb      	ldrb	r3, [r7, #14]
 8003d90:	4413      	add	r3, r2
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d9a:	2b10      	cmp	r3, #16
 8003d9c:	dd02      	ble.n	8003da4 <wizchip_init+0xc0>
 8003d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003da2:	e027      	b.n	8003df4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	3301      	adds	r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db4:	2b07      	cmp	r3, #7
 8003db6:	dde5      	ble.n	8003d84 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e015      	b.n	8003dea <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f7fe fce7 	bl	80027ac <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	73fb      	strb	r3, [r7, #15]
 8003dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dee:	2b07      	cmp	r3, #7
 8003df0:	dde5      	ble.n	8003dbe <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	0a1b      	lsrs	r3, r3, #8
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	f023 030f 	bic.w	r3, r3, #15
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003e20:	f7fe fcc4 	bl	80027ac <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]
 8003e28:	e014      	b.n	8003e54 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003e2a:	7bba      	ldrb	r2, [r7, #14]
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	fa42 f303 	asr.w	r3, r2, r3
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <wizchip_clrinterrupt+0x52>
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3301      	adds	r3, #1
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003e46:	211f      	movs	r1, #31
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fcaf 	bl	80027ac <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	3301      	adds	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2b07      	cmp	r3, #7
 8003e58:	d9e7      	bls.n	8003e2a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003e76:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003e7a:	f7fe fc4b 	bl	8002714 <WIZCHIP_READ>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f023 030f 	bic.w	r3, r3, #15
 8003e84:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003e86:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8003e8a:	f7fe fc43 	bl	8002714 <WIZCHIP_READ>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003e92:	79bb      	ldrb	r3, [r7, #6]
 8003e94:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003e96:	88bb      	ldrh	r3, [r7, #4]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003ea4:	88bb      	ldrh	r3, [r7, #4]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003ecc:	f7fe fc6e 	bl	80027ac <WIZCHIP_WRITE>
   setSIMR(simr);
 8003ed0:	7bbb      	ldrb	r3, [r7, #14]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8003ed8:	f7fe fc68 	bl	80027ac <WIZCHIP_WRITE>
#endif   
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003ef6:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003efa:	f7fe fc0b 	bl	8002714 <WIZCHIP_READ>
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003f02:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8003f06:	f7fe fc05 	bl	8002714 <WIZCHIP_READ>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003f0e:	79bb      	ldrb	r3, [r7, #6]
 8003f10:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003f12:	88bb      	ldrh	r3, [r7, #4]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003f20:	88bb      	ldrh	r3, [r7, #4]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003f30:	2300      	movs	r3, #0
 8003f32:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003f34:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003f38:	f7fe fbec 	bl	8002714 <WIZCHIP_READ>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003f46:	2301      	movs	r3, #1
 8003f48:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003f60:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003f64:	f7fe fbd6 	bl	8002714 <WIZCHIP_READ>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f6e:	2b30      	cmp	r3, #48	@ 0x30
 8003f70:	d102      	bne.n	8003f78 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003f72:	2301      	movs	r3, #1
 8003f74:	71fb      	strb	r3, [r7, #7]
 8003f76:	e001      	b.n	8003f7c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003f8e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003f92:	f7fe fbbf 	bl	8002714 <WIZCHIP_READ>
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fa0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003faa:	f7fe fbff 	bl	80027ac <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003fae:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003fb2:	f7fe fbaf 	bl	8002714 <WIZCHIP_READ>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fc0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003fca:	f7fe fbef 	bl	80027ac <WIZCHIP_WRITE>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d104      	bne.n	8003ff4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ff0:	73fb      	strb	r3, [r7, #15]
 8003ff2:	e003      	b.n	8003ffc <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ffa:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	785b      	ldrb	r3, [r3, #1]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d104      	bne.n	800400e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e019      	b.n	8004042 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	78db      	ldrb	r3, [r3, #3]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d10d      	bne.n	8004032 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	789b      	ldrb	r3, [r3, #2]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d104      	bne.n	8004028 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	f043 0318 	orr.w	r3, r3, #24
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	e00c      	b.n	8004042 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	f043 0308 	orr.w	r3, r3, #8
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	e007      	b.n	8004042 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	789b      	ldrb	r3, [r3, #2]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d103      	bne.n	8004042 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	f043 0310 	orr.w	r3, r3, #16
 8004040:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	4619      	mov	r1, r3
 8004046:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800404a:	f7fe fbaf 	bl	80027ac <WIZCHIP_WRITE>
   wizphy_reset();
 800404e:	f7ff ff9b 	bl	8003f88 <wizphy_reset>
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004068:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800406c:	f7fe fb52 	bl	8002714 <WIZCHIP_READ>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	119b      	asrs	r3, r3, #6
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800408a:	2b20      	cmp	r3, #32
 800408c:	d001      	beq.n	8004092 <wizphy_getphyconf+0x36>
 800408e:	2b38      	cmp	r3, #56	@ 0x38
 8004090:	d103      	bne.n	800409a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	705a      	strb	r2, [r3, #1]
         break;
 8004098:	e003      	b.n	80040a2 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	705a      	strb	r2, [r3, #1]
         break;
 80040a0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040a8:	3b10      	subs	r3, #16
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	bf8c      	ite	hi
 80040ae:	2201      	movhi	r2, #1
 80040b0:	2200      	movls	r2, #0
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	d10f      	bne.n	80040d8 <wizphy_getphyconf+0x7c>
 80040b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004128 <wizphy_getphyconf+0xcc>)
 80040ba:	fa22 f303 	lsr.w	r3, r2, r3
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	709a      	strb	r2, [r3, #2]
         break;
 80040d6:	e003      	b.n	80040e0 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	709a      	strb	r2, [r3, #2]
         break;
 80040de:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040e6:	3b08      	subs	r3, #8
 80040e8:	2b18      	cmp	r3, #24
 80040ea:	bf8c      	ite	hi
 80040ec:	2201      	movhi	r2, #1
 80040ee:	2200      	movls	r2, #0
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	2a00      	cmp	r2, #0
 80040f4:	d10f      	bne.n	8004116 <wizphy_getphyconf+0xba>
 80040f6:	4a0d      	ldr	r2, [pc, #52]	@ (800412c <wizphy_getphyconf+0xd0>)
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	70da      	strb	r2, [r3, #3]
         break;
 8004114:	e003      	b.n	800411e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	70da      	strb	r2, [r3, #3]
         break;
 800411c:	bf00      	nop
   }
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	00010101 	.word	0x00010101
 800412c:	01010001 	.word	0x01010001

08004130 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800413e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004142:	f7fe fae7 	bl	8002714 <WIZCHIP_READ>
 8004146:	4603      	mov	r3, r0
 8004148:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <wizphy_setphypmode+0x2a>
 8004154:	f04f 33ff 	mov.w	r3, #4294967295
 8004158:	e030      	b.n	80041bc <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004160:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d104      	bne.n	8004172 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e003      	b.n	800417a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004178:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	4619      	mov	r1, r3
 800417e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004182:	f7fe fb13 	bl	80027ac <WIZCHIP_WRITE>
   wizphy_reset();
 8004186:	f7ff feff 	bl	8003f88 <wizphy_reset>
   tmp = getPHYCFGR();
 800418a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800418e:	f7fe fac1 	bl	8002714 <WIZCHIP_READ>
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d106      	bne.n	80041aa <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <wizphy_setphypmode+0x88>
 80041a6:	2300      	movs	r3, #0
 80041a8:	e008      	b.n	80041bc <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <wizphy_setphypmode+0x88>
 80041b4:	2300      	movs	r3, #0
 80041b6:	e001      	b.n	80041bc <wizphy_setphypmode+0x8c>
   }
   return -1;
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2206      	movs	r2, #6
 80041d0:	4619      	mov	r1, r3
 80041d2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80041d6:	f7fe fb97 	bl	8002908 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	330e      	adds	r3, #14
 80041de:	2204      	movs	r2, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80041e6:	f7fe fb8f 	bl	8002908 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	330a      	adds	r3, #10
 80041ee:	2204      	movs	r2, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80041f6:	f7fe fb87 	bl	8002908 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3306      	adds	r3, #6
 80041fe:	2204      	movs	r2, #4
 8004200:	4619      	mov	r1, r3
 8004202:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004206:	f7fe fb7f 	bl	8002908 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7c9a      	ldrb	r2, [r3, #18]
 800420e:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <wizchip_setnetinfo+0x78>)
 8004210:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7cda      	ldrb	r2, [r3, #19]
 8004216:	4b09      	ldr	r3, [pc, #36]	@ (800423c <wizchip_setnetinfo+0x78>)
 8004218:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7d1a      	ldrb	r2, [r3, #20]
 800421e:	4b07      	ldr	r3, [pc, #28]	@ (800423c <wizchip_setnetinfo+0x78>)
 8004220:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	7d5a      	ldrb	r2, [r3, #21]
 8004226:	4b05      	ldr	r3, [pc, #20]	@ (800423c <wizchip_setnetinfo+0x78>)
 8004228:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	7d9a      	ldrb	r2, [r3, #22]
 800422e:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <wizchip_setnetinfo+0x7c>)
 8004230:	701a      	strb	r2, [r3, #0]
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000a40 	.word	0x20000a40
 8004240:	20000a44 	.word	0x20000a44

08004244 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2206      	movs	r2, #6
 8004250:	4619      	mov	r1, r3
 8004252:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004256:	f7fe faf7 	bl	8002848 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	330e      	adds	r3, #14
 800425e:	2204      	movs	r2, #4
 8004260:	4619      	mov	r1, r3
 8004262:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004266:	f7fe faef 	bl	8002848 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	330a      	adds	r3, #10
 800426e:	2204      	movs	r2, #4
 8004270:	4619      	mov	r1, r3
 8004272:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004276:	f7fe fae7 	bl	8002848 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3306      	adds	r3, #6
 800427e:	2204      	movs	r2, #4
 8004280:	4619      	mov	r1, r3
 8004282:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004286:	f7fe fadf 	bl	8002848 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800428a:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <wizchip_getnetinfo+0x78>)
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004292:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <wizchip_getnetinfo+0x78>)
 8004294:	785a      	ldrb	r2, [r3, #1]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800429a:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <wizchip_getnetinfo+0x78>)
 800429c:	789a      	ldrb	r2, [r3, #2]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80042a2:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <wizchip_getnetinfo+0x78>)
 80042a4:	78da      	ldrb	r2, [r3, #3]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80042aa:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <wizchip_getnetinfo+0x7c>)
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	759a      	strb	r2, [r3, #22]
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000a40 	.word	0x20000a40
 80042c0:	20000a44 	.word	0x20000a44

080042c4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <wizchip_setnetmode+0x1e>
 80042dc:	f04f 33ff 	mov.w	r3, #4294967295
 80042e0:	e00e      	b.n	8004300 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7fe fa16 	bl	8002714 <WIZCHIP_READ>
 80042e8:	4603      	mov	r3, r0
 80042ea:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	4619      	mov	r1, r3
 80042f8:	2000      	movs	r0, #0
 80042fa:	f7fe fa57 	bl	80027ac <WIZCHIP_WRITE>
   return 0;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800430c:	2000      	movs	r0, #0
 800430e:	f7fe fa01 	bl	8002714 <WIZCHIP_READ>
 8004312:	4603      	mov	r3, r0
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}

08004318 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4619      	mov	r1, r3
 8004326:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800432a:	f7fe fa3f 	bl	80027ac <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	885b      	ldrh	r3, [r3, #2]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	b29b      	uxth	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	4619      	mov	r1, r3
 800433a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800433e:	f7fe fa35 	bl	80027ac <WIZCHIP_WRITE>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	885b      	ldrh	r3, [r3, #2]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800434e:	f7fe fa2d 	bl	80027ac <WIZCHIP_WRITE>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800435a:	b590      	push	{r4, r7, lr}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004362:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004366:	f7fe f9d5 	bl	8002714 <WIZCHIP_READ>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004372:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004376:	f7fe f9cd 	bl	8002714 <WIZCHIP_READ>
 800437a:	4603      	mov	r3, r0
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	b29c      	uxth	r4, r3
 8004380:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004384:	f7fe f9c6 	bl	8002714 <WIZCHIP_READ>
 8004388:	4603      	mov	r3, r0
 800438a:	4423      	add	r3, r4
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	805a      	strh	r2, [r3, #2]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bd90      	pop	{r4, r7, pc}
	...

0800439c <Reset_Handler>:
 800439c:	480d      	ldr	r0, [pc, #52]	@ (80043d4 <LoopForever+0x2>)
 800439e:	4685      	mov	sp, r0
 80043a0:	f7fc fd5e 	bl	8000e60 <SystemInit>
 80043a4:	480c      	ldr	r0, [pc, #48]	@ (80043d8 <LoopForever+0x6>)
 80043a6:	490d      	ldr	r1, [pc, #52]	@ (80043dc <LoopForever+0xa>)
 80043a8:	4a0d      	ldr	r2, [pc, #52]	@ (80043e0 <LoopForever+0xe>)
 80043aa:	2300      	movs	r3, #0
 80043ac:	e002      	b.n	80043b4 <LoopCopyDataInit>

080043ae <CopyDataInit>:
 80043ae:	58d4      	ldr	r4, [r2, r3]
 80043b0:	50c4      	str	r4, [r0, r3]
 80043b2:	3304      	adds	r3, #4

080043b4 <LoopCopyDataInit>:
 80043b4:	18c4      	adds	r4, r0, r3
 80043b6:	428c      	cmp	r4, r1
 80043b8:	d3f9      	bcc.n	80043ae <CopyDataInit>
 80043ba:	4a0a      	ldr	r2, [pc, #40]	@ (80043e4 <LoopForever+0x12>)
 80043bc:	4c0a      	ldr	r4, [pc, #40]	@ (80043e8 <LoopForever+0x16>)
 80043be:	2300      	movs	r3, #0
 80043c0:	e001      	b.n	80043c6 <LoopFillZerobss>

080043c2 <FillZerobss>:
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	3204      	adds	r2, #4

080043c6 <LoopFillZerobss>:
 80043c6:	42a2      	cmp	r2, r4
 80043c8:	d3fb      	bcc.n	80043c2 <FillZerobss>
 80043ca:	f002 fd85 	bl	8006ed8 <__libc_init_array>
 80043ce:	f7fc f8ef 	bl	80005b0 <main>

080043d2 <LoopForever>:
 80043d2:	e7fe      	b.n	80043d2 <LoopForever>
 80043d4:	20020000 	.word	0x20020000
 80043d8:	20000000 	.word	0x20000000
 80043dc:	200000cc 	.word	0x200000cc
 80043e0:	08007c40 	.word	0x08007c40
 80043e4:	200000cc 	.word	0x200000cc
 80043e8:	20000b98 	.word	0x20000b98

080043ec <ADC1_2_IRQHandler>:
 80043ec:	e7fe      	b.n	80043ec <ADC1_2_IRQHandler>

080043ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f8:	2003      	movs	r0, #3
 80043fa:	f000 f93d 	bl	8004678 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043fe:	2000      	movs	r0, #0
 8004400:	f000 f80e 	bl	8004420 <HAL_InitTick>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	71fb      	strb	r3, [r7, #7]
 800440e:	e001      	b.n	8004414 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004410:	f7fc fb5c 	bl	8000acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004414:	79fb      	ldrb	r3, [r7, #7]

}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800442c:	4b16      	ldr	r3, [pc, #88]	@ (8004488 <HAL_InitTick+0x68>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d022      	beq.n	800447a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004434:	4b15      	ldr	r3, [pc, #84]	@ (800448c <HAL_InitTick+0x6c>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <HAL_InitTick+0x68>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004440:	fbb1 f3f3 	udiv	r3, r1, r3
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f93a 	bl	80046c2 <HAL_SYSTICK_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10f      	bne.n	8004474 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b0f      	cmp	r3, #15
 8004458:	d809      	bhi.n	800446e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800445a:	2200      	movs	r2, #0
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	f000 f914 	bl	800468e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004466:	4a0a      	ldr	r2, [pc, #40]	@ (8004490 <HAL_InitTick+0x70>)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e007      	b.n	800447e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e004      	b.n	800447e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e001      	b.n	800447e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2000006c 	.word	0x2000006c
 800448c:	20000018 	.word	0x20000018
 8004490:	20000068 	.word	0x20000068

08004494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004498:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <HAL_IncTick+0x1c>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <HAL_IncTick+0x20>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4413      	add	r3, r2
 80044a2:	4a03      	ldr	r2, [pc, #12]	@ (80044b0 <HAL_IncTick+0x1c>)
 80044a4:	6013      	str	r3, [r2, #0]
}
 80044a6:	bf00      	nop
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	20000a48 	.word	0x20000a48
 80044b4:	2000006c 	.word	0x2000006c

080044b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return uwTick;
 80044bc:	4b03      	ldr	r3, [pc, #12]	@ (80044cc <HAL_GetTick+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000a48 	.word	0x20000a48

080044d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7ff ffee 	bl	80044b8 <HAL_GetTick>
 80044dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d004      	beq.n	80044f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ea:	4b09      	ldr	r3, [pc, #36]	@ (8004510 <HAL_Delay+0x40>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  }

   while ((HAL_GetTick() - tickstart) < wait)
 80044f4:	bf00      	nop
 80044f6:	f7ff ffdf 	bl	80044b8 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	429a      	cmp	r2, r3
 8004504:	d8f7      	bhi.n	80044f6 <HAL_Delay+0x26>
  {
  }
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	2000006c 	.word	0x2000006c

08004514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004530:	4013      	ands	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800453c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004546:	4a04      	ldr	r2, [pc, #16]	@ (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	60d3      	str	r3, [r2, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004560:	4b04      	ldr	r3, [pc, #16]	@ (8004574 <__NVIC_GetPriorityGrouping+0x18>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 0307 	and.w	r3, r3, #7
}
 800456a:	4618      	mov	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db0a      	blt.n	80045a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	490c      	ldr	r1, [pc, #48]	@ (80045c4 <__NVIC_SetPriority+0x4c>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	0112      	lsls	r2, r2, #4
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	440b      	add	r3, r1
 800459c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a0:	e00a      	b.n	80045b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4908      	ldr	r1, [pc, #32]	@ (80045c8 <__NVIC_SetPriority+0x50>)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3b04      	subs	r3, #4
 80045b0:	0112      	lsls	r2, r2, #4
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	440b      	add	r3, r1
 80045b6:	761a      	strb	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000e100 	.word	0xe000e100
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	@ 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f1c3 0307 	rsb	r3, r3, #7
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	bf28      	it	cs
 80045ea:	2304      	movcs	r3, #4
 80045ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d902      	bls.n	80045fc <NVIC_EncodePriority+0x30>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3b03      	subs	r3, #3
 80045fa:	e000      	b.n	80045fe <NVIC_EncodePriority+0x32>
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	401a      	ands	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004614:	f04f 31ff 	mov.w	r1, #4294967295
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	43d9      	mvns	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004624:	4313      	orrs	r3, r2
         );
}
 8004626:	4618      	mov	r0, r3
 8004628:	3724      	adds	r7, #36	@ 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004644:	d301      	bcc.n	800464a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004646:	2301      	movs	r3, #1
 8004648:	e00f      	b.n	800466a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800464a:	4a0a      	ldr	r2, [pc, #40]	@ (8004674 <SysTick_Config+0x40>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3b01      	subs	r3, #1
 8004650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004652:	210f      	movs	r1, #15
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	f7ff ff8e 	bl	8004578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <SysTick_Config+0x40>)
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004662:	4b04      	ldr	r3, [pc, #16]	@ (8004674 <SysTick_Config+0x40>)
 8004664:	2207      	movs	r2, #7
 8004666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	e000e010 	.word	0xe000e010

08004678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff47 	bl	8004514 <__NVIC_SetPriorityGrouping>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800469c:	f7ff ff5e 	bl	800455c <__NVIC_GetPriorityGrouping>
 80046a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f7ff ff90 	bl	80045cc <NVIC_EncodePriority>
 80046ac:	4602      	mov	r2, r0
 80046ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff5f 	bl	8004578 <__NVIC_SetPriority>
}
 80046ba:	bf00      	nop
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff ffb2 	bl	8004634 <SysTick_Config>
 80046d0:	4603      	mov	r3, r0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ea:	e15a      	b.n	80049a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2101      	movs	r1, #1
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	4013      	ands	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 814c 	beq.w	800499c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d005      	beq.n	800471c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004718:	2b02      	cmp	r3, #2
 800471a:	d130      	bne.n	800477e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	2203      	movs	r2, #3
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004752:	2201      	movs	r2, #1
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	f003 0201 	and.w	r2, r3, #1
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b03      	cmp	r3, #3
 8004788:	d017      	beq.n	80047ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	2203      	movs	r2, #3
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4013      	ands	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d123      	bne.n	800480e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	08da      	lsrs	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3208      	adds	r2, #8
 8004808:	6939      	ldr	r1, [r7, #16]
 800480a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	2203      	movs	r2, #3
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4013      	ands	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 0203 	and.w	r2, r3, #3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80a6 	beq.w	800499c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004850:	4b5b      	ldr	r3, [pc, #364]	@ (80049c0 <HAL_GPIO_Init+0x2e4>)
 8004852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004854:	4a5a      	ldr	r2, [pc, #360]	@ (80049c0 <HAL_GPIO_Init+0x2e4>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6613      	str	r3, [r2, #96]	@ 0x60
 800485c:	4b58      	ldr	r3, [pc, #352]	@ (80049c0 <HAL_GPIO_Init+0x2e4>)
 800485e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004868:	4a56      	ldr	r2, [pc, #344]	@ (80049c4 <HAL_GPIO_Init+0x2e8>)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	3302      	adds	r3, #2
 8004870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	220f      	movs	r2, #15
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004892:	d01f      	beq.n	80048d4 <HAL_GPIO_Init+0x1f8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a4c      	ldr	r2, [pc, #304]	@ (80049c8 <HAL_GPIO_Init+0x2ec>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d019      	beq.n	80048d0 <HAL_GPIO_Init+0x1f4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a4b      	ldr	r2, [pc, #300]	@ (80049cc <HAL_GPIO_Init+0x2f0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <HAL_GPIO_Init+0x1f0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a4a      	ldr	r2, [pc, #296]	@ (80049d0 <HAL_GPIO_Init+0x2f4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00d      	beq.n	80048c8 <HAL_GPIO_Init+0x1ec>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a49      	ldr	r2, [pc, #292]	@ (80049d4 <HAL_GPIO_Init+0x2f8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <HAL_GPIO_Init+0x1e8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a48      	ldr	r2, [pc, #288]	@ (80049d8 <HAL_GPIO_Init+0x2fc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d101      	bne.n	80048c0 <HAL_GPIO_Init+0x1e4>
 80048bc:	2305      	movs	r3, #5
 80048be:	e00a      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048c0:	2306      	movs	r3, #6
 80048c2:	e008      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048c4:	2304      	movs	r3, #4
 80048c6:	e006      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048c8:	2303      	movs	r3, #3
 80048ca:	e004      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e002      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048d4:	2300      	movs	r3, #0
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	f002 0203 	and.w	r2, r2, #3
 80048dc:	0092      	lsls	r2, r2, #2
 80048de:	4093      	lsls	r3, r2
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e6:	4937      	ldr	r1, [pc, #220]	@ (80049c4 <HAL_GPIO_Init+0x2e8>)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	3302      	adds	r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048f4:	4b39      	ldr	r3, [pc, #228]	@ (80049dc <HAL_GPIO_Init+0x300>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004918:	4a30      	ldr	r2, [pc, #192]	@ (80049dc <HAL_GPIO_Init+0x300>)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800491e:	4b2f      	ldr	r3, [pc, #188]	@ (80049dc <HAL_GPIO_Init+0x300>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	43db      	mvns	r3, r3
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004942:	4a26      	ldr	r2, [pc, #152]	@ (80049dc <HAL_GPIO_Init+0x300>)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004948:	4b24      	ldr	r3, [pc, #144]	@ (80049dc <HAL_GPIO_Init+0x300>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	43db      	mvns	r3, r3
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4013      	ands	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800496c:	4a1b      	ldr	r2, [pc, #108]	@ (80049dc <HAL_GPIO_Init+0x300>)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004972:	4b1a      	ldr	r3, [pc, #104]	@ (80049dc <HAL_GPIO_Init+0x300>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	43db      	mvns	r3, r3
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4013      	ands	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004996:	4a11      	ldr	r2, [pc, #68]	@ (80049dc <HAL_GPIO_Init+0x300>)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	3301      	adds	r3, #1
 80049a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f47f ae9d 	bne.w	80046ec <HAL_GPIO_Init+0x10>
  }
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40010000 	.word	0x40010000
 80049c8:	48000400 	.word	0x48000400
 80049cc:	48000800 	.word	0x48000800
 80049d0:	48000c00 	.word	0x48000c00
 80049d4:	48001000 	.word	0x48001000
 80049d8:	48001400 	.word	0x48001400
 80049dc:	40010400 	.word	0x40010400

080049e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
 80049ec:	4613      	mov	r3, r2
 80049ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049f0:	787b      	ldrb	r3, [r7, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049f6:	887a      	ldrh	r2, [r7, #2]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049fc:	e002      	b.n	8004a04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d141      	bne.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2a:	d131      	bne.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a2c:	4b47      	ldr	r3, [pc, #284]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a32:	4a46      	ldr	r2, [pc, #280]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a3c:	4b43      	ldr	r3, [pc, #268]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a44:	4a41      	ldr	r2, [pc, #260]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a4c:	4b40      	ldr	r3, [pc, #256]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2232      	movs	r2, #50	@ 0x32
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	4a3f      	ldr	r2, [pc, #252]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	0c9b      	lsrs	r3, r3, #18
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a62:	e002      	b.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6a:	4b38      	ldr	r3, [pc, #224]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a76:	d102      	bne.n	8004a7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f2      	bne.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a7e:	4b33      	ldr	r3, [pc, #204]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8a:	d158      	bne.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e057      	b.n	8004b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a90:	4b2e      	ldr	r3, [pc, #184]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a96:	4a2d      	ldr	r2, [pc, #180]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004aa0:	e04d      	b.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa8:	d141      	bne.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aaa:	4b28      	ldr	r3, [pc, #160]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab6:	d131      	bne.n	8004b1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ab8:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abe:	4a23      	ldr	r2, [pc, #140]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ac8:	4b20      	ldr	r3, [pc, #128]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ad6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2232      	movs	r2, #50	@ 0x32
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	0c9b      	lsrs	r3, r3, #18
 8004aea:	3301      	adds	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aee:	e002      	b.n	8004af6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af6:	4b15      	ldr	r3, [pc, #84]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b02:	d102      	bne.n	8004b0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f2      	bne.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b0a:	4b10      	ldr	r3, [pc, #64]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b16:	d112      	bne.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e011      	b.n	8004b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b22:	4a0a      	ldr	r2, [pc, #40]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b2c:	e007      	b.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b2e:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b36:	4a05      	ldr	r2, [pc, #20]	@ (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40007000 	.word	0x40007000
 8004b50:	20000018 	.word	0x20000018
 8004b54:	431bde83 	.word	0x431bde83

08004b58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a04      	ldr	r2, [pc, #16]	@ (8004b74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b66:	6093      	str	r3, [r2, #8]
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40007000 	.word	0x40007000

08004b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e2fe      	b.n	8005188 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d075      	beq.n	8004c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b96:	4b97      	ldr	r3, [pc, #604]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba0:	4b94      	ldr	r3, [pc, #592]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x3e>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d002      	beq.n	8004bbc <HAL_RCC_OscConfig+0x44>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d10b      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbc:	4b8d      	ldr	r3, [pc, #564]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d05b      	beq.n	8004c80 <HAL_RCC_OscConfig+0x108>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d157      	bne.n	8004c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e2d9      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bdc:	d106      	bne.n	8004bec <HAL_RCC_OscConfig+0x74>
 8004bde:	4b85      	ldr	r3, [pc, #532]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a84      	ldr	r2, [pc, #528]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e01d      	b.n	8004c28 <HAL_RCC_OscConfig+0xb0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bf4:	d10c      	bne.n	8004c10 <HAL_RCC_OscConfig+0x98>
 8004bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	4b7c      	ldr	r3, [pc, #496]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7b      	ldr	r2, [pc, #492]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e00b      	b.n	8004c28 <HAL_RCC_OscConfig+0xb0>
 8004c10:	4b78      	ldr	r3, [pc, #480]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a77      	ldr	r2, [pc, #476]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	4b75      	ldr	r3, [pc, #468]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a74      	ldr	r2, [pc, #464]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d013      	beq.n	8004c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7ff fc42 	bl	80044b8 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c38:	f7ff fc3e 	bl	80044b8 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	@ 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e29e      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0xc0>
 8004c56:	e014      	b.n	8004c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7ff fc2e 	bl	80044b8 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c60:	f7ff fc2a 	bl	80044b8 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e28a      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c72:	4b60      	ldr	r3, [pc, #384]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0xe8>
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d075      	beq.n	8004d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c8e:	4b59      	ldr	r3, [pc, #356]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c98:	4b56      	ldr	r3, [pc, #344]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b0c      	cmp	r3, #12
 8004ca6:	d102      	bne.n	8004cae <HAL_RCC_OscConfig+0x136>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d002      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x13c>
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d11f      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_OscConfig+0x154>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e25d      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ccc:	4b49      	ldr	r3, [pc, #292]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	4946      	ldr	r1, [pc, #280]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ce0:	4b45      	ldr	r3, [pc, #276]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fb9b 	bl	8004420 <HAL_InitTick>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d043      	beq.n	8004d78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e249      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d023      	beq.n	8004d44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a3c      	ldr	r2, [pc, #240]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7ff fbd6 	bl	80044b8 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d10:	f7ff fbd2 	bl	80044b8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e232      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d22:	4b34      	ldr	r3, [pc, #208]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2e:	4b31      	ldr	r3, [pc, #196]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	492d      	ldr	r1, [pc, #180]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
 8004d42:	e01a      	b.n	8004d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d44:	4b2b      	ldr	r3, [pc, #172]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a2a      	ldr	r2, [pc, #168]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004d4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7ff fbb2 	bl	80044b8 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d58:	f7ff fbae 	bl	80044b8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e20e      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d6a:	4b22      	ldr	r3, [pc, #136]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x1e0>
 8004d76:	e000      	b.n	8004d7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d041      	beq.n	8004e0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01c      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8e:	4b19      	ldr	r3, [pc, #100]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d94:	4a17      	ldr	r2, [pc, #92]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7ff fb8b 	bl	80044b8 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da6:	f7ff fb87 	bl	80044b8 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e1e7      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db8:	4b0e      	ldr	r3, [pc, #56]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0ef      	beq.n	8004da6 <HAL_RCC_OscConfig+0x22e>
 8004dc6:	e020      	b.n	8004e0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dce:	4a09      	ldr	r2, [pc, #36]	@ (8004df4 <HAL_RCC_OscConfig+0x27c>)
 8004dd0:	f023 0301 	bic.w	r3, r3, #1
 8004dd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd8:	f7ff fb6e 	bl	80044b8 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dde:	e00d      	b.n	8004dfc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de0:	f7ff fb6a 	bl	80044b8 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d906      	bls.n	8004dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e1ca      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	20000068 	.word	0x20000068
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dfc:	4b8c      	ldr	r3, [pc, #560]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1ea      	bne.n	8004de0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80a6 	beq.w	8004f64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e1c:	4b84      	ldr	r3, [pc, #528]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_OscConfig+0x2b4>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <HAL_RCC_OscConfig+0x2b6>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00d      	beq.n	8004e4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e32:	4b7f      	ldr	r3, [pc, #508]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e36:	4a7e      	ldr	r2, [pc, #504]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e3e:	4b7c      	ldr	r3, [pc, #496]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e4e:	4b79      	ldr	r3, [pc, #484]	@ (8005034 <HAL_RCC_OscConfig+0x4bc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d118      	bne.n	8004e8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e5a:	4b76      	ldr	r3, [pc, #472]	@ (8005034 <HAL_RCC_OscConfig+0x4bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a75      	ldr	r2, [pc, #468]	@ (8005034 <HAL_RCC_OscConfig+0x4bc>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e66:	f7ff fb27 	bl	80044b8 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6e:	f7ff fb23 	bl	80044b8 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e183      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e80:	4b6c      	ldr	r3, [pc, #432]	@ (8005034 <HAL_RCC_OscConfig+0x4bc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d108      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x32e>
 8004e94:	4b66      	ldr	r3, [pc, #408]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	4a65      	ldr	r2, [pc, #404]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea4:	e024      	b.n	8004ef0 <HAL_RCC_OscConfig+0x378>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b05      	cmp	r3, #5
 8004eac:	d110      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x358>
 8004eae:	4b60      	ldr	r3, [pc, #384]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb4:	4a5e      	ldr	r2, [pc, #376]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004eb6:	f043 0304 	orr.w	r3, r3, #4
 8004eba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ece:	e00f      	b.n	8004ef0 <HAL_RCC_OscConfig+0x378>
 8004ed0:	4b57      	ldr	r3, [pc, #348]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	4a56      	ldr	r2, [pc, #344]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee0:	4b53      	ldr	r3, [pc, #332]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee6:	4a52      	ldr	r2, [pc, #328]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d016      	beq.n	8004f26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef8:	f7ff fade 	bl	80044b8 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f00:	f7ff fada 	bl	80044b8 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e138      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f16:	4b46      	ldr	r3, [pc, #280]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ed      	beq.n	8004f00 <HAL_RCC_OscConfig+0x388>
 8004f24:	e015      	b.n	8004f52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f26:	f7ff fac7 	bl	80044b8 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f2c:	e00a      	b.n	8004f44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7ff fac3 	bl	80044b8 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e121      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f44:	4b3a      	ldr	r3, [pc, #232]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1ed      	bne.n	8004f2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f52:	7ffb      	ldrb	r3, [r7, #31]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d105      	bne.n	8004f64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f58:	4b35      	ldr	r3, [pc, #212]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	4a34      	ldr	r2, [pc, #208]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d03c      	beq.n	8004fea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01c      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f78:	4b2d      	ldr	r3, [pc, #180]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7ff fa96 	bl	80044b8 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f90:	f7ff fa92 	bl	80044b8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0f2      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fa2:	4b23      	ldr	r3, [pc, #140]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ef      	beq.n	8004f90 <HAL_RCC_OscConfig+0x418>
 8004fb0:	e01b      	b.n	8004fea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc2:	f7ff fa79 	bl	80044b8 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fca:	f7ff fa75 	bl	80044b8 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e0d5      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fdc:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ef      	bne.n	8004fca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80c9 	beq.w	8005186 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 030c 	and.w	r3, r3, #12
 8004ffc:	2b0c      	cmp	r3, #12
 8004ffe:	f000 8083 	beq.w	8005108 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d15e      	bne.n	80050c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a08      	ldr	r2, [pc, #32]	@ (8005030 <HAL_RCC_OscConfig+0x4b8>)
 8005010:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005016:	f7ff fa4f 	bl	80044b8 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501c:	e00c      	b.n	8005038 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501e:	f7ff fa4b 	bl	80044b8 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d905      	bls.n	8005038 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e0ab      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
 8005030:	40021000 	.word	0x40021000
 8005034:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005038:	4b55      	ldr	r3, [pc, #340]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1ec      	bne.n	800501e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005044:	4b52      	ldr	r3, [pc, #328]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	4b52      	ldr	r3, [pc, #328]	@ (8005194 <HAL_RCC_OscConfig+0x61c>)
 800504a:	4013      	ands	r3, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6a11      	ldr	r1, [r2, #32]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005054:	3a01      	subs	r2, #1
 8005056:	0112      	lsls	r2, r2, #4
 8005058:	4311      	orrs	r1, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800505e:	0212      	lsls	r2, r2, #8
 8005060:	4311      	orrs	r1, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005066:	0852      	lsrs	r2, r2, #1
 8005068:	3a01      	subs	r2, #1
 800506a:	0552      	lsls	r2, r2, #21
 800506c:	4311      	orrs	r1, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005072:	0852      	lsrs	r2, r2, #1
 8005074:	3a01      	subs	r2, #1
 8005076:	0652      	lsls	r2, r2, #25
 8005078:	4311      	orrs	r1, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800507e:	06d2      	lsls	r2, r2, #27
 8005080:	430a      	orrs	r2, r1
 8005082:	4943      	ldr	r1, [pc, #268]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 8005084:	4313      	orrs	r3, r2
 8005086:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005088:	4b41      	ldr	r3, [pc, #260]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a40      	ldr	r2, [pc, #256]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 800508e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005092:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005094:	4b3e      	ldr	r3, [pc, #248]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a3d      	ldr	r2, [pc, #244]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 800509a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800509e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7ff fa0a 	bl	80044b8 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7ff fa06 	bl	80044b8 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e066      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ba:	4b35      	ldr	r3, [pc, #212]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x530>
 80050c6:	e05e      	b.n	8005186 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c8:	4b31      	ldr	r3, [pc, #196]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a30      	ldr	r2, [pc, #192]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 80050ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7ff f9f0 	bl	80044b8 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7ff f9ec 	bl	80044b8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e04c      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ee:	4b28      	ldr	r3, [pc, #160]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050fa:	4b25      	ldr	r3, [pc, #148]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	4924      	ldr	r1, [pc, #144]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 8005100:	4b25      	ldr	r3, [pc, #148]	@ (8005198 <HAL_RCC_OscConfig+0x620>)
 8005102:	4013      	ands	r3, r2
 8005104:	60cb      	str	r3, [r1, #12]
 8005106:	e03e      	b.n	8005186 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e039      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005114:	4b1e      	ldr	r3, [pc, #120]	@ (8005190 <HAL_RCC_OscConfig+0x618>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 0203 	and.w	r2, r3, #3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	429a      	cmp	r2, r3
 8005126:	d12c      	bne.n	8005182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	3b01      	subs	r3, #1
 8005134:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d123      	bne.n	8005182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d11b      	bne.n	8005182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d113      	bne.n	8005182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	3b01      	subs	r3, #1
 8005168:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d109      	bne.n	8005182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	3b01      	subs	r3, #1
 800517c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d001      	beq.n	8005186 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40021000 	.word	0x40021000
 8005194:	019f800c 	.word	0x019f800c
 8005198:	feeefffc 	.word	0xfeeefffc

0800519c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e11e      	b.n	80053f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b4:	4b91      	ldr	r3, [pc, #580]	@ (80053fc <HAL_RCC_ClockConfig+0x260>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d910      	bls.n	80051e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c2:	4b8e      	ldr	r3, [pc, #568]	@ (80053fc <HAL_RCC_ClockConfig+0x260>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 020f 	bic.w	r2, r3, #15
 80051ca:	498c      	ldr	r1, [pc, #560]	@ (80053fc <HAL_RCC_ClockConfig+0x260>)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b8a      	ldr	r3, [pc, #552]	@ (80053fc <HAL_RCC_ClockConfig+0x260>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e106      	b.n	80053f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d073      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d129      	bne.n	800524c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f8:	4b81      	ldr	r3, [pc, #516]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0f4      	b.n	80053f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005208:	f000 f99e 	bl	8005548 <RCC_GetSysClockFreqFromPLLSource>
 800520c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4a7c      	ldr	r2, [pc, #496]	@ (8005404 <HAL_RCC_ClockConfig+0x268>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d93f      	bls.n	8005296 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005216:	4b7a      	ldr	r3, [pc, #488]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800522a:	2b00      	cmp	r3, #0
 800522c:	d033      	beq.n	8005296 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005232:	2b00      	cmp	r3, #0
 8005234:	d12f      	bne.n	8005296 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005236:	4b72      	ldr	r3, [pc, #456]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800523e:	4a70      	ldr	r2, [pc, #448]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005244:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005246:	2380      	movs	r3, #128	@ 0x80
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e024      	b.n	8005296 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d107      	bne.n	8005264 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005254:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0c6      	b.n	80053f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005264:	4b66      	ldr	r3, [pc, #408]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0be      	b.n	80053f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005274:	f000 f8ce 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8005278:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4a61      	ldr	r2, [pc, #388]	@ (8005404 <HAL_RCC_ClockConfig+0x268>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d909      	bls.n	8005296 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005282:	4b5f      	ldr	r3, [pc, #380]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800528a:	4a5d      	ldr	r2, [pc, #372]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 800528c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005290:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005292:	2380      	movs	r3, #128	@ 0x80
 8005294:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005296:	4b5a      	ldr	r3, [pc, #360]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f023 0203 	bic.w	r2, r3, #3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4957      	ldr	r1, [pc, #348]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a8:	f7ff f906 	bl	80044b8 <HAL_GetTick>
 80052ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ae:	e00a      	b.n	80052c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b0:	f7ff f902 	bl	80044b8 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052be:	4293      	cmp	r3, r2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e095      	b.n	80053f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 020c 	and.w	r2, r3, #12
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d1eb      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d023      	beq.n	800532c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f0:	4b43      	ldr	r3, [pc, #268]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4a42      	ldr	r2, [pc, #264]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 80052f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005308:	4b3d      	ldr	r3, [pc, #244]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005310:	4a3b      	ldr	r2, [pc, #236]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005312:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005316:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005318:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4936      	ldr	r1, [pc, #216]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005326:	4313      	orrs	r3, r2
 8005328:	608b      	str	r3, [r1, #8]
 800532a:	e008      	b.n	800533e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b80      	cmp	r3, #128	@ 0x80
 8005330:	d105      	bne.n	800533e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005332:	4b33      	ldr	r3, [pc, #204]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	4a32      	ldr	r2, [pc, #200]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005338:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800533c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800533e:	4b2f      	ldr	r3, [pc, #188]	@ (80053fc <HAL_RCC_ClockConfig+0x260>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d21d      	bcs.n	8005388 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534c:	4b2b      	ldr	r3, [pc, #172]	@ (80053fc <HAL_RCC_ClockConfig+0x260>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f023 020f 	bic.w	r2, r3, #15
 8005354:	4929      	ldr	r1, [pc, #164]	@ (80053fc <HAL_RCC_ClockConfig+0x260>)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800535c:	f7ff f8ac 	bl	80044b8 <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	e00a      	b.n	800537a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005364:	f7ff f8a8 	bl	80044b8 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e03b      	b.n	80053f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537a:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <HAL_RCC_ClockConfig+0x260>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d1ed      	bne.n	8005364 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005394:	4b1a      	ldr	r3, [pc, #104]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	4917      	ldr	r1, [pc, #92]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d009      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053b2:	4b13      	ldr	r3, [pc, #76]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	490f      	ldr	r1, [pc, #60]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053c6:	f000 f825 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80053ca:	4602      	mov	r2, r0
 80053cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005400 <HAL_RCC_ClockConfig+0x264>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	490c      	ldr	r1, [pc, #48]	@ (8005408 <HAL_RCC_ClockConfig+0x26c>)
 80053d8:	5ccb      	ldrb	r3, [r1, r3]
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	fa22 f303 	lsr.w	r3, r2, r3
 80053e2:	4a0a      	ldr	r2, [pc, #40]	@ (800540c <HAL_RCC_ClockConfig+0x270>)
 80053e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005410 <HAL_RCC_ClockConfig+0x274>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff f818 	bl	8004420 <HAL_InitTick>
 80053f0:	4603      	mov	r3, r0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40022000 	.word	0x40022000
 8005400:	40021000 	.word	0x40021000
 8005404:	04c4b400 	.word	0x04c4b400
 8005408:	08007bbc 	.word	0x08007bbc
 800540c:	20000018 	.word	0x20000018
 8005410:	20000068 	.word	0x20000068

08005414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800541a:	4b2c      	ldr	r3, [pc, #176]	@ (80054cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b04      	cmp	r3, #4
 8005424:	d102      	bne.n	800542c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005426:	4b2a      	ldr	r3, [pc, #168]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	e047      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800542c:	4b27      	ldr	r3, [pc, #156]	@ (80054cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 030c 	and.w	r3, r3, #12
 8005434:	2b08      	cmp	r3, #8
 8005436:	d102      	bne.n	800543e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005438:	4b26      	ldr	r3, [pc, #152]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	e03e      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800543e:	4b23      	ldr	r3, [pc, #140]	@ (80054cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	2b0c      	cmp	r3, #12
 8005448:	d136      	bne.n	80054b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800544a:	4b20      	ldr	r3, [pc, #128]	@ (80054cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005454:	4b1d      	ldr	r3, [pc, #116]	@ (80054cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	3301      	adds	r3, #1
 8005460:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d10c      	bne.n	8005482 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005468:	4a1a      	ldr	r2, [pc, #104]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	4a16      	ldr	r2, [pc, #88]	@ (80054cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005472:	68d2      	ldr	r2, [r2, #12]
 8005474:	0a12      	lsrs	r2, r2, #8
 8005476:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	617b      	str	r3, [r7, #20]
      break;
 8005480:	e00c      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005482:	4a13      	ldr	r2, [pc, #76]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	fbb2 f3f3 	udiv	r3, r2, r3
 800548a:	4a10      	ldr	r2, [pc, #64]	@ (80054cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800548c:	68d2      	ldr	r2, [r2, #12]
 800548e:	0a12      	lsrs	r2, r2, #8
 8005490:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005494:	fb02 f303 	mul.w	r3, r2, r3
 8005498:	617b      	str	r3, [r7, #20]
      break;
 800549a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800549c:	4b0b      	ldr	r3, [pc, #44]	@ (80054cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	0e5b      	lsrs	r3, r3, #25
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	3301      	adds	r3, #1
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	e001      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054bc:	693b      	ldr	r3, [r7, #16]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	00f42400 	.word	0x00f42400
 80054d4:	016e3600 	.word	0x016e3600

080054d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054dc:	4b03      	ldr	r3, [pc, #12]	@ (80054ec <HAL_RCC_GetHCLKFreq+0x14>)
 80054de:	681b      	ldr	r3, [r3, #0]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20000018 	.word	0x20000018

080054f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054f4:	f7ff fff0 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 80054f8:	4602      	mov	r2, r0
 80054fa:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	4904      	ldr	r1, [pc, #16]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005506:	5ccb      	ldrb	r3, [r1, r3]
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	08007bcc 	.word	0x08007bcc

0800551c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005520:	f7ff ffda 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	4b06      	ldr	r3, [pc, #24]	@ (8005540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	0adb      	lsrs	r3, r3, #11
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	4904      	ldr	r1, [pc, #16]	@ (8005544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005532:	5ccb      	ldrb	r3, [r1, r3]
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40021000 	.word	0x40021000
 8005544:	08007bcc 	.word	0x08007bcc

08005548 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800554e:	4b1e      	ldr	r3, [pc, #120]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005558:	4b1b      	ldr	r3, [pc, #108]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	091b      	lsrs	r3, r3, #4
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	3301      	adds	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d10c      	bne.n	8005586 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800556c:	4a17      	ldr	r2, [pc, #92]	@ (80055cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	4a14      	ldr	r2, [pc, #80]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005576:	68d2      	ldr	r2, [r2, #12]
 8005578:	0a12      	lsrs	r2, r2, #8
 800557a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	617b      	str	r3, [r7, #20]
    break;
 8005584:	e00c      	b.n	80055a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005586:	4a12      	ldr	r2, [pc, #72]	@ (80055d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	4a0e      	ldr	r2, [pc, #56]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005590:	68d2      	ldr	r2, [r2, #12]
 8005592:	0a12      	lsrs	r2, r2, #8
 8005594:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]
    break;
 800559e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055a0:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	0e5b      	lsrs	r3, r3, #25
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	3301      	adds	r3, #1
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80055ba:	687b      	ldr	r3, [r7, #4]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40021000 	.word	0x40021000
 80055cc:	016e3600 	.word	0x016e3600
 80055d0:	00f42400 	.word	0x00f42400

080055d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055dc:	2300      	movs	r3, #0
 80055de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055e0:	2300      	movs	r3, #0
 80055e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8098 	beq.w	8005722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f2:	2300      	movs	r3, #0
 80055f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f6:	4b43      	ldr	r3, [pc, #268]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10d      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005602:	4b40      	ldr	r3, [pc, #256]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005606:	4a3f      	ldr	r2, [pc, #252]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800560c:	6593      	str	r3, [r2, #88]	@ 0x58
 800560e:	4b3d      	ldr	r3, [pc, #244]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561a:	2301      	movs	r3, #1
 800561c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800561e:	4b3a      	ldr	r3, [pc, #232]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a39      	ldr	r2, [pc, #228]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800562a:	f7fe ff45 	bl	80044b8 <HAL_GetTick>
 800562e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005630:	e009      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005632:	f7fe ff41 	bl	80044b8 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d902      	bls.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	74fb      	strb	r3, [r7, #19]
        break;
 8005644:	e005      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005646:	4b30      	ldr	r3, [pc, #192]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0ef      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005652:	7cfb      	ldrb	r3, [r7, #19]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d159      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005658:	4b2a      	ldr	r3, [pc, #168]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005662:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01e      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	429a      	cmp	r2, r3
 8005672:	d019      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005674:	4b23      	ldr	r3, [pc, #140]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800567e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005680:	4b20      	ldr	r3, [pc, #128]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005686:	4a1f      	ldr	r2, [pc, #124]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800568c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005690:	4b1c      	ldr	r3, [pc, #112]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005696:	4a1b      	ldr	r2, [pc, #108]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800569c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056a0:	4a18      	ldr	r2, [pc, #96]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fe ff01 	bl	80044b8 <HAL_GetTick>
 80056b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b8:	e00b      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7fe fefd 	bl	80044b8 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d902      	bls.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	74fb      	strb	r3, [r7, #19]
            break;
 80056d0:	e006      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0ec      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e6:	4b07      	ldr	r3, [pc, #28]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f4:	4903      	ldr	r1, [pc, #12]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80056fc:	e008      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	74bb      	strb	r3, [r7, #18]
 8005702:	e005      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005704:	40021000 	.word	0x40021000
 8005708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005710:	7c7b      	ldrb	r3, [r7, #17]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d105      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005716:	4ba7      	ldr	r3, [pc, #668]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571a:	4aa6      	ldr	r2, [pc, #664]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005720:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800572e:	4ba1      	ldr	r3, [pc, #644]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005734:	f023 0203 	bic.w	r2, r3, #3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	499d      	ldr	r1, [pc, #628]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005750:	4b98      	ldr	r3, [pc, #608]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	f023 020c 	bic.w	r2, r3, #12
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	4995      	ldr	r1, [pc, #596]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005772:	4b90      	ldr	r3, [pc, #576]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005778:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	498c      	ldr	r1, [pc, #560]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005794:	4b87      	ldr	r3, [pc, #540]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	4984      	ldr	r1, [pc, #528]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057b6:	4b7f      	ldr	r3, [pc, #508]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	497b      	ldr	r1, [pc, #492]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057d8:	4b76      	ldr	r3, [pc, #472]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	4973      	ldr	r1, [pc, #460]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057fa:	4b6e      	ldr	r3, [pc, #440]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005800:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	496a      	ldr	r1, [pc, #424]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800581c:	4b65      	ldr	r3, [pc, #404]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005822:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	4962      	ldr	r1, [pc, #392]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800583e:	4b5d      	ldr	r3, [pc, #372]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005844:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	4959      	ldr	r1, [pc, #356]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005860:	4b54      	ldr	r3, [pc, #336]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005862:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005866:	f023 0203 	bic.w	r2, r3, #3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586e:	4951      	ldr	r1, [pc, #324]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005882:	4b4c      	ldr	r3, [pc, #304]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005888:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	4948      	ldr	r1, [pc, #288]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d015      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058a4:	4b43      	ldr	r3, [pc, #268]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b2:	4940      	ldr	r1, [pc, #256]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c2:	d105      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c4:	4b3b      	ldr	r3, [pc, #236]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a3a      	ldr	r2, [pc, #232]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d015      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058dc:	4b35      	ldr	r3, [pc, #212]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ea:	4932      	ldr	r1, [pc, #200]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058fa:	d105      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058fc:	4b2d      	ldr	r3, [pc, #180]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4a2c      	ldr	r2, [pc, #176]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005906:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d015      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005914:	4b27      	ldr	r3, [pc, #156]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005922:	4924      	ldr	r1, [pc, #144]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005932:	d105      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005934:	4b1f      	ldr	r3, [pc, #124]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4a1e      	ldr	r2, [pc, #120]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800593e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800594c:	4b19      	ldr	r3, [pc, #100]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005952:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595a:	4916      	ldr	r1, [pc, #88]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800596a:	d105      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596c:	4b11      	ldr	r3, [pc, #68]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4a10      	ldr	r2, [pc, #64]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005976:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d019      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005984:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	4908      	ldr	r1, [pc, #32]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059a2:	d109      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a4:	4b03      	ldr	r3, [pc, #12]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a02      	ldr	r2, [pc, #8]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ae:	60d3      	str	r3, [r2, #12]
 80059b0:	e002      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80059b2:	bf00      	nop
 80059b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d015      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059c4:	4b29      	ldr	r3, [pc, #164]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d2:	4926      	ldr	r1, [pc, #152]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059e2:	d105      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059e4:	4b21      	ldr	r3, [pc, #132]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4a20      	ldr	r2, [pc, #128]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d015      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80059fc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a02:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a0a:	4918      	ldr	r1, [pc, #96]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1a:	d105      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a1c:	4b13      	ldr	r3, [pc, #76]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a12      	ldr	r2, [pc, #72]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a26:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d015      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a34:	4b0d      	ldr	r3, [pc, #52]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a42:	490a      	ldr	r1, [pc, #40]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a52:	d105      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a54:	4b05      	ldr	r3, [pc, #20]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4a04      	ldr	r2, [pc, #16]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005a60:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000

08005a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e09d      	b.n	8005bbe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d108      	bne.n	8005a9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a92:	d009      	beq.n	8005aa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	61da      	str	r2, [r3, #28]
 8005a9a:	e005      	b.n	8005aa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb f826 	bl	8000b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ade:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ae8:	d902      	bls.n	8005af0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e002      	b.n	8005af6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005af4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005afe:	d007      	beq.n	8005b10 <HAL_SPI_Init+0xa0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b08:	d002      	beq.n	8005b10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b52:	ea42 0103 	orr.w	r1, r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	f003 0204 	and.w	r2, r3, #4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b8c:	ea42 0103 	orr.w	r1, r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e042      	b.n	8005c5e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fa fff2 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2224      	movs	r2, #36	@ 0x24
 8005bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fb25 	bl	8006260 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f826 	bl	8005c68 <UART_SetConfig>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e01b      	b.n	8005c5e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fba4 	bl	80063a4 <UART_CheckIdleState>
 8005c5c:	4603      	mov	r3, r0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c6c:	b08c      	sub	sp, #48	@ 0x30
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	431a      	orrs	r2, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4baa      	ldr	r3, [pc, #680]	@ (8005f40 <UART_SetConfig+0x2d8>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a9f      	ldr	r2, [pc, #636]	@ (8005f44 <UART_SetConfig+0x2dc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d004      	beq.n	8005cd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005cde:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf2:	f023 010f 	bic.w	r1, r3, #15
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a90      	ldr	r2, [pc, #576]	@ (8005f48 <UART_SetConfig+0x2e0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d125      	bne.n	8005d58 <UART_SetConfig+0xf0>
 8005d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8005f4c <UART_SetConfig+0x2e4>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d81a      	bhi.n	8005d50 <UART_SetConfig+0xe8>
 8005d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d20 <UART_SetConfig+0xb8>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	08005d39 	.word	0x08005d39
 8005d2c:	08005d49 	.word	0x08005d49
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d36:	e116      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d3e:	e112      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d46:	e10e      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4e:	e10a      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d56:	e106      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a7c      	ldr	r2, [pc, #496]	@ (8005f50 <UART_SetConfig+0x2e8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d138      	bne.n	8005dd4 <UART_SetConfig+0x16c>
 8005d62:	4b7a      	ldr	r3, [pc, #488]	@ (8005f4c <UART_SetConfig+0x2e4>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d68:	f003 030c 	and.w	r3, r3, #12
 8005d6c:	2b0c      	cmp	r3, #12
 8005d6e:	d82d      	bhi.n	8005dcc <UART_SetConfig+0x164>
 8005d70:	a201      	add	r2, pc, #4	@ (adr r2, 8005d78 <UART_SetConfig+0x110>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005dad 	.word	0x08005dad
 8005d7c:	08005dcd 	.word	0x08005dcd
 8005d80:	08005dcd 	.word	0x08005dcd
 8005d84:	08005dcd 	.word	0x08005dcd
 8005d88:	08005dbd 	.word	0x08005dbd
 8005d8c:	08005dcd 	.word	0x08005dcd
 8005d90:	08005dcd 	.word	0x08005dcd
 8005d94:	08005dcd 	.word	0x08005dcd
 8005d98:	08005db5 	.word	0x08005db5
 8005d9c:	08005dcd 	.word	0x08005dcd
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dc5 	.word	0x08005dc5
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db2:	e0d8      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005db4:	2302      	movs	r3, #2
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dba:	e0d4      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc2:	e0d0      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dca:	e0cc      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd2:	e0c8      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a5e      	ldr	r2, [pc, #376]	@ (8005f54 <UART_SetConfig+0x2ec>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d125      	bne.n	8005e2a <UART_SetConfig+0x1c2>
 8005dde:	4b5b      	ldr	r3, [pc, #364]	@ (8005f4c <UART_SetConfig+0x2e4>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005de8:	2b30      	cmp	r3, #48	@ 0x30
 8005dea:	d016      	beq.n	8005e1a <UART_SetConfig+0x1b2>
 8005dec:	2b30      	cmp	r3, #48	@ 0x30
 8005dee:	d818      	bhi.n	8005e22 <UART_SetConfig+0x1ba>
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d00a      	beq.n	8005e0a <UART_SetConfig+0x1a2>
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d814      	bhi.n	8005e22 <UART_SetConfig+0x1ba>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <UART_SetConfig+0x19a>
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d008      	beq.n	8005e12 <UART_SetConfig+0x1aa>
 8005e00:	e00f      	b.n	8005e22 <UART_SetConfig+0x1ba>
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e08:	e0ad      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e10:	e0a9      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e12:	2304      	movs	r3, #4
 8005e14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e18:	e0a5      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e20:	e0a1      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e22:	2310      	movs	r3, #16
 8005e24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e28:	e09d      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8005f58 <UART_SetConfig+0x2f0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d125      	bne.n	8005e80 <UART_SetConfig+0x218>
 8005e34:	4b45      	ldr	r3, [pc, #276]	@ (8005f4c <UART_SetConfig+0x2e4>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e40:	d016      	beq.n	8005e70 <UART_SetConfig+0x208>
 8005e42:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e44:	d818      	bhi.n	8005e78 <UART_SetConfig+0x210>
 8005e46:	2b80      	cmp	r3, #128	@ 0x80
 8005e48:	d00a      	beq.n	8005e60 <UART_SetConfig+0x1f8>
 8005e4a:	2b80      	cmp	r3, #128	@ 0x80
 8005e4c:	d814      	bhi.n	8005e78 <UART_SetConfig+0x210>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <UART_SetConfig+0x1f0>
 8005e52:	2b40      	cmp	r3, #64	@ 0x40
 8005e54:	d008      	beq.n	8005e68 <UART_SetConfig+0x200>
 8005e56:	e00f      	b.n	8005e78 <UART_SetConfig+0x210>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5e:	e082      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e60:	2302      	movs	r3, #2
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e66:	e07e      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6e:	e07a      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e70:	2308      	movs	r3, #8
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e076      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	e072      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a35      	ldr	r2, [pc, #212]	@ (8005f5c <UART_SetConfig+0x2f4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d12a      	bne.n	8005ee0 <UART_SetConfig+0x278>
 8005e8a:	4b30      	ldr	r3, [pc, #192]	@ (8005f4c <UART_SetConfig+0x2e4>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e98:	d01a      	beq.n	8005ed0 <UART_SetConfig+0x268>
 8005e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e9e:	d81b      	bhi.n	8005ed8 <UART_SetConfig+0x270>
 8005ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ea4:	d00c      	beq.n	8005ec0 <UART_SetConfig+0x258>
 8005ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eaa:	d815      	bhi.n	8005ed8 <UART_SetConfig+0x270>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <UART_SetConfig+0x250>
 8005eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eb4:	d008      	beq.n	8005ec8 <UART_SetConfig+0x260>
 8005eb6:	e00f      	b.n	8005ed8 <UART_SetConfig+0x270>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ebe:	e052      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec6:	e04e      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ece:	e04a      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed6:	e046      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ede:	e042      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a17      	ldr	r2, [pc, #92]	@ (8005f44 <UART_SetConfig+0x2dc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d13a      	bne.n	8005f60 <UART_SetConfig+0x2f8>
 8005eea:	4b18      	ldr	r3, [pc, #96]	@ (8005f4c <UART_SetConfig+0x2e4>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ef4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ef8:	d01a      	beq.n	8005f30 <UART_SetConfig+0x2c8>
 8005efa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005efe:	d81b      	bhi.n	8005f38 <UART_SetConfig+0x2d0>
 8005f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f04:	d00c      	beq.n	8005f20 <UART_SetConfig+0x2b8>
 8005f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f0a:	d815      	bhi.n	8005f38 <UART_SetConfig+0x2d0>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <UART_SetConfig+0x2b0>
 8005f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f14:	d008      	beq.n	8005f28 <UART_SetConfig+0x2c0>
 8005f16:	e00f      	b.n	8005f38 <UART_SetConfig+0x2d0>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1e:	e022      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005f20:	2302      	movs	r3, #2
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f26:	e01e      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2e:	e01a      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005f30:	2308      	movs	r3, #8
 8005f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f36:	e016      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3e:	e012      	b.n	8005f66 <UART_SetConfig+0x2fe>
 8005f40:	cfff69f3 	.word	0xcfff69f3
 8005f44:	40008000 	.word	0x40008000
 8005f48:	40013800 	.word	0x40013800
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	40004400 	.word	0x40004400
 8005f54:	40004800 	.word	0x40004800
 8005f58:	40004c00 	.word	0x40004c00
 8005f5c:	40005000 	.word	0x40005000
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4aae      	ldr	r2, [pc, #696]	@ (8006224 <UART_SetConfig+0x5bc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	f040 8097 	bne.w	80060a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d823      	bhi.n	8005fc2 <UART_SetConfig+0x35a>
 8005f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f80 <UART_SetConfig+0x318>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005fa5 	.word	0x08005fa5
 8005f84:	08005fc3 	.word	0x08005fc3
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fc3 	.word	0x08005fc3
 8005f90:	08005fb3 	.word	0x08005fb3
 8005f94:	08005fc3 	.word	0x08005fc3
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005fc3 	.word	0x08005fc3
 8005fa0:	08005fbb 	.word	0x08005fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa4:	f7ff faa4 	bl	80054f0 <HAL_RCC_GetPCLK1Freq>
 8005fa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005faa:	e010      	b.n	8005fce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fac:	4b9e      	ldr	r3, [pc, #632]	@ (8006228 <UART_SetConfig+0x5c0>)
 8005fae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fb0:	e00d      	b.n	8005fce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb2:	f7ff fa2f 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8005fb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fb8:	e009      	b.n	8005fce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fc0:	e005      	b.n	8005fce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8130 	beq.w	8006236 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	4a94      	ldr	r2, [pc, #592]	@ (800622c <UART_SetConfig+0x5c4>)
 8005fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	4413      	add	r3, r2
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d305      	bcc.n	8006006 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	429a      	cmp	r2, r3
 8006004:	d903      	bls.n	800600e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800600c:	e113      	b.n	8006236 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	2200      	movs	r2, #0
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	60fa      	str	r2, [r7, #12]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	4a84      	ldr	r2, [pc, #528]	@ (800622c <UART_SetConfig+0x5c4>)
 800601c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006020:	b29b      	uxth	r3, r3
 8006022:	2200      	movs	r2, #0
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006030:	f7fa f946 	bl	80002c0 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	020b      	lsls	r3, r1, #8
 8006046:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800604a:	0202      	lsls	r2, r0, #8
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	6849      	ldr	r1, [r1, #4]
 8006050:	0849      	lsrs	r1, r1, #1
 8006052:	2000      	movs	r0, #0
 8006054:	460c      	mov	r4, r1
 8006056:	4605      	mov	r5, r0
 8006058:	eb12 0804 	adds.w	r8, r2, r4
 800605c:	eb43 0905 	adc.w	r9, r3, r5
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	469a      	mov	sl, r3
 8006068:	4693      	mov	fp, r2
 800606a:	4652      	mov	r2, sl
 800606c:	465b      	mov	r3, fp
 800606e:	4640      	mov	r0, r8
 8006070:	4649      	mov	r1, r9
 8006072:	f7fa f925 	bl	80002c0 <__aeabi_uldivmod>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4613      	mov	r3, r2
 800607c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006084:	d308      	bcc.n	8006098 <UART_SetConfig+0x430>
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800608c:	d204      	bcs.n	8006098 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	e0ce      	b.n	8006236 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800609e:	e0ca      	b.n	8006236 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060a8:	d166      	bne.n	8006178 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80060aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d827      	bhi.n	8006102 <UART_SetConfig+0x49a>
 80060b2:	a201      	add	r2, pc, #4	@ (adr r2, 80060b8 <UART_SetConfig+0x450>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	08006103 	.word	0x08006103
 80060c8:	080060f3 	.word	0x080060f3
 80060cc:	08006103 	.word	0x08006103
 80060d0:	08006103 	.word	0x08006103
 80060d4:	08006103 	.word	0x08006103
 80060d8:	080060fb 	.word	0x080060fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060dc:	f7ff fa08 	bl	80054f0 <HAL_RCC_GetPCLK1Freq>
 80060e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060e2:	e014      	b.n	800610e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e4:	f7ff fa1a 	bl	800551c <HAL_RCC_GetPCLK2Freq>
 80060e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060ea:	e010      	b.n	800610e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ec:	4b4e      	ldr	r3, [pc, #312]	@ (8006228 <UART_SetConfig+0x5c0>)
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060f0:	e00d      	b.n	800610e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f2:	f7ff f98f 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80060f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060f8:	e009      	b.n	800610e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006100:	e005      	b.n	800610e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800610c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8090 	beq.w	8006236 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	4a44      	ldr	r2, [pc, #272]	@ (800622c <UART_SetConfig+0x5c4>)
 800611c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006120:	461a      	mov	r2, r3
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	fbb3 f3f2 	udiv	r3, r3, r2
 8006128:	005a      	lsls	r2, r3, #1
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	441a      	add	r2, r3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	fbb2 f3f3 	udiv	r3, r2, r3
 800613a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	2b0f      	cmp	r3, #15
 8006140:	d916      	bls.n	8006170 <UART_SetConfig+0x508>
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006148:	d212      	bcs.n	8006170 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	b29b      	uxth	r3, r3
 800614e:	f023 030f 	bic.w	r3, r3, #15
 8006152:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	b29b      	uxth	r3, r3
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	b29a      	uxth	r2, r3
 8006160:	8bfb      	ldrh	r3, [r7, #30]
 8006162:	4313      	orrs	r3, r2
 8006164:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	8bfa      	ldrh	r2, [r7, #30]
 800616c:	60da      	str	r2, [r3, #12]
 800616e:	e062      	b.n	8006236 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006176:	e05e      	b.n	8006236 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006178:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800617c:	2b08      	cmp	r3, #8
 800617e:	d828      	bhi.n	80061d2 <UART_SetConfig+0x56a>
 8006180:	a201      	add	r2, pc, #4	@ (adr r2, 8006188 <UART_SetConfig+0x520>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061ad 	.word	0x080061ad
 800618c:	080061b5 	.word	0x080061b5
 8006190:	080061bd 	.word	0x080061bd
 8006194:	080061d3 	.word	0x080061d3
 8006198:	080061c3 	.word	0x080061c3
 800619c:	080061d3 	.word	0x080061d3
 80061a0:	080061d3 	.word	0x080061d3
 80061a4:	080061d3 	.word	0x080061d3
 80061a8:	080061cb 	.word	0x080061cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ac:	f7ff f9a0 	bl	80054f0 <HAL_RCC_GetPCLK1Freq>
 80061b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061b2:	e014      	b.n	80061de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b4:	f7ff f9b2 	bl	800551c <HAL_RCC_GetPCLK2Freq>
 80061b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061ba:	e010      	b.n	80061de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006228 <UART_SetConfig+0x5c0>)
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061c0:	e00d      	b.n	80061de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c2:	f7ff f927 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80061c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061c8:	e009      	b.n	80061de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061d0:	e005      	b.n	80061de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80061dc:	bf00      	nop
    }

    if (pclk != 0U)
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d028      	beq.n	8006236 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	4a10      	ldr	r2, [pc, #64]	@ (800622c <UART_SetConfig+0x5c4>)
 80061ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ee:	461a      	mov	r2, r3
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	441a      	add	r2, r3
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	2b0f      	cmp	r3, #15
 800620c:	d910      	bls.n	8006230 <UART_SetConfig+0x5c8>
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006214:	d20c      	bcs.n	8006230 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	b29a      	uxth	r2, r3
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60da      	str	r2, [r3, #12]
 8006220:	e009      	b.n	8006236 <UART_SetConfig+0x5ce>
 8006222:	bf00      	nop
 8006224:	40008000 	.word	0x40008000
 8006228:	00f42400 	.word	0x00f42400
 800622c:	08007bd4 	.word	0x08007bd4
      }
      else
      {
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2201      	movs	r2, #1
 800623a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2201      	movs	r2, #1
 8006242:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2200      	movs	r2, #0
 800624a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2200      	movs	r2, #0
 8006250:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006252:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006256:	4618      	mov	r0, r3
 8006258:	3730      	adds	r7, #48	@ 0x30
 800625a:	46bd      	mov	sp, r7
 800625c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01a      	beq.n	8006376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800635e:	d10a      	bne.n	8006376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	605a      	str	r2, [r3, #4]
  }
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b098      	sub	sp, #96	@ 0x60
 80063a8:	af02      	add	r7, sp, #8
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063b4:	f7fe f880 	bl	80044b8 <HAL_GetTick>
 80063b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d12f      	bne.n	8006428 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063d0:	2200      	movs	r2, #0
 80063d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f88e 	bl	80064f8 <UART_WaitOnFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d022      	beq.n	8006428 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006400:	647b      	str	r3, [r7, #68]	@ 0x44
 8006402:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800640e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e6      	bne.n	80063e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e063      	b.n	80064f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b04      	cmp	r3, #4
 8006434:	d149      	bne.n	80064ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006436:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643e:	2200      	movs	r2, #0
 8006440:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f857 	bl	80064f8 <UART_WaitOnFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d03c      	beq.n	80064ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	623b      	str	r3, [r7, #32]
   return(result);
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800646e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006470:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800647c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e6      	bne.n	8006450 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	60fb      	str	r3, [r7, #12]
   return(result);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064a2:	61fa      	str	r2, [r7, #28]
 80064a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	69b9      	ldr	r1, [r7, #24]
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	617b      	str	r3, [r7, #20]
   return(result);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e5      	bne.n	8006482 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e012      	b.n	80064f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3758      	adds	r7, #88	@ 0x58
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006508:	e04f      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d04b      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fd ffd1 	bl	80044b8 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <UART_WaitOnFlagUntilTimeout+0x30>
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e04e      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d037      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b80      	cmp	r3, #128	@ 0x80
 800653e:	d034      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b40      	cmp	r3, #64	@ 0x40
 8006544:	d031      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b08      	cmp	r3, #8
 8006552:	d110      	bne.n	8006576 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2208      	movs	r2, #8
 800655a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f838 	bl	80065d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2208      	movs	r2, #8
 8006566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e029      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006584:	d111      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800658e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f81e 	bl	80065d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e00f      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4013      	ands	r3, r2
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d0a0      	beq.n	800650a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b095      	sub	sp, #84	@ 0x54
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80065fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e6      	bne.n	80065da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3308      	adds	r3, #8
 8006612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	61fb      	str	r3, [r7, #28]
   return(result);
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3308      	adds	r3, #8
 800662e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006630:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e3      	bne.n	800660c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006648:	2b01      	cmp	r3, #1
 800664a:	d118      	bne.n	800667e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	60bb      	str	r3, [r7, #8]
   return(result);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f023 0310 	bic.w	r3, r3, #16
 8006660:	647b      	str	r3, [r7, #68]	@ 0x44
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666a:	61bb      	str	r3, [r7, #24]
 800666c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6979      	ldr	r1, [r7, #20]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	613b      	str	r3, [r7, #16]
   return(result);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e6      	bne.n	800664c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2220      	movs	r2, #32
 8006682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006692:	bf00      	nop
 8006694:	3754      	adds	r7, #84	@ 0x54
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e027      	b.n	8006704 <HAL_UARTEx_DisableFifoMode+0x66>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	@ 0x24
 80066c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80066e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006724:	2302      	movs	r3, #2
 8006726:	e02d      	b.n	8006784 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2224      	movs	r2, #36	@ 0x24
 8006734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0201 	bic.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f84f 	bl	8006808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e02d      	b.n	8006800 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2224      	movs	r2, #36	@ 0x24
 80067b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f811 	bl	8006808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006814:	2b00      	cmp	r3, #0
 8006816:	d108      	bne.n	800682a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006828:	e031      	b.n	800688e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800682a:	2308      	movs	r3, #8
 800682c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800682e:	2308      	movs	r3, #8
 8006830:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	0e5b      	lsrs	r3, r3, #25
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	0f5b      	lsrs	r3, r3, #29
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	7b3a      	ldrb	r2, [r7, #12]
 8006856:	4911      	ldr	r1, [pc, #68]	@ (800689c <UARTEx_SetNbDataToProcess+0x94>)
 8006858:	5c8a      	ldrb	r2, [r1, r2]
 800685a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800685e:	7b3a      	ldrb	r2, [r7, #12]
 8006860:	490f      	ldr	r1, [pc, #60]	@ (80068a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006862:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006864:	fb93 f3f2 	sdiv	r3, r3, r2
 8006868:	b29a      	uxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	7b7a      	ldrb	r2, [r7, #13]
 8006874:	4909      	ldr	r1, [pc, #36]	@ (800689c <UARTEx_SetNbDataToProcess+0x94>)
 8006876:	5c8a      	ldrb	r2, [r1, r2]
 8006878:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800687c:	7b7a      	ldrb	r2, [r7, #13]
 800687e:	4908      	ldr	r1, [pc, #32]	@ (80068a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006880:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006882:	fb93 f3f2 	sdiv	r3, r3, r2
 8006886:	b29a      	uxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	08007bec 	.word	0x08007bec
 80068a0:	08007bf4 	.word	0x08007bf4

080068a4 <std>:
 80068a4:	2300      	movs	r3, #0
 80068a6:	b510      	push	{r4, lr}
 80068a8:	4604      	mov	r4, r0
 80068aa:	e9c0 3300 	strd	r3, r3, [r0]
 80068ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068b2:	6083      	str	r3, [r0, #8]
 80068b4:	8181      	strh	r1, [r0, #12]
 80068b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80068b8:	81c2      	strh	r2, [r0, #14]
 80068ba:	6183      	str	r3, [r0, #24]
 80068bc:	4619      	mov	r1, r3
 80068be:	2208      	movs	r2, #8
 80068c0:	305c      	adds	r0, #92	@ 0x5c
 80068c2:	f000 fab5 	bl	8006e30 <memset>
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <std+0x58>)
 80068c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80068ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <std+0x5c>)
 80068cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <std+0x60>)
 80068d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006908 <std+0x64>)
 80068d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80068d6:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <std+0x68>)
 80068d8:	6224      	str	r4, [r4, #32]
 80068da:	429c      	cmp	r4, r3
 80068dc:	d006      	beq.n	80068ec <std+0x48>
 80068de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068e2:	4294      	cmp	r4, r2
 80068e4:	d002      	beq.n	80068ec <std+0x48>
 80068e6:	33d0      	adds	r3, #208	@ 0xd0
 80068e8:	429c      	cmp	r4, r3
 80068ea:	d105      	bne.n	80068f8 <std+0x54>
 80068ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f4:	f000 bb14 	b.w	8006f20 <__retarget_lock_init_recursive>
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	bf00      	nop
 80068fc:	08006c81 	.word	0x08006c81
 8006900:	08006ca3 	.word	0x08006ca3
 8006904:	08006cdb 	.word	0x08006cdb
 8006908:	08006cff 	.word	0x08006cff
 800690c:	20000a4c 	.word	0x20000a4c

08006910 <stdio_exit_handler>:
 8006910:	4a02      	ldr	r2, [pc, #8]	@ (800691c <stdio_exit_handler+0xc>)
 8006912:	4903      	ldr	r1, [pc, #12]	@ (8006920 <stdio_exit_handler+0x10>)
 8006914:	4803      	ldr	r0, [pc, #12]	@ (8006924 <stdio_exit_handler+0x14>)
 8006916:	f000 b869 	b.w	80069ec <_fwalk_sglue>
 800691a:	bf00      	nop
 800691c:	20000070 	.word	0x20000070
 8006920:	080077d1 	.word	0x080077d1
 8006924:	20000080 	.word	0x20000080

08006928 <cleanup_stdio>:
 8006928:	6841      	ldr	r1, [r0, #4]
 800692a:	4b0c      	ldr	r3, [pc, #48]	@ (800695c <cleanup_stdio+0x34>)
 800692c:	4299      	cmp	r1, r3
 800692e:	b510      	push	{r4, lr}
 8006930:	4604      	mov	r4, r0
 8006932:	d001      	beq.n	8006938 <cleanup_stdio+0x10>
 8006934:	f000 ff4c 	bl	80077d0 <_fflush_r>
 8006938:	68a1      	ldr	r1, [r4, #8]
 800693a:	4b09      	ldr	r3, [pc, #36]	@ (8006960 <cleanup_stdio+0x38>)
 800693c:	4299      	cmp	r1, r3
 800693e:	d002      	beq.n	8006946 <cleanup_stdio+0x1e>
 8006940:	4620      	mov	r0, r4
 8006942:	f000 ff45 	bl	80077d0 <_fflush_r>
 8006946:	68e1      	ldr	r1, [r4, #12]
 8006948:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <cleanup_stdio+0x3c>)
 800694a:	4299      	cmp	r1, r3
 800694c:	d004      	beq.n	8006958 <cleanup_stdio+0x30>
 800694e:	4620      	mov	r0, r4
 8006950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006954:	f000 bf3c 	b.w	80077d0 <_fflush_r>
 8006958:	bd10      	pop	{r4, pc}
 800695a:	bf00      	nop
 800695c:	20000a4c 	.word	0x20000a4c
 8006960:	20000ab4 	.word	0x20000ab4
 8006964:	20000b1c 	.word	0x20000b1c

08006968 <global_stdio_init.part.0>:
 8006968:	b510      	push	{r4, lr}
 800696a:	4b0b      	ldr	r3, [pc, #44]	@ (8006998 <global_stdio_init.part.0+0x30>)
 800696c:	4c0b      	ldr	r4, [pc, #44]	@ (800699c <global_stdio_init.part.0+0x34>)
 800696e:	4a0c      	ldr	r2, [pc, #48]	@ (80069a0 <global_stdio_init.part.0+0x38>)
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	4620      	mov	r0, r4
 8006974:	2200      	movs	r2, #0
 8006976:	2104      	movs	r1, #4
 8006978:	f7ff ff94 	bl	80068a4 <std>
 800697c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006980:	2201      	movs	r2, #1
 8006982:	2109      	movs	r1, #9
 8006984:	f7ff ff8e 	bl	80068a4 <std>
 8006988:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800698c:	2202      	movs	r2, #2
 800698e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006992:	2112      	movs	r1, #18
 8006994:	f7ff bf86 	b.w	80068a4 <std>
 8006998:	20000b84 	.word	0x20000b84
 800699c:	20000a4c 	.word	0x20000a4c
 80069a0:	08006911 	.word	0x08006911

080069a4 <__sfp_lock_acquire>:
 80069a4:	4801      	ldr	r0, [pc, #4]	@ (80069ac <__sfp_lock_acquire+0x8>)
 80069a6:	f000 babc 	b.w	8006f22 <__retarget_lock_acquire_recursive>
 80069aa:	bf00      	nop
 80069ac:	20000b8d 	.word	0x20000b8d

080069b0 <__sfp_lock_release>:
 80069b0:	4801      	ldr	r0, [pc, #4]	@ (80069b8 <__sfp_lock_release+0x8>)
 80069b2:	f000 bab7 	b.w	8006f24 <__retarget_lock_release_recursive>
 80069b6:	bf00      	nop
 80069b8:	20000b8d 	.word	0x20000b8d

080069bc <__sinit>:
 80069bc:	b510      	push	{r4, lr}
 80069be:	4604      	mov	r4, r0
 80069c0:	f7ff fff0 	bl	80069a4 <__sfp_lock_acquire>
 80069c4:	6a23      	ldr	r3, [r4, #32]
 80069c6:	b11b      	cbz	r3, 80069d0 <__sinit+0x14>
 80069c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069cc:	f7ff bff0 	b.w	80069b0 <__sfp_lock_release>
 80069d0:	4b04      	ldr	r3, [pc, #16]	@ (80069e4 <__sinit+0x28>)
 80069d2:	6223      	str	r3, [r4, #32]
 80069d4:	4b04      	ldr	r3, [pc, #16]	@ (80069e8 <__sinit+0x2c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f5      	bne.n	80069c8 <__sinit+0xc>
 80069dc:	f7ff ffc4 	bl	8006968 <global_stdio_init.part.0>
 80069e0:	e7f2      	b.n	80069c8 <__sinit+0xc>
 80069e2:	bf00      	nop
 80069e4:	08006929 	.word	0x08006929
 80069e8:	20000b84 	.word	0x20000b84

080069ec <_fwalk_sglue>:
 80069ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069f0:	4607      	mov	r7, r0
 80069f2:	4688      	mov	r8, r1
 80069f4:	4614      	mov	r4, r2
 80069f6:	2600      	movs	r6, #0
 80069f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006a00:	d505      	bpl.n	8006a0e <_fwalk_sglue+0x22>
 8006a02:	6824      	ldr	r4, [r4, #0]
 8006a04:	2c00      	cmp	r4, #0
 8006a06:	d1f7      	bne.n	80069f8 <_fwalk_sglue+0xc>
 8006a08:	4630      	mov	r0, r6
 8006a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d907      	bls.n	8006a24 <_fwalk_sglue+0x38>
 8006a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	d003      	beq.n	8006a24 <_fwalk_sglue+0x38>
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4638      	mov	r0, r7
 8006a20:	47c0      	blx	r8
 8006a22:	4306      	orrs	r6, r0
 8006a24:	3568      	adds	r5, #104	@ 0x68
 8006a26:	e7e9      	b.n	80069fc <_fwalk_sglue+0x10>

08006a28 <iprintf>:
 8006a28:	b40f      	push	{r0, r1, r2, r3}
 8006a2a:	b507      	push	{r0, r1, r2, lr}
 8006a2c:	4906      	ldr	r1, [pc, #24]	@ (8006a48 <iprintf+0x20>)
 8006a2e:	ab04      	add	r3, sp, #16
 8006a30:	6808      	ldr	r0, [r1, #0]
 8006a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a36:	6881      	ldr	r1, [r0, #8]
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	f000 fb9f 	bl	800717c <_vfiprintf_r>
 8006a3e:	b003      	add	sp, #12
 8006a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a44:	b004      	add	sp, #16
 8006a46:	4770      	bx	lr
 8006a48:	2000007c 	.word	0x2000007c

08006a4c <_puts_r>:
 8006a4c:	6a03      	ldr	r3, [r0, #32]
 8006a4e:	b570      	push	{r4, r5, r6, lr}
 8006a50:	6884      	ldr	r4, [r0, #8]
 8006a52:	4605      	mov	r5, r0
 8006a54:	460e      	mov	r6, r1
 8006a56:	b90b      	cbnz	r3, 8006a5c <_puts_r+0x10>
 8006a58:	f7ff ffb0 	bl	80069bc <__sinit>
 8006a5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a5e:	07db      	lsls	r3, r3, #31
 8006a60:	d405      	bmi.n	8006a6e <_puts_r+0x22>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	0598      	lsls	r0, r3, #22
 8006a66:	d402      	bmi.n	8006a6e <_puts_r+0x22>
 8006a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a6a:	f000 fa5a 	bl	8006f22 <__retarget_lock_acquire_recursive>
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	0719      	lsls	r1, r3, #28
 8006a72:	d502      	bpl.n	8006a7a <_puts_r+0x2e>
 8006a74:	6923      	ldr	r3, [r4, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d135      	bne.n	8006ae6 <_puts_r+0x9a>
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f000 f981 	bl	8006d84 <__swsetup_r>
 8006a82:	b380      	cbz	r0, 8006ae6 <_puts_r+0x9a>
 8006a84:	f04f 35ff 	mov.w	r5, #4294967295
 8006a88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a8a:	07da      	lsls	r2, r3, #31
 8006a8c:	d405      	bmi.n	8006a9a <_puts_r+0x4e>
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	059b      	lsls	r3, r3, #22
 8006a92:	d402      	bmi.n	8006a9a <_puts_r+0x4e>
 8006a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a96:	f000 fa45 	bl	8006f24 <__retarget_lock_release_recursive>
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	da04      	bge.n	8006aac <_puts_r+0x60>
 8006aa2:	69a2      	ldr	r2, [r4, #24]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	dc17      	bgt.n	8006ad8 <_puts_r+0x8c>
 8006aa8:	290a      	cmp	r1, #10
 8006aaa:	d015      	beq.n	8006ad8 <_puts_r+0x8c>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	6022      	str	r2, [r4, #0]
 8006ab2:	7019      	strb	r1, [r3, #0]
 8006ab4:	68a3      	ldr	r3, [r4, #8]
 8006ab6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006aba:	3b01      	subs	r3, #1
 8006abc:	60a3      	str	r3, [r4, #8]
 8006abe:	2900      	cmp	r1, #0
 8006ac0:	d1ed      	bne.n	8006a9e <_puts_r+0x52>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da11      	bge.n	8006aea <_puts_r+0x9e>
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	210a      	movs	r1, #10
 8006aca:	4628      	mov	r0, r5
 8006acc:	f000 f91b 	bl	8006d06 <__swbuf_r>
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d0d7      	beq.n	8006a84 <_puts_r+0x38>
 8006ad4:	250a      	movs	r5, #10
 8006ad6:	e7d7      	b.n	8006a88 <_puts_r+0x3c>
 8006ad8:	4622      	mov	r2, r4
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 f913 	bl	8006d06 <__swbuf_r>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d1e7      	bne.n	8006ab4 <_puts_r+0x68>
 8006ae4:	e7ce      	b.n	8006a84 <_puts_r+0x38>
 8006ae6:	3e01      	subs	r6, #1
 8006ae8:	e7e4      	b.n	8006ab4 <_puts_r+0x68>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	220a      	movs	r2, #10
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	e7ee      	b.n	8006ad4 <_puts_r+0x88>
	...

08006af8 <puts>:
 8006af8:	4b02      	ldr	r3, [pc, #8]	@ (8006b04 <puts+0xc>)
 8006afa:	4601      	mov	r1, r0
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	f7ff bfa5 	b.w	8006a4c <_puts_r>
 8006b02:	bf00      	nop
 8006b04:	2000007c 	.word	0x2000007c

08006b08 <setbuf>:
 8006b08:	fab1 f281 	clz	r2, r1
 8006b0c:	0952      	lsrs	r2, r2, #5
 8006b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b12:	0052      	lsls	r2, r2, #1
 8006b14:	f000 b800 	b.w	8006b18 <setvbuf>

08006b18 <setvbuf>:
 8006b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b1c:	461d      	mov	r5, r3
 8006b1e:	4b57      	ldr	r3, [pc, #348]	@ (8006c7c <setvbuf+0x164>)
 8006b20:	681f      	ldr	r7, [r3, #0]
 8006b22:	4604      	mov	r4, r0
 8006b24:	460e      	mov	r6, r1
 8006b26:	4690      	mov	r8, r2
 8006b28:	b127      	cbz	r7, 8006b34 <setvbuf+0x1c>
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	b913      	cbnz	r3, 8006b34 <setvbuf+0x1c>
 8006b2e:	4638      	mov	r0, r7
 8006b30:	f7ff ff44 	bl	80069bc <__sinit>
 8006b34:	f1b8 0f02 	cmp.w	r8, #2
 8006b38:	d006      	beq.n	8006b48 <setvbuf+0x30>
 8006b3a:	f1b8 0f01 	cmp.w	r8, #1
 8006b3e:	f200 809a 	bhi.w	8006c76 <setvbuf+0x15e>
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	f2c0 8097 	blt.w	8006c76 <setvbuf+0x15e>
 8006b48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b4a:	07d9      	lsls	r1, r3, #31
 8006b4c:	d405      	bmi.n	8006b5a <setvbuf+0x42>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	059a      	lsls	r2, r3, #22
 8006b52:	d402      	bmi.n	8006b5a <setvbuf+0x42>
 8006b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b56:	f000 f9e4 	bl	8006f22 <__retarget_lock_acquire_recursive>
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f000 fe37 	bl	80077d0 <_fflush_r>
 8006b62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b64:	b141      	cbz	r1, 8006b78 <setvbuf+0x60>
 8006b66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b6a:	4299      	cmp	r1, r3
 8006b6c:	d002      	beq.n	8006b74 <setvbuf+0x5c>
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f000 f9da 	bl	8006f28 <_free_r>
 8006b74:	2300      	movs	r3, #0
 8006b76:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61a3      	str	r3, [r4, #24]
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	061b      	lsls	r3, r3, #24
 8006b82:	d503      	bpl.n	8006b8c <setvbuf+0x74>
 8006b84:	6921      	ldr	r1, [r4, #16]
 8006b86:	4638      	mov	r0, r7
 8006b88:	f000 f9ce 	bl	8006f28 <_free_r>
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006b92:	f023 0303 	bic.w	r3, r3, #3
 8006b96:	f1b8 0f02 	cmp.w	r8, #2
 8006b9a:	81a3      	strh	r3, [r4, #12]
 8006b9c:	d061      	beq.n	8006c62 <setvbuf+0x14a>
 8006b9e:	ab01      	add	r3, sp, #4
 8006ba0:	466a      	mov	r2, sp
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f000 fe3b 	bl	8007820 <__swhatbuf_r>
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	4318      	orrs	r0, r3
 8006bae:	81a0      	strh	r0, [r4, #12]
 8006bb0:	bb2d      	cbnz	r5, 8006bfe <setvbuf+0xe6>
 8006bb2:	9d00      	ldr	r5, [sp, #0]
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 fa01 	bl	8006fbc <malloc>
 8006bba:	4606      	mov	r6, r0
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d152      	bne.n	8006c66 <setvbuf+0x14e>
 8006bc0:	f8dd 9000 	ldr.w	r9, [sp]
 8006bc4:	45a9      	cmp	r9, r5
 8006bc6:	d140      	bne.n	8006c4a <setvbuf+0x132>
 8006bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8006bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd0:	f043 0202 	orr.w	r2, r3, #2
 8006bd4:	81a2      	strh	r2, [r4, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	60a2      	str	r2, [r4, #8]
 8006bda:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006bde:	6022      	str	r2, [r4, #0]
 8006be0:	6122      	str	r2, [r4, #16]
 8006be2:	2201      	movs	r2, #1
 8006be4:	6162      	str	r2, [r4, #20]
 8006be6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006be8:	07d6      	lsls	r6, r2, #31
 8006bea:	d404      	bmi.n	8006bf6 <setvbuf+0xde>
 8006bec:	0598      	lsls	r0, r3, #22
 8006bee:	d402      	bmi.n	8006bf6 <setvbuf+0xde>
 8006bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bf2:	f000 f997 	bl	8006f24 <__retarget_lock_release_recursive>
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	b003      	add	sp, #12
 8006bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	d0d8      	beq.n	8006bb4 <setvbuf+0x9c>
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	b913      	cbnz	r3, 8006c0c <setvbuf+0xf4>
 8006c06:	4638      	mov	r0, r7
 8006c08:	f7ff fed8 	bl	80069bc <__sinit>
 8006c0c:	f1b8 0f01 	cmp.w	r8, #1
 8006c10:	bf08      	it	eq
 8006c12:	89a3      	ldrheq	r3, [r4, #12]
 8006c14:	6026      	str	r6, [r4, #0]
 8006c16:	bf04      	itt	eq
 8006c18:	f043 0301 	orreq.w	r3, r3, #1
 8006c1c:	81a3      	strheq	r3, [r4, #12]
 8006c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c22:	f013 0208 	ands.w	r2, r3, #8
 8006c26:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006c2a:	d01e      	beq.n	8006c6a <setvbuf+0x152>
 8006c2c:	07d9      	lsls	r1, r3, #31
 8006c2e:	bf41      	itttt	mi
 8006c30:	2200      	movmi	r2, #0
 8006c32:	426d      	negmi	r5, r5
 8006c34:	60a2      	strmi	r2, [r4, #8]
 8006c36:	61a5      	strmi	r5, [r4, #24]
 8006c38:	bf58      	it	pl
 8006c3a:	60a5      	strpl	r5, [r4, #8]
 8006c3c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c3e:	07d2      	lsls	r2, r2, #31
 8006c40:	d401      	bmi.n	8006c46 <setvbuf+0x12e>
 8006c42:	059b      	lsls	r3, r3, #22
 8006c44:	d513      	bpl.n	8006c6e <setvbuf+0x156>
 8006c46:	2500      	movs	r5, #0
 8006c48:	e7d5      	b.n	8006bf6 <setvbuf+0xde>
 8006c4a:	4648      	mov	r0, r9
 8006c4c:	f000 f9b6 	bl	8006fbc <malloc>
 8006c50:	4606      	mov	r6, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d0b8      	beq.n	8006bc8 <setvbuf+0xb0>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	464d      	mov	r5, r9
 8006c60:	e7cf      	b.n	8006c02 <setvbuf+0xea>
 8006c62:	2500      	movs	r5, #0
 8006c64:	e7b2      	b.n	8006bcc <setvbuf+0xb4>
 8006c66:	46a9      	mov	r9, r5
 8006c68:	e7f5      	b.n	8006c56 <setvbuf+0x13e>
 8006c6a:	60a2      	str	r2, [r4, #8]
 8006c6c:	e7e6      	b.n	8006c3c <setvbuf+0x124>
 8006c6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c70:	f000 f958 	bl	8006f24 <__retarget_lock_release_recursive>
 8006c74:	e7e7      	b.n	8006c46 <setvbuf+0x12e>
 8006c76:	f04f 35ff 	mov.w	r5, #4294967295
 8006c7a:	e7bc      	b.n	8006bf6 <setvbuf+0xde>
 8006c7c:	2000007c 	.word	0x2000007c

08006c80 <__sread>:
 8006c80:	b510      	push	{r4, lr}
 8006c82:	460c      	mov	r4, r1
 8006c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c88:	f000 f8fc 	bl	8006e84 <_read_r>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	bfab      	itete	ge
 8006c90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c92:	89a3      	ldrhlt	r3, [r4, #12]
 8006c94:	181b      	addge	r3, r3, r0
 8006c96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c9a:	bfac      	ite	ge
 8006c9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c9e:	81a3      	strhlt	r3, [r4, #12]
 8006ca0:	bd10      	pop	{r4, pc}

08006ca2 <__swrite>:
 8006ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca6:	461f      	mov	r7, r3
 8006ca8:	898b      	ldrh	r3, [r1, #12]
 8006caa:	05db      	lsls	r3, r3, #23
 8006cac:	4605      	mov	r5, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	4616      	mov	r6, r2
 8006cb2:	d505      	bpl.n	8006cc0 <__swrite+0x1e>
 8006cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb8:	2302      	movs	r3, #2
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f000 f8d0 	bl	8006e60 <_lseek_r>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cca:	81a3      	strh	r3, [r4, #12]
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd6:	f000 b8e7 	b.w	8006ea8 <_write_r>

08006cda <__sseek>:
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	460c      	mov	r4, r1
 8006cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce2:	f000 f8bd 	bl	8006e60 <_lseek_r>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	bf15      	itete	ne
 8006cec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cf6:	81a3      	strheq	r3, [r4, #12]
 8006cf8:	bf18      	it	ne
 8006cfa:	81a3      	strhne	r3, [r4, #12]
 8006cfc:	bd10      	pop	{r4, pc}

08006cfe <__sclose>:
 8006cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d02:	f000 b89d 	b.w	8006e40 <_close_r>

08006d06 <__swbuf_r>:
 8006d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d08:	460e      	mov	r6, r1
 8006d0a:	4614      	mov	r4, r2
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	b118      	cbz	r0, 8006d18 <__swbuf_r+0x12>
 8006d10:	6a03      	ldr	r3, [r0, #32]
 8006d12:	b90b      	cbnz	r3, 8006d18 <__swbuf_r+0x12>
 8006d14:	f7ff fe52 	bl	80069bc <__sinit>
 8006d18:	69a3      	ldr	r3, [r4, #24]
 8006d1a:	60a3      	str	r3, [r4, #8]
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	071a      	lsls	r2, r3, #28
 8006d20:	d501      	bpl.n	8006d26 <__swbuf_r+0x20>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	b943      	cbnz	r3, 8006d38 <__swbuf_r+0x32>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 f82b 	bl	8006d84 <__swsetup_r>
 8006d2e:	b118      	cbz	r0, 8006d38 <__swbuf_r+0x32>
 8006d30:	f04f 37ff 	mov.w	r7, #4294967295
 8006d34:	4638      	mov	r0, r7
 8006d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	6922      	ldr	r2, [r4, #16]
 8006d3c:	1a98      	subs	r0, r3, r2
 8006d3e:	6963      	ldr	r3, [r4, #20]
 8006d40:	b2f6      	uxtb	r6, r6
 8006d42:	4283      	cmp	r3, r0
 8006d44:	4637      	mov	r7, r6
 8006d46:	dc05      	bgt.n	8006d54 <__swbuf_r+0x4e>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 fd40 	bl	80077d0 <_fflush_r>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d1ed      	bne.n	8006d30 <__swbuf_r+0x2a>
 8006d54:	68a3      	ldr	r3, [r4, #8]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	60a3      	str	r3, [r4, #8]
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	6022      	str	r2, [r4, #0]
 8006d60:	701e      	strb	r6, [r3, #0]
 8006d62:	6962      	ldr	r2, [r4, #20]
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d004      	beq.n	8006d74 <__swbuf_r+0x6e>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	07db      	lsls	r3, r3, #31
 8006d6e:	d5e1      	bpl.n	8006d34 <__swbuf_r+0x2e>
 8006d70:	2e0a      	cmp	r6, #10
 8006d72:	d1df      	bne.n	8006d34 <__swbuf_r+0x2e>
 8006d74:	4621      	mov	r1, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 fd2a 	bl	80077d0 <_fflush_r>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d0d9      	beq.n	8006d34 <__swbuf_r+0x2e>
 8006d80:	e7d6      	b.n	8006d30 <__swbuf_r+0x2a>
	...

08006d84 <__swsetup_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4b29      	ldr	r3, [pc, #164]	@ (8006e2c <__swsetup_r+0xa8>)
 8006d88:	4605      	mov	r5, r0
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	b118      	cbz	r0, 8006d98 <__swsetup_r+0x14>
 8006d90:	6a03      	ldr	r3, [r0, #32]
 8006d92:	b90b      	cbnz	r3, 8006d98 <__swsetup_r+0x14>
 8006d94:	f7ff fe12 	bl	80069bc <__sinit>
 8006d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9c:	0719      	lsls	r1, r3, #28
 8006d9e:	d422      	bmi.n	8006de6 <__swsetup_r+0x62>
 8006da0:	06da      	lsls	r2, r3, #27
 8006da2:	d407      	bmi.n	8006db4 <__swsetup_r+0x30>
 8006da4:	2209      	movs	r2, #9
 8006da6:	602a      	str	r2, [r5, #0]
 8006da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	f04f 30ff 	mov.w	r0, #4294967295
 8006db2:	e033      	b.n	8006e1c <__swsetup_r+0x98>
 8006db4:	0758      	lsls	r0, r3, #29
 8006db6:	d512      	bpl.n	8006dde <__swsetup_r+0x5a>
 8006db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dba:	b141      	cbz	r1, 8006dce <__swsetup_r+0x4a>
 8006dbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	d002      	beq.n	8006dca <__swsetup_r+0x46>
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 f8af 	bl	8006f28 <_free_r>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	6923      	ldr	r3, [r4, #16]
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	89a3      	ldrh	r3, [r4, #12]
 8006de0:	f043 0308 	orr.w	r3, r3, #8
 8006de4:	81a3      	strh	r3, [r4, #12]
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	b94b      	cbnz	r3, 8006dfe <__swsetup_r+0x7a>
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df4:	d003      	beq.n	8006dfe <__swsetup_r+0x7a>
 8006df6:	4621      	mov	r1, r4
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f000 fd37 	bl	800786c <__smakebuf_r>
 8006dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e02:	f013 0201 	ands.w	r2, r3, #1
 8006e06:	d00a      	beq.n	8006e1e <__swsetup_r+0x9a>
 8006e08:	2200      	movs	r2, #0
 8006e0a:	60a2      	str	r2, [r4, #8]
 8006e0c:	6962      	ldr	r2, [r4, #20]
 8006e0e:	4252      	negs	r2, r2
 8006e10:	61a2      	str	r2, [r4, #24]
 8006e12:	6922      	ldr	r2, [r4, #16]
 8006e14:	b942      	cbnz	r2, 8006e28 <__swsetup_r+0xa4>
 8006e16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e1a:	d1c5      	bne.n	8006da8 <__swsetup_r+0x24>
 8006e1c:	bd38      	pop	{r3, r4, r5, pc}
 8006e1e:	0799      	lsls	r1, r3, #30
 8006e20:	bf58      	it	pl
 8006e22:	6962      	ldrpl	r2, [r4, #20]
 8006e24:	60a2      	str	r2, [r4, #8]
 8006e26:	e7f4      	b.n	8006e12 <__swsetup_r+0x8e>
 8006e28:	2000      	movs	r0, #0
 8006e2a:	e7f7      	b.n	8006e1c <__swsetup_r+0x98>
 8006e2c:	2000007c 	.word	0x2000007c

08006e30 <memset>:
 8006e30:	4402      	add	r2, r0
 8006e32:	4603      	mov	r3, r0
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d100      	bne.n	8006e3a <memset+0xa>
 8006e38:	4770      	bx	lr
 8006e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e3e:	e7f9      	b.n	8006e34 <memset+0x4>

08006e40 <_close_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d06      	ldr	r5, [pc, #24]	@ (8006e5c <_close_r+0x1c>)
 8006e44:	2300      	movs	r3, #0
 8006e46:	4604      	mov	r4, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	f7f9 ff9e 	bl	8000d8c <_close>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_close_r+0x1a>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_close_r+0x1a>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	20000b88 	.word	0x20000b88

08006e60 <_lseek_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4d07      	ldr	r5, [pc, #28]	@ (8006e80 <_lseek_r+0x20>)
 8006e64:	4604      	mov	r4, r0
 8006e66:	4608      	mov	r0, r1
 8006e68:	4611      	mov	r1, r2
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	602a      	str	r2, [r5, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f7f9 ffb3 	bl	8000dda <_lseek>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d102      	bne.n	8006e7e <_lseek_r+0x1e>
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b103      	cbz	r3, 8006e7e <_lseek_r+0x1e>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	20000b88 	.word	0x20000b88

08006e84 <_read_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4d07      	ldr	r5, [pc, #28]	@ (8006ea4 <_read_r+0x20>)
 8006e88:	4604      	mov	r4, r0
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	2200      	movs	r2, #0
 8006e90:	602a      	str	r2, [r5, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f7f9 ff41 	bl	8000d1a <_read>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_read_r+0x1e>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_read_r+0x1e>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	20000b88 	.word	0x20000b88

08006ea8 <_write_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d07      	ldr	r5, [pc, #28]	@ (8006ec8 <_write_r+0x20>)
 8006eac:	4604      	mov	r4, r0
 8006eae:	4608      	mov	r0, r1
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	602a      	str	r2, [r5, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f7f9 ff4c 	bl	8000d54 <_write>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_write_r+0x1e>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_write_r+0x1e>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	20000b88 	.word	0x20000b88

08006ecc <__errno>:
 8006ecc:	4b01      	ldr	r3, [pc, #4]	@ (8006ed4 <__errno+0x8>)
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	2000007c 	.word	0x2000007c

08006ed8 <__libc_init_array>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4d0d      	ldr	r5, [pc, #52]	@ (8006f10 <__libc_init_array+0x38>)
 8006edc:	4c0d      	ldr	r4, [pc, #52]	@ (8006f14 <__libc_init_array+0x3c>)
 8006ede:	1b64      	subs	r4, r4, r5
 8006ee0:	10a4      	asrs	r4, r4, #2
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	42a6      	cmp	r6, r4
 8006ee6:	d109      	bne.n	8006efc <__libc_init_array+0x24>
 8006ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8006f18 <__libc_init_array+0x40>)
 8006eea:	4c0c      	ldr	r4, [pc, #48]	@ (8006f1c <__libc_init_array+0x44>)
 8006eec:	f000 fd2c 	bl	8007948 <_init>
 8006ef0:	1b64      	subs	r4, r4, r5
 8006ef2:	10a4      	asrs	r4, r4, #2
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	42a6      	cmp	r6, r4
 8006ef8:	d105      	bne.n	8006f06 <__libc_init_array+0x2e>
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f00:	4798      	blx	r3
 8006f02:	3601      	adds	r6, #1
 8006f04:	e7ee      	b.n	8006ee4 <__libc_init_array+0xc>
 8006f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0a:	4798      	blx	r3
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	e7f2      	b.n	8006ef6 <__libc_init_array+0x1e>
 8006f10:	08007c38 	.word	0x08007c38
 8006f14:	08007c38 	.word	0x08007c38
 8006f18:	08007c38 	.word	0x08007c38
 8006f1c:	08007c3c 	.word	0x08007c3c

08006f20 <__retarget_lock_init_recursive>:
 8006f20:	4770      	bx	lr

08006f22 <__retarget_lock_acquire_recursive>:
 8006f22:	4770      	bx	lr

08006f24 <__retarget_lock_release_recursive>:
 8006f24:	4770      	bx	lr
	...

08006f28 <_free_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	2900      	cmp	r1, #0
 8006f2e:	d041      	beq.n	8006fb4 <_free_r+0x8c>
 8006f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f34:	1f0c      	subs	r4, r1, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bfb8      	it	lt
 8006f3a:	18e4      	addlt	r4, r4, r3
 8006f3c:	f000 f8e8 	bl	8007110 <__malloc_lock>
 8006f40:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb8 <_free_r+0x90>)
 8006f42:	6813      	ldr	r3, [r2, #0]
 8006f44:	b933      	cbnz	r3, 8006f54 <_free_r+0x2c>
 8006f46:	6063      	str	r3, [r4, #4]
 8006f48:	6014      	str	r4, [r2, #0]
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f50:	f000 b8e4 	b.w	800711c <__malloc_unlock>
 8006f54:	42a3      	cmp	r3, r4
 8006f56:	d908      	bls.n	8006f6a <_free_r+0x42>
 8006f58:	6820      	ldr	r0, [r4, #0]
 8006f5a:	1821      	adds	r1, r4, r0
 8006f5c:	428b      	cmp	r3, r1
 8006f5e:	bf01      	itttt	eq
 8006f60:	6819      	ldreq	r1, [r3, #0]
 8006f62:	685b      	ldreq	r3, [r3, #4]
 8006f64:	1809      	addeq	r1, r1, r0
 8006f66:	6021      	streq	r1, [r4, #0]
 8006f68:	e7ed      	b.n	8006f46 <_free_r+0x1e>
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	b10b      	cbz	r3, 8006f74 <_free_r+0x4c>
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	d9fa      	bls.n	8006f6a <_free_r+0x42>
 8006f74:	6811      	ldr	r1, [r2, #0]
 8006f76:	1850      	adds	r0, r2, r1
 8006f78:	42a0      	cmp	r0, r4
 8006f7a:	d10b      	bne.n	8006f94 <_free_r+0x6c>
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	4401      	add	r1, r0
 8006f80:	1850      	adds	r0, r2, r1
 8006f82:	4283      	cmp	r3, r0
 8006f84:	6011      	str	r1, [r2, #0]
 8006f86:	d1e0      	bne.n	8006f4a <_free_r+0x22>
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	6053      	str	r3, [r2, #4]
 8006f8e:	4408      	add	r0, r1
 8006f90:	6010      	str	r0, [r2, #0]
 8006f92:	e7da      	b.n	8006f4a <_free_r+0x22>
 8006f94:	d902      	bls.n	8006f9c <_free_r+0x74>
 8006f96:	230c      	movs	r3, #12
 8006f98:	602b      	str	r3, [r5, #0]
 8006f9a:	e7d6      	b.n	8006f4a <_free_r+0x22>
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	1821      	adds	r1, r4, r0
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	bf04      	itt	eq
 8006fa4:	6819      	ldreq	r1, [r3, #0]
 8006fa6:	685b      	ldreq	r3, [r3, #4]
 8006fa8:	6063      	str	r3, [r4, #4]
 8006faa:	bf04      	itt	eq
 8006fac:	1809      	addeq	r1, r1, r0
 8006fae:	6021      	streq	r1, [r4, #0]
 8006fb0:	6054      	str	r4, [r2, #4]
 8006fb2:	e7ca      	b.n	8006f4a <_free_r+0x22>
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000b94 	.word	0x20000b94

08006fbc <malloc>:
 8006fbc:	4b02      	ldr	r3, [pc, #8]	@ (8006fc8 <malloc+0xc>)
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	6818      	ldr	r0, [r3, #0]
 8006fc2:	f000 b825 	b.w	8007010 <_malloc_r>
 8006fc6:	bf00      	nop
 8006fc8:	2000007c 	.word	0x2000007c

08006fcc <sbrk_aligned>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	4e0f      	ldr	r6, [pc, #60]	@ (800700c <sbrk_aligned+0x40>)
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	6831      	ldr	r1, [r6, #0]
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	b911      	cbnz	r1, 8006fde <sbrk_aligned+0x12>
 8006fd8:	f000 fca6 	bl	8007928 <_sbrk_r>
 8006fdc:	6030      	str	r0, [r6, #0]
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 fca1 	bl	8007928 <_sbrk_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	d103      	bne.n	8006ff2 <sbrk_aligned+0x26>
 8006fea:	f04f 34ff 	mov.w	r4, #4294967295
 8006fee:	4620      	mov	r0, r4
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
 8006ff2:	1cc4      	adds	r4, r0, #3
 8006ff4:	f024 0403 	bic.w	r4, r4, #3
 8006ff8:	42a0      	cmp	r0, r4
 8006ffa:	d0f8      	beq.n	8006fee <sbrk_aligned+0x22>
 8006ffc:	1a21      	subs	r1, r4, r0
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 fc92 	bl	8007928 <_sbrk_r>
 8007004:	3001      	adds	r0, #1
 8007006:	d1f2      	bne.n	8006fee <sbrk_aligned+0x22>
 8007008:	e7ef      	b.n	8006fea <sbrk_aligned+0x1e>
 800700a:	bf00      	nop
 800700c:	20000b90 	.word	0x20000b90

08007010 <_malloc_r>:
 8007010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007014:	1ccd      	adds	r5, r1, #3
 8007016:	f025 0503 	bic.w	r5, r5, #3
 800701a:	3508      	adds	r5, #8
 800701c:	2d0c      	cmp	r5, #12
 800701e:	bf38      	it	cc
 8007020:	250c      	movcc	r5, #12
 8007022:	2d00      	cmp	r5, #0
 8007024:	4606      	mov	r6, r0
 8007026:	db01      	blt.n	800702c <_malloc_r+0x1c>
 8007028:	42a9      	cmp	r1, r5
 800702a:	d904      	bls.n	8007036 <_malloc_r+0x26>
 800702c:	230c      	movs	r3, #12
 800702e:	6033      	str	r3, [r6, #0]
 8007030:	2000      	movs	r0, #0
 8007032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800710c <_malloc_r+0xfc>
 800703a:	f000 f869 	bl	8007110 <__malloc_lock>
 800703e:	f8d8 3000 	ldr.w	r3, [r8]
 8007042:	461c      	mov	r4, r3
 8007044:	bb44      	cbnz	r4, 8007098 <_malloc_r+0x88>
 8007046:	4629      	mov	r1, r5
 8007048:	4630      	mov	r0, r6
 800704a:	f7ff ffbf 	bl	8006fcc <sbrk_aligned>
 800704e:	1c43      	adds	r3, r0, #1
 8007050:	4604      	mov	r4, r0
 8007052:	d158      	bne.n	8007106 <_malloc_r+0xf6>
 8007054:	f8d8 4000 	ldr.w	r4, [r8]
 8007058:	4627      	mov	r7, r4
 800705a:	2f00      	cmp	r7, #0
 800705c:	d143      	bne.n	80070e6 <_malloc_r+0xd6>
 800705e:	2c00      	cmp	r4, #0
 8007060:	d04b      	beq.n	80070fa <_malloc_r+0xea>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	4639      	mov	r1, r7
 8007066:	4630      	mov	r0, r6
 8007068:	eb04 0903 	add.w	r9, r4, r3
 800706c:	f000 fc5c 	bl	8007928 <_sbrk_r>
 8007070:	4581      	cmp	r9, r0
 8007072:	d142      	bne.n	80070fa <_malloc_r+0xea>
 8007074:	6821      	ldr	r1, [r4, #0]
 8007076:	1a6d      	subs	r5, r5, r1
 8007078:	4629      	mov	r1, r5
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff ffa6 	bl	8006fcc <sbrk_aligned>
 8007080:	3001      	adds	r0, #1
 8007082:	d03a      	beq.n	80070fa <_malloc_r+0xea>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	442b      	add	r3, r5
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	f8d8 3000 	ldr.w	r3, [r8]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	bb62      	cbnz	r2, 80070ec <_malloc_r+0xdc>
 8007092:	f8c8 7000 	str.w	r7, [r8]
 8007096:	e00f      	b.n	80070b8 <_malloc_r+0xa8>
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	1b52      	subs	r2, r2, r5
 800709c:	d420      	bmi.n	80070e0 <_malloc_r+0xd0>
 800709e:	2a0b      	cmp	r2, #11
 80070a0:	d917      	bls.n	80070d2 <_malloc_r+0xc2>
 80070a2:	1961      	adds	r1, r4, r5
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	6025      	str	r5, [r4, #0]
 80070a8:	bf18      	it	ne
 80070aa:	6059      	strne	r1, [r3, #4]
 80070ac:	6863      	ldr	r3, [r4, #4]
 80070ae:	bf08      	it	eq
 80070b0:	f8c8 1000 	streq.w	r1, [r8]
 80070b4:	5162      	str	r2, [r4, r5]
 80070b6:	604b      	str	r3, [r1, #4]
 80070b8:	4630      	mov	r0, r6
 80070ba:	f000 f82f 	bl	800711c <__malloc_unlock>
 80070be:	f104 000b 	add.w	r0, r4, #11
 80070c2:	1d23      	adds	r3, r4, #4
 80070c4:	f020 0007 	bic.w	r0, r0, #7
 80070c8:	1ac2      	subs	r2, r0, r3
 80070ca:	bf1c      	itt	ne
 80070cc:	1a1b      	subne	r3, r3, r0
 80070ce:	50a3      	strne	r3, [r4, r2]
 80070d0:	e7af      	b.n	8007032 <_malloc_r+0x22>
 80070d2:	6862      	ldr	r2, [r4, #4]
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	bf0c      	ite	eq
 80070d8:	f8c8 2000 	streq.w	r2, [r8]
 80070dc:	605a      	strne	r2, [r3, #4]
 80070de:	e7eb      	b.n	80070b8 <_malloc_r+0xa8>
 80070e0:	4623      	mov	r3, r4
 80070e2:	6864      	ldr	r4, [r4, #4]
 80070e4:	e7ae      	b.n	8007044 <_malloc_r+0x34>
 80070e6:	463c      	mov	r4, r7
 80070e8:	687f      	ldr	r7, [r7, #4]
 80070ea:	e7b6      	b.n	800705a <_malloc_r+0x4a>
 80070ec:	461a      	mov	r2, r3
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	d1fb      	bne.n	80070ec <_malloc_r+0xdc>
 80070f4:	2300      	movs	r3, #0
 80070f6:	6053      	str	r3, [r2, #4]
 80070f8:	e7de      	b.n	80070b8 <_malloc_r+0xa8>
 80070fa:	230c      	movs	r3, #12
 80070fc:	6033      	str	r3, [r6, #0]
 80070fe:	4630      	mov	r0, r6
 8007100:	f000 f80c 	bl	800711c <__malloc_unlock>
 8007104:	e794      	b.n	8007030 <_malloc_r+0x20>
 8007106:	6005      	str	r5, [r0, #0]
 8007108:	e7d6      	b.n	80070b8 <_malloc_r+0xa8>
 800710a:	bf00      	nop
 800710c:	20000b94 	.word	0x20000b94

08007110 <__malloc_lock>:
 8007110:	4801      	ldr	r0, [pc, #4]	@ (8007118 <__malloc_lock+0x8>)
 8007112:	f7ff bf06 	b.w	8006f22 <__retarget_lock_acquire_recursive>
 8007116:	bf00      	nop
 8007118:	20000b8c 	.word	0x20000b8c

0800711c <__malloc_unlock>:
 800711c:	4801      	ldr	r0, [pc, #4]	@ (8007124 <__malloc_unlock+0x8>)
 800711e:	f7ff bf01 	b.w	8006f24 <__retarget_lock_release_recursive>
 8007122:	bf00      	nop
 8007124:	20000b8c 	.word	0x20000b8c

08007128 <__sfputc_r>:
 8007128:	6893      	ldr	r3, [r2, #8]
 800712a:	3b01      	subs	r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	b410      	push	{r4}
 8007130:	6093      	str	r3, [r2, #8]
 8007132:	da08      	bge.n	8007146 <__sfputc_r+0x1e>
 8007134:	6994      	ldr	r4, [r2, #24]
 8007136:	42a3      	cmp	r3, r4
 8007138:	db01      	blt.n	800713e <__sfputc_r+0x16>
 800713a:	290a      	cmp	r1, #10
 800713c:	d103      	bne.n	8007146 <__sfputc_r+0x1e>
 800713e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007142:	f7ff bde0 	b.w	8006d06 <__swbuf_r>
 8007146:	6813      	ldr	r3, [r2, #0]
 8007148:	1c58      	adds	r0, r3, #1
 800714a:	6010      	str	r0, [r2, #0]
 800714c:	7019      	strb	r1, [r3, #0]
 800714e:	4608      	mov	r0, r1
 8007150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007154:	4770      	bx	lr

08007156 <__sfputs_r>:
 8007156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007158:	4606      	mov	r6, r0
 800715a:	460f      	mov	r7, r1
 800715c:	4614      	mov	r4, r2
 800715e:	18d5      	adds	r5, r2, r3
 8007160:	42ac      	cmp	r4, r5
 8007162:	d101      	bne.n	8007168 <__sfputs_r+0x12>
 8007164:	2000      	movs	r0, #0
 8007166:	e007      	b.n	8007178 <__sfputs_r+0x22>
 8007168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800716c:	463a      	mov	r2, r7
 800716e:	4630      	mov	r0, r6
 8007170:	f7ff ffda 	bl	8007128 <__sfputc_r>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d1f3      	bne.n	8007160 <__sfputs_r+0xa>
 8007178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800717c <_vfiprintf_r>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	460d      	mov	r5, r1
 8007182:	b09d      	sub	sp, #116	@ 0x74
 8007184:	4614      	mov	r4, r2
 8007186:	4698      	mov	r8, r3
 8007188:	4606      	mov	r6, r0
 800718a:	b118      	cbz	r0, 8007194 <_vfiprintf_r+0x18>
 800718c:	6a03      	ldr	r3, [r0, #32]
 800718e:	b90b      	cbnz	r3, 8007194 <_vfiprintf_r+0x18>
 8007190:	f7ff fc14 	bl	80069bc <__sinit>
 8007194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007196:	07d9      	lsls	r1, r3, #31
 8007198:	d405      	bmi.n	80071a6 <_vfiprintf_r+0x2a>
 800719a:	89ab      	ldrh	r3, [r5, #12]
 800719c:	059a      	lsls	r2, r3, #22
 800719e:	d402      	bmi.n	80071a6 <_vfiprintf_r+0x2a>
 80071a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071a2:	f7ff febe 	bl	8006f22 <__retarget_lock_acquire_recursive>
 80071a6:	89ab      	ldrh	r3, [r5, #12]
 80071a8:	071b      	lsls	r3, r3, #28
 80071aa:	d501      	bpl.n	80071b0 <_vfiprintf_r+0x34>
 80071ac:	692b      	ldr	r3, [r5, #16]
 80071ae:	b99b      	cbnz	r3, 80071d8 <_vfiprintf_r+0x5c>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7ff fde6 	bl	8006d84 <__swsetup_r>
 80071b8:	b170      	cbz	r0, 80071d8 <_vfiprintf_r+0x5c>
 80071ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071bc:	07dc      	lsls	r4, r3, #31
 80071be:	d504      	bpl.n	80071ca <_vfiprintf_r+0x4e>
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	b01d      	add	sp, #116	@ 0x74
 80071c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	0598      	lsls	r0, r3, #22
 80071ce:	d4f7      	bmi.n	80071c0 <_vfiprintf_r+0x44>
 80071d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071d2:	f7ff fea7 	bl	8006f24 <__retarget_lock_release_recursive>
 80071d6:	e7f3      	b.n	80071c0 <_vfiprintf_r+0x44>
 80071d8:	2300      	movs	r3, #0
 80071da:	9309      	str	r3, [sp, #36]	@ 0x24
 80071dc:	2320      	movs	r3, #32
 80071de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e6:	2330      	movs	r3, #48	@ 0x30
 80071e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007398 <_vfiprintf_r+0x21c>
 80071ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071f0:	f04f 0901 	mov.w	r9, #1
 80071f4:	4623      	mov	r3, r4
 80071f6:	469a      	mov	sl, r3
 80071f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071fc:	b10a      	cbz	r2, 8007202 <_vfiprintf_r+0x86>
 80071fe:	2a25      	cmp	r2, #37	@ 0x25
 8007200:	d1f9      	bne.n	80071f6 <_vfiprintf_r+0x7a>
 8007202:	ebba 0b04 	subs.w	fp, sl, r4
 8007206:	d00b      	beq.n	8007220 <_vfiprintf_r+0xa4>
 8007208:	465b      	mov	r3, fp
 800720a:	4622      	mov	r2, r4
 800720c:	4629      	mov	r1, r5
 800720e:	4630      	mov	r0, r6
 8007210:	f7ff ffa1 	bl	8007156 <__sfputs_r>
 8007214:	3001      	adds	r0, #1
 8007216:	f000 80a7 	beq.w	8007368 <_vfiprintf_r+0x1ec>
 800721a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800721c:	445a      	add	r2, fp
 800721e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007220:	f89a 3000 	ldrb.w	r3, [sl]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 809f 	beq.w	8007368 <_vfiprintf_r+0x1ec>
 800722a:	2300      	movs	r3, #0
 800722c:	f04f 32ff 	mov.w	r2, #4294967295
 8007230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007234:	f10a 0a01 	add.w	sl, sl, #1
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007240:	931a      	str	r3, [sp, #104]	@ 0x68
 8007242:	4654      	mov	r4, sl
 8007244:	2205      	movs	r2, #5
 8007246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724a:	4853      	ldr	r0, [pc, #332]	@ (8007398 <_vfiprintf_r+0x21c>)
 800724c:	f7f8 ffe8 	bl	8000220 <memchr>
 8007250:	9a04      	ldr	r2, [sp, #16]
 8007252:	b9d8      	cbnz	r0, 800728c <_vfiprintf_r+0x110>
 8007254:	06d1      	lsls	r1, r2, #27
 8007256:	bf44      	itt	mi
 8007258:	2320      	movmi	r3, #32
 800725a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800725e:	0713      	lsls	r3, r2, #28
 8007260:	bf44      	itt	mi
 8007262:	232b      	movmi	r3, #43	@ 0x2b
 8007264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007268:	f89a 3000 	ldrb.w	r3, [sl]
 800726c:	2b2a      	cmp	r3, #42	@ 0x2a
 800726e:	d015      	beq.n	800729c <_vfiprintf_r+0x120>
 8007270:	9a07      	ldr	r2, [sp, #28]
 8007272:	4654      	mov	r4, sl
 8007274:	2000      	movs	r0, #0
 8007276:	f04f 0c0a 	mov.w	ip, #10
 800727a:	4621      	mov	r1, r4
 800727c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007280:	3b30      	subs	r3, #48	@ 0x30
 8007282:	2b09      	cmp	r3, #9
 8007284:	d94b      	bls.n	800731e <_vfiprintf_r+0x1a2>
 8007286:	b1b0      	cbz	r0, 80072b6 <_vfiprintf_r+0x13a>
 8007288:	9207      	str	r2, [sp, #28]
 800728a:	e014      	b.n	80072b6 <_vfiprintf_r+0x13a>
 800728c:	eba0 0308 	sub.w	r3, r0, r8
 8007290:	fa09 f303 	lsl.w	r3, r9, r3
 8007294:	4313      	orrs	r3, r2
 8007296:	9304      	str	r3, [sp, #16]
 8007298:	46a2      	mov	sl, r4
 800729a:	e7d2      	b.n	8007242 <_vfiprintf_r+0xc6>
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	1d19      	adds	r1, r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	9103      	str	r1, [sp, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bfbb      	ittet	lt
 80072a8:	425b      	neglt	r3, r3
 80072aa:	f042 0202 	orrlt.w	r2, r2, #2
 80072ae:	9307      	strge	r3, [sp, #28]
 80072b0:	9307      	strlt	r3, [sp, #28]
 80072b2:	bfb8      	it	lt
 80072b4:	9204      	strlt	r2, [sp, #16]
 80072b6:	7823      	ldrb	r3, [r4, #0]
 80072b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072ba:	d10a      	bne.n	80072d2 <_vfiprintf_r+0x156>
 80072bc:	7863      	ldrb	r3, [r4, #1]
 80072be:	2b2a      	cmp	r3, #42	@ 0x2a
 80072c0:	d132      	bne.n	8007328 <_vfiprintf_r+0x1ac>
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	1d1a      	adds	r2, r3, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	9203      	str	r2, [sp, #12]
 80072ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072ce:	3402      	adds	r4, #2
 80072d0:	9305      	str	r3, [sp, #20]
 80072d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073a8 <_vfiprintf_r+0x22c>
 80072d6:	7821      	ldrb	r1, [r4, #0]
 80072d8:	2203      	movs	r2, #3
 80072da:	4650      	mov	r0, sl
 80072dc:	f7f8 ffa0 	bl	8000220 <memchr>
 80072e0:	b138      	cbz	r0, 80072f2 <_vfiprintf_r+0x176>
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	eba0 000a 	sub.w	r0, r0, sl
 80072e8:	2240      	movs	r2, #64	@ 0x40
 80072ea:	4082      	lsls	r2, r0
 80072ec:	4313      	orrs	r3, r2
 80072ee:	3401      	adds	r4, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f6:	4829      	ldr	r0, [pc, #164]	@ (800739c <_vfiprintf_r+0x220>)
 80072f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072fc:	2206      	movs	r2, #6
 80072fe:	f7f8 ff8f 	bl	8000220 <memchr>
 8007302:	2800      	cmp	r0, #0
 8007304:	d03f      	beq.n	8007386 <_vfiprintf_r+0x20a>
 8007306:	4b26      	ldr	r3, [pc, #152]	@ (80073a0 <_vfiprintf_r+0x224>)
 8007308:	bb1b      	cbnz	r3, 8007352 <_vfiprintf_r+0x1d6>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	3307      	adds	r3, #7
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	3308      	adds	r3, #8
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007318:	443b      	add	r3, r7
 800731a:	9309      	str	r3, [sp, #36]	@ 0x24
 800731c:	e76a      	b.n	80071f4 <_vfiprintf_r+0x78>
 800731e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007322:	460c      	mov	r4, r1
 8007324:	2001      	movs	r0, #1
 8007326:	e7a8      	b.n	800727a <_vfiprintf_r+0xfe>
 8007328:	2300      	movs	r3, #0
 800732a:	3401      	adds	r4, #1
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	4619      	mov	r1, r3
 8007330:	f04f 0c0a 	mov.w	ip, #10
 8007334:	4620      	mov	r0, r4
 8007336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800733a:	3a30      	subs	r2, #48	@ 0x30
 800733c:	2a09      	cmp	r2, #9
 800733e:	d903      	bls.n	8007348 <_vfiprintf_r+0x1cc>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0c6      	beq.n	80072d2 <_vfiprintf_r+0x156>
 8007344:	9105      	str	r1, [sp, #20]
 8007346:	e7c4      	b.n	80072d2 <_vfiprintf_r+0x156>
 8007348:	fb0c 2101 	mla	r1, ip, r1, r2
 800734c:	4604      	mov	r4, r0
 800734e:	2301      	movs	r3, #1
 8007350:	e7f0      	b.n	8007334 <_vfiprintf_r+0x1b8>
 8007352:	ab03      	add	r3, sp, #12
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	462a      	mov	r2, r5
 8007358:	4b12      	ldr	r3, [pc, #72]	@ (80073a4 <_vfiprintf_r+0x228>)
 800735a:	a904      	add	r1, sp, #16
 800735c:	4630      	mov	r0, r6
 800735e:	f3af 8000 	nop.w
 8007362:	4607      	mov	r7, r0
 8007364:	1c78      	adds	r0, r7, #1
 8007366:	d1d6      	bne.n	8007316 <_vfiprintf_r+0x19a>
 8007368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800736a:	07d9      	lsls	r1, r3, #31
 800736c:	d405      	bmi.n	800737a <_vfiprintf_r+0x1fe>
 800736e:	89ab      	ldrh	r3, [r5, #12]
 8007370:	059a      	lsls	r2, r3, #22
 8007372:	d402      	bmi.n	800737a <_vfiprintf_r+0x1fe>
 8007374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007376:	f7ff fdd5 	bl	8006f24 <__retarget_lock_release_recursive>
 800737a:	89ab      	ldrh	r3, [r5, #12]
 800737c:	065b      	lsls	r3, r3, #25
 800737e:	f53f af1f 	bmi.w	80071c0 <_vfiprintf_r+0x44>
 8007382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007384:	e71e      	b.n	80071c4 <_vfiprintf_r+0x48>
 8007386:	ab03      	add	r3, sp, #12
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	462a      	mov	r2, r5
 800738c:	4b05      	ldr	r3, [pc, #20]	@ (80073a4 <_vfiprintf_r+0x228>)
 800738e:	a904      	add	r1, sp, #16
 8007390:	4630      	mov	r0, r6
 8007392:	f000 f879 	bl	8007488 <_printf_i>
 8007396:	e7e4      	b.n	8007362 <_vfiprintf_r+0x1e6>
 8007398:	08007bfc 	.word	0x08007bfc
 800739c:	08007c06 	.word	0x08007c06
 80073a0:	00000000 	.word	0x00000000
 80073a4:	08007157 	.word	0x08007157
 80073a8:	08007c02 	.word	0x08007c02

080073ac <_printf_common>:
 80073ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	4616      	mov	r6, r2
 80073b2:	4698      	mov	r8, r3
 80073b4:	688a      	ldr	r2, [r1, #8]
 80073b6:	690b      	ldr	r3, [r1, #16]
 80073b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073bc:	4293      	cmp	r3, r2
 80073be:	bfb8      	it	lt
 80073c0:	4613      	movlt	r3, r2
 80073c2:	6033      	str	r3, [r6, #0]
 80073c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073c8:	4607      	mov	r7, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	b10a      	cbz	r2, 80073d2 <_printf_common+0x26>
 80073ce:	3301      	adds	r3, #1
 80073d0:	6033      	str	r3, [r6, #0]
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	0699      	lsls	r1, r3, #26
 80073d6:	bf42      	ittt	mi
 80073d8:	6833      	ldrmi	r3, [r6, #0]
 80073da:	3302      	addmi	r3, #2
 80073dc:	6033      	strmi	r3, [r6, #0]
 80073de:	6825      	ldr	r5, [r4, #0]
 80073e0:	f015 0506 	ands.w	r5, r5, #6
 80073e4:	d106      	bne.n	80073f4 <_printf_common+0x48>
 80073e6:	f104 0a19 	add.w	sl, r4, #25
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	6832      	ldr	r2, [r6, #0]
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	42ab      	cmp	r3, r5
 80073f2:	dc26      	bgt.n	8007442 <_printf_common+0x96>
 80073f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	3b00      	subs	r3, #0
 80073fc:	bf18      	it	ne
 80073fe:	2301      	movne	r3, #1
 8007400:	0692      	lsls	r2, r2, #26
 8007402:	d42b      	bmi.n	800745c <_printf_common+0xb0>
 8007404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007408:	4641      	mov	r1, r8
 800740a:	4638      	mov	r0, r7
 800740c:	47c8      	blx	r9
 800740e:	3001      	adds	r0, #1
 8007410:	d01e      	beq.n	8007450 <_printf_common+0xa4>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	6922      	ldr	r2, [r4, #16]
 8007416:	f003 0306 	and.w	r3, r3, #6
 800741a:	2b04      	cmp	r3, #4
 800741c:	bf02      	ittt	eq
 800741e:	68e5      	ldreq	r5, [r4, #12]
 8007420:	6833      	ldreq	r3, [r6, #0]
 8007422:	1aed      	subeq	r5, r5, r3
 8007424:	68a3      	ldr	r3, [r4, #8]
 8007426:	bf0c      	ite	eq
 8007428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800742c:	2500      	movne	r5, #0
 800742e:	4293      	cmp	r3, r2
 8007430:	bfc4      	itt	gt
 8007432:	1a9b      	subgt	r3, r3, r2
 8007434:	18ed      	addgt	r5, r5, r3
 8007436:	2600      	movs	r6, #0
 8007438:	341a      	adds	r4, #26
 800743a:	42b5      	cmp	r5, r6
 800743c:	d11a      	bne.n	8007474 <_printf_common+0xc8>
 800743e:	2000      	movs	r0, #0
 8007440:	e008      	b.n	8007454 <_printf_common+0xa8>
 8007442:	2301      	movs	r3, #1
 8007444:	4652      	mov	r2, sl
 8007446:	4641      	mov	r1, r8
 8007448:	4638      	mov	r0, r7
 800744a:	47c8      	blx	r9
 800744c:	3001      	adds	r0, #1
 800744e:	d103      	bne.n	8007458 <_printf_common+0xac>
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007458:	3501      	adds	r5, #1
 800745a:	e7c6      	b.n	80073ea <_printf_common+0x3e>
 800745c:	18e1      	adds	r1, r4, r3
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	2030      	movs	r0, #48	@ 0x30
 8007462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007466:	4422      	add	r2, r4
 8007468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800746c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007470:	3302      	adds	r3, #2
 8007472:	e7c7      	b.n	8007404 <_printf_common+0x58>
 8007474:	2301      	movs	r3, #1
 8007476:	4622      	mov	r2, r4
 8007478:	4641      	mov	r1, r8
 800747a:	4638      	mov	r0, r7
 800747c:	47c8      	blx	r9
 800747e:	3001      	adds	r0, #1
 8007480:	d0e6      	beq.n	8007450 <_printf_common+0xa4>
 8007482:	3601      	adds	r6, #1
 8007484:	e7d9      	b.n	800743a <_printf_common+0x8e>
	...

08007488 <_printf_i>:
 8007488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	7e0f      	ldrb	r7, [r1, #24]
 800748e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007490:	2f78      	cmp	r7, #120	@ 0x78
 8007492:	4691      	mov	r9, r2
 8007494:	4680      	mov	r8, r0
 8007496:	460c      	mov	r4, r1
 8007498:	469a      	mov	sl, r3
 800749a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800749e:	d807      	bhi.n	80074b0 <_printf_i+0x28>
 80074a0:	2f62      	cmp	r7, #98	@ 0x62
 80074a2:	d80a      	bhi.n	80074ba <_printf_i+0x32>
 80074a4:	2f00      	cmp	r7, #0
 80074a6:	f000 80d2 	beq.w	800764e <_printf_i+0x1c6>
 80074aa:	2f58      	cmp	r7, #88	@ 0x58
 80074ac:	f000 80b9 	beq.w	8007622 <_printf_i+0x19a>
 80074b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074b8:	e03a      	b.n	8007530 <_printf_i+0xa8>
 80074ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074be:	2b15      	cmp	r3, #21
 80074c0:	d8f6      	bhi.n	80074b0 <_printf_i+0x28>
 80074c2:	a101      	add	r1, pc, #4	@ (adr r1, 80074c8 <_printf_i+0x40>)
 80074c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074c8:	08007521 	.word	0x08007521
 80074cc:	08007535 	.word	0x08007535
 80074d0:	080074b1 	.word	0x080074b1
 80074d4:	080074b1 	.word	0x080074b1
 80074d8:	080074b1 	.word	0x080074b1
 80074dc:	080074b1 	.word	0x080074b1
 80074e0:	08007535 	.word	0x08007535
 80074e4:	080074b1 	.word	0x080074b1
 80074e8:	080074b1 	.word	0x080074b1
 80074ec:	080074b1 	.word	0x080074b1
 80074f0:	080074b1 	.word	0x080074b1
 80074f4:	08007635 	.word	0x08007635
 80074f8:	0800755f 	.word	0x0800755f
 80074fc:	080075ef 	.word	0x080075ef
 8007500:	080074b1 	.word	0x080074b1
 8007504:	080074b1 	.word	0x080074b1
 8007508:	08007657 	.word	0x08007657
 800750c:	080074b1 	.word	0x080074b1
 8007510:	0800755f 	.word	0x0800755f
 8007514:	080074b1 	.word	0x080074b1
 8007518:	080074b1 	.word	0x080074b1
 800751c:	080075f7 	.word	0x080075f7
 8007520:	6833      	ldr	r3, [r6, #0]
 8007522:	1d1a      	adds	r2, r3, #4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6032      	str	r2, [r6, #0]
 8007528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800752c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007530:	2301      	movs	r3, #1
 8007532:	e09d      	b.n	8007670 <_printf_i+0x1e8>
 8007534:	6833      	ldr	r3, [r6, #0]
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	1d19      	adds	r1, r3, #4
 800753a:	6031      	str	r1, [r6, #0]
 800753c:	0606      	lsls	r6, r0, #24
 800753e:	d501      	bpl.n	8007544 <_printf_i+0xbc>
 8007540:	681d      	ldr	r5, [r3, #0]
 8007542:	e003      	b.n	800754c <_printf_i+0xc4>
 8007544:	0645      	lsls	r5, r0, #25
 8007546:	d5fb      	bpl.n	8007540 <_printf_i+0xb8>
 8007548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800754c:	2d00      	cmp	r5, #0
 800754e:	da03      	bge.n	8007558 <_printf_i+0xd0>
 8007550:	232d      	movs	r3, #45	@ 0x2d
 8007552:	426d      	negs	r5, r5
 8007554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007558:	4859      	ldr	r0, [pc, #356]	@ (80076c0 <_printf_i+0x238>)
 800755a:	230a      	movs	r3, #10
 800755c:	e011      	b.n	8007582 <_printf_i+0xfa>
 800755e:	6821      	ldr	r1, [r4, #0]
 8007560:	6833      	ldr	r3, [r6, #0]
 8007562:	0608      	lsls	r0, r1, #24
 8007564:	f853 5b04 	ldr.w	r5, [r3], #4
 8007568:	d402      	bmi.n	8007570 <_printf_i+0xe8>
 800756a:	0649      	lsls	r1, r1, #25
 800756c:	bf48      	it	mi
 800756e:	b2ad      	uxthmi	r5, r5
 8007570:	2f6f      	cmp	r7, #111	@ 0x6f
 8007572:	4853      	ldr	r0, [pc, #332]	@ (80076c0 <_printf_i+0x238>)
 8007574:	6033      	str	r3, [r6, #0]
 8007576:	bf14      	ite	ne
 8007578:	230a      	movne	r3, #10
 800757a:	2308      	moveq	r3, #8
 800757c:	2100      	movs	r1, #0
 800757e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007582:	6866      	ldr	r6, [r4, #4]
 8007584:	60a6      	str	r6, [r4, #8]
 8007586:	2e00      	cmp	r6, #0
 8007588:	bfa2      	ittt	ge
 800758a:	6821      	ldrge	r1, [r4, #0]
 800758c:	f021 0104 	bicge.w	r1, r1, #4
 8007590:	6021      	strge	r1, [r4, #0]
 8007592:	b90d      	cbnz	r5, 8007598 <_printf_i+0x110>
 8007594:	2e00      	cmp	r6, #0
 8007596:	d04b      	beq.n	8007630 <_printf_i+0x1a8>
 8007598:	4616      	mov	r6, r2
 800759a:	fbb5 f1f3 	udiv	r1, r5, r3
 800759e:	fb03 5711 	mls	r7, r3, r1, r5
 80075a2:	5dc7      	ldrb	r7, [r0, r7]
 80075a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075a8:	462f      	mov	r7, r5
 80075aa:	42bb      	cmp	r3, r7
 80075ac:	460d      	mov	r5, r1
 80075ae:	d9f4      	bls.n	800759a <_printf_i+0x112>
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d10b      	bne.n	80075cc <_printf_i+0x144>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	07df      	lsls	r7, r3, #31
 80075b8:	d508      	bpl.n	80075cc <_printf_i+0x144>
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	6861      	ldr	r1, [r4, #4]
 80075be:	4299      	cmp	r1, r3
 80075c0:	bfde      	ittt	le
 80075c2:	2330      	movle	r3, #48	@ 0x30
 80075c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075cc:	1b92      	subs	r2, r2, r6
 80075ce:	6122      	str	r2, [r4, #16]
 80075d0:	f8cd a000 	str.w	sl, [sp]
 80075d4:	464b      	mov	r3, r9
 80075d6:	aa03      	add	r2, sp, #12
 80075d8:	4621      	mov	r1, r4
 80075da:	4640      	mov	r0, r8
 80075dc:	f7ff fee6 	bl	80073ac <_printf_common>
 80075e0:	3001      	adds	r0, #1
 80075e2:	d14a      	bne.n	800767a <_printf_i+0x1f2>
 80075e4:	f04f 30ff 	mov.w	r0, #4294967295
 80075e8:	b004      	add	sp, #16
 80075ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	f043 0320 	orr.w	r3, r3, #32
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	4833      	ldr	r0, [pc, #204]	@ (80076c4 <_printf_i+0x23c>)
 80075f8:	2778      	movs	r7, #120	@ 0x78
 80075fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	6831      	ldr	r1, [r6, #0]
 8007602:	061f      	lsls	r7, r3, #24
 8007604:	f851 5b04 	ldr.w	r5, [r1], #4
 8007608:	d402      	bmi.n	8007610 <_printf_i+0x188>
 800760a:	065f      	lsls	r7, r3, #25
 800760c:	bf48      	it	mi
 800760e:	b2ad      	uxthmi	r5, r5
 8007610:	6031      	str	r1, [r6, #0]
 8007612:	07d9      	lsls	r1, r3, #31
 8007614:	bf44      	itt	mi
 8007616:	f043 0320 	orrmi.w	r3, r3, #32
 800761a:	6023      	strmi	r3, [r4, #0]
 800761c:	b11d      	cbz	r5, 8007626 <_printf_i+0x19e>
 800761e:	2310      	movs	r3, #16
 8007620:	e7ac      	b.n	800757c <_printf_i+0xf4>
 8007622:	4827      	ldr	r0, [pc, #156]	@ (80076c0 <_printf_i+0x238>)
 8007624:	e7e9      	b.n	80075fa <_printf_i+0x172>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	f023 0320 	bic.w	r3, r3, #32
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	e7f6      	b.n	800761e <_printf_i+0x196>
 8007630:	4616      	mov	r6, r2
 8007632:	e7bd      	b.n	80075b0 <_printf_i+0x128>
 8007634:	6833      	ldr	r3, [r6, #0]
 8007636:	6825      	ldr	r5, [r4, #0]
 8007638:	6961      	ldr	r1, [r4, #20]
 800763a:	1d18      	adds	r0, r3, #4
 800763c:	6030      	str	r0, [r6, #0]
 800763e:	062e      	lsls	r6, r5, #24
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	d501      	bpl.n	8007648 <_printf_i+0x1c0>
 8007644:	6019      	str	r1, [r3, #0]
 8007646:	e002      	b.n	800764e <_printf_i+0x1c6>
 8007648:	0668      	lsls	r0, r5, #25
 800764a:	d5fb      	bpl.n	8007644 <_printf_i+0x1bc>
 800764c:	8019      	strh	r1, [r3, #0]
 800764e:	2300      	movs	r3, #0
 8007650:	6123      	str	r3, [r4, #16]
 8007652:	4616      	mov	r6, r2
 8007654:	e7bc      	b.n	80075d0 <_printf_i+0x148>
 8007656:	6833      	ldr	r3, [r6, #0]
 8007658:	1d1a      	adds	r2, r3, #4
 800765a:	6032      	str	r2, [r6, #0]
 800765c:	681e      	ldr	r6, [r3, #0]
 800765e:	6862      	ldr	r2, [r4, #4]
 8007660:	2100      	movs	r1, #0
 8007662:	4630      	mov	r0, r6
 8007664:	f7f8 fddc 	bl	8000220 <memchr>
 8007668:	b108      	cbz	r0, 800766e <_printf_i+0x1e6>
 800766a:	1b80      	subs	r0, r0, r6
 800766c:	6060      	str	r0, [r4, #4]
 800766e:	6863      	ldr	r3, [r4, #4]
 8007670:	6123      	str	r3, [r4, #16]
 8007672:	2300      	movs	r3, #0
 8007674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007678:	e7aa      	b.n	80075d0 <_printf_i+0x148>
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	4632      	mov	r2, r6
 800767e:	4649      	mov	r1, r9
 8007680:	4640      	mov	r0, r8
 8007682:	47d0      	blx	sl
 8007684:	3001      	adds	r0, #1
 8007686:	d0ad      	beq.n	80075e4 <_printf_i+0x15c>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	079b      	lsls	r3, r3, #30
 800768c:	d413      	bmi.n	80076b6 <_printf_i+0x22e>
 800768e:	68e0      	ldr	r0, [r4, #12]
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	4298      	cmp	r0, r3
 8007694:	bfb8      	it	lt
 8007696:	4618      	movlt	r0, r3
 8007698:	e7a6      	b.n	80075e8 <_printf_i+0x160>
 800769a:	2301      	movs	r3, #1
 800769c:	4632      	mov	r2, r6
 800769e:	4649      	mov	r1, r9
 80076a0:	4640      	mov	r0, r8
 80076a2:	47d0      	blx	sl
 80076a4:	3001      	adds	r0, #1
 80076a6:	d09d      	beq.n	80075e4 <_printf_i+0x15c>
 80076a8:	3501      	adds	r5, #1
 80076aa:	68e3      	ldr	r3, [r4, #12]
 80076ac:	9903      	ldr	r1, [sp, #12]
 80076ae:	1a5b      	subs	r3, r3, r1
 80076b0:	42ab      	cmp	r3, r5
 80076b2:	dcf2      	bgt.n	800769a <_printf_i+0x212>
 80076b4:	e7eb      	b.n	800768e <_printf_i+0x206>
 80076b6:	2500      	movs	r5, #0
 80076b8:	f104 0619 	add.w	r6, r4, #25
 80076bc:	e7f5      	b.n	80076aa <_printf_i+0x222>
 80076be:	bf00      	nop
 80076c0:	08007c0d 	.word	0x08007c0d
 80076c4:	08007c1e 	.word	0x08007c1e

080076c8 <__sflush_r>:
 80076c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d0:	0716      	lsls	r6, r2, #28
 80076d2:	4605      	mov	r5, r0
 80076d4:	460c      	mov	r4, r1
 80076d6:	d454      	bmi.n	8007782 <__sflush_r+0xba>
 80076d8:	684b      	ldr	r3, [r1, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dc02      	bgt.n	80076e4 <__sflush_r+0x1c>
 80076de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dd48      	ble.n	8007776 <__sflush_r+0xae>
 80076e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076e6:	2e00      	cmp	r6, #0
 80076e8:	d045      	beq.n	8007776 <__sflush_r+0xae>
 80076ea:	2300      	movs	r3, #0
 80076ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076f0:	682f      	ldr	r7, [r5, #0]
 80076f2:	6a21      	ldr	r1, [r4, #32]
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	d030      	beq.n	800775a <__sflush_r+0x92>
 80076f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	0759      	lsls	r1, r3, #29
 80076fe:	d505      	bpl.n	800770c <__sflush_r+0x44>
 8007700:	6863      	ldr	r3, [r4, #4]
 8007702:	1ad2      	subs	r2, r2, r3
 8007704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007706:	b10b      	cbz	r3, 800770c <__sflush_r+0x44>
 8007708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800770a:	1ad2      	subs	r2, r2, r3
 800770c:	2300      	movs	r3, #0
 800770e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007710:	6a21      	ldr	r1, [r4, #32]
 8007712:	4628      	mov	r0, r5
 8007714:	47b0      	blx	r6
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	d106      	bne.n	800772a <__sflush_r+0x62>
 800771c:	6829      	ldr	r1, [r5, #0]
 800771e:	291d      	cmp	r1, #29
 8007720:	d82b      	bhi.n	800777a <__sflush_r+0xb2>
 8007722:	4a2a      	ldr	r2, [pc, #168]	@ (80077cc <__sflush_r+0x104>)
 8007724:	410a      	asrs	r2, r1
 8007726:	07d6      	lsls	r6, r2, #31
 8007728:	d427      	bmi.n	800777a <__sflush_r+0xb2>
 800772a:	2200      	movs	r2, #0
 800772c:	6062      	str	r2, [r4, #4]
 800772e:	04d9      	lsls	r1, r3, #19
 8007730:	6922      	ldr	r2, [r4, #16]
 8007732:	6022      	str	r2, [r4, #0]
 8007734:	d504      	bpl.n	8007740 <__sflush_r+0x78>
 8007736:	1c42      	adds	r2, r0, #1
 8007738:	d101      	bne.n	800773e <__sflush_r+0x76>
 800773a:	682b      	ldr	r3, [r5, #0]
 800773c:	b903      	cbnz	r3, 8007740 <__sflush_r+0x78>
 800773e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007742:	602f      	str	r7, [r5, #0]
 8007744:	b1b9      	cbz	r1, 8007776 <__sflush_r+0xae>
 8007746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800774a:	4299      	cmp	r1, r3
 800774c:	d002      	beq.n	8007754 <__sflush_r+0x8c>
 800774e:	4628      	mov	r0, r5
 8007750:	f7ff fbea 	bl	8006f28 <_free_r>
 8007754:	2300      	movs	r3, #0
 8007756:	6363      	str	r3, [r4, #52]	@ 0x34
 8007758:	e00d      	b.n	8007776 <__sflush_r+0xae>
 800775a:	2301      	movs	r3, #1
 800775c:	4628      	mov	r0, r5
 800775e:	47b0      	blx	r6
 8007760:	4602      	mov	r2, r0
 8007762:	1c50      	adds	r0, r2, #1
 8007764:	d1c9      	bne.n	80076fa <__sflush_r+0x32>
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0c6      	beq.n	80076fa <__sflush_r+0x32>
 800776c:	2b1d      	cmp	r3, #29
 800776e:	d001      	beq.n	8007774 <__sflush_r+0xac>
 8007770:	2b16      	cmp	r3, #22
 8007772:	d11e      	bne.n	80077b2 <__sflush_r+0xea>
 8007774:	602f      	str	r7, [r5, #0]
 8007776:	2000      	movs	r0, #0
 8007778:	e022      	b.n	80077c0 <__sflush_r+0xf8>
 800777a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800777e:	b21b      	sxth	r3, r3
 8007780:	e01b      	b.n	80077ba <__sflush_r+0xf2>
 8007782:	690f      	ldr	r7, [r1, #16]
 8007784:	2f00      	cmp	r7, #0
 8007786:	d0f6      	beq.n	8007776 <__sflush_r+0xae>
 8007788:	0793      	lsls	r3, r2, #30
 800778a:	680e      	ldr	r6, [r1, #0]
 800778c:	bf08      	it	eq
 800778e:	694b      	ldreq	r3, [r1, #20]
 8007790:	600f      	str	r7, [r1, #0]
 8007792:	bf18      	it	ne
 8007794:	2300      	movne	r3, #0
 8007796:	eba6 0807 	sub.w	r8, r6, r7
 800779a:	608b      	str	r3, [r1, #8]
 800779c:	f1b8 0f00 	cmp.w	r8, #0
 80077a0:	dde9      	ble.n	8007776 <__sflush_r+0xae>
 80077a2:	6a21      	ldr	r1, [r4, #32]
 80077a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077a6:	4643      	mov	r3, r8
 80077a8:	463a      	mov	r2, r7
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b0      	blx	r6
 80077ae:	2800      	cmp	r0, #0
 80077b0:	dc08      	bgt.n	80077c4 <__sflush_r+0xfc>
 80077b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c4:	4407      	add	r7, r0
 80077c6:	eba8 0800 	sub.w	r8, r8, r0
 80077ca:	e7e7      	b.n	800779c <__sflush_r+0xd4>
 80077cc:	dfbffffe 	.word	0xdfbffffe

080077d0 <_fflush_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	690b      	ldr	r3, [r1, #16]
 80077d4:	4605      	mov	r5, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	b913      	cbnz	r3, 80077e0 <_fflush_r+0x10>
 80077da:	2500      	movs	r5, #0
 80077dc:	4628      	mov	r0, r5
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	b118      	cbz	r0, 80077ea <_fflush_r+0x1a>
 80077e2:	6a03      	ldr	r3, [r0, #32]
 80077e4:	b90b      	cbnz	r3, 80077ea <_fflush_r+0x1a>
 80077e6:	f7ff f8e9 	bl	80069bc <__sinit>
 80077ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0f3      	beq.n	80077da <_fflush_r+0xa>
 80077f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077f4:	07d0      	lsls	r0, r2, #31
 80077f6:	d404      	bmi.n	8007802 <_fflush_r+0x32>
 80077f8:	0599      	lsls	r1, r3, #22
 80077fa:	d402      	bmi.n	8007802 <_fflush_r+0x32>
 80077fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077fe:	f7ff fb90 	bl	8006f22 <__retarget_lock_acquire_recursive>
 8007802:	4628      	mov	r0, r5
 8007804:	4621      	mov	r1, r4
 8007806:	f7ff ff5f 	bl	80076c8 <__sflush_r>
 800780a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800780c:	07da      	lsls	r2, r3, #31
 800780e:	4605      	mov	r5, r0
 8007810:	d4e4      	bmi.n	80077dc <_fflush_r+0xc>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	059b      	lsls	r3, r3, #22
 8007816:	d4e1      	bmi.n	80077dc <_fflush_r+0xc>
 8007818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800781a:	f7ff fb83 	bl	8006f24 <__retarget_lock_release_recursive>
 800781e:	e7dd      	b.n	80077dc <_fflush_r+0xc>

08007820 <__swhatbuf_r>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	460c      	mov	r4, r1
 8007824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007828:	2900      	cmp	r1, #0
 800782a:	b096      	sub	sp, #88	@ 0x58
 800782c:	4615      	mov	r5, r2
 800782e:	461e      	mov	r6, r3
 8007830:	da0d      	bge.n	800784e <__swhatbuf_r+0x2e>
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007838:	f04f 0100 	mov.w	r1, #0
 800783c:	bf14      	ite	ne
 800783e:	2340      	movne	r3, #64	@ 0x40
 8007840:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007844:	2000      	movs	r0, #0
 8007846:	6031      	str	r1, [r6, #0]
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	b016      	add	sp, #88	@ 0x58
 800784c:	bd70      	pop	{r4, r5, r6, pc}
 800784e:	466a      	mov	r2, sp
 8007850:	f000 f848 	bl	80078e4 <_fstat_r>
 8007854:	2800      	cmp	r0, #0
 8007856:	dbec      	blt.n	8007832 <__swhatbuf_r+0x12>
 8007858:	9901      	ldr	r1, [sp, #4]
 800785a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800785e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007862:	4259      	negs	r1, r3
 8007864:	4159      	adcs	r1, r3
 8007866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800786a:	e7eb      	b.n	8007844 <__swhatbuf_r+0x24>

0800786c <__smakebuf_r>:
 800786c:	898b      	ldrh	r3, [r1, #12]
 800786e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007870:	079d      	lsls	r5, r3, #30
 8007872:	4606      	mov	r6, r0
 8007874:	460c      	mov	r4, r1
 8007876:	d507      	bpl.n	8007888 <__smakebuf_r+0x1c>
 8007878:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	6123      	str	r3, [r4, #16]
 8007880:	2301      	movs	r3, #1
 8007882:	6163      	str	r3, [r4, #20]
 8007884:	b003      	add	sp, #12
 8007886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007888:	ab01      	add	r3, sp, #4
 800788a:	466a      	mov	r2, sp
 800788c:	f7ff ffc8 	bl	8007820 <__swhatbuf_r>
 8007890:	9f00      	ldr	r7, [sp, #0]
 8007892:	4605      	mov	r5, r0
 8007894:	4639      	mov	r1, r7
 8007896:	4630      	mov	r0, r6
 8007898:	f7ff fbba 	bl	8007010 <_malloc_r>
 800789c:	b948      	cbnz	r0, 80078b2 <__smakebuf_r+0x46>
 800789e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a2:	059a      	lsls	r2, r3, #22
 80078a4:	d4ee      	bmi.n	8007884 <__smakebuf_r+0x18>
 80078a6:	f023 0303 	bic.w	r3, r3, #3
 80078aa:	f043 0302 	orr.w	r3, r3, #2
 80078ae:	81a3      	strh	r3, [r4, #12]
 80078b0:	e7e2      	b.n	8007878 <__smakebuf_r+0xc>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	6020      	str	r0, [r4, #0]
 80078b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	9b01      	ldr	r3, [sp, #4]
 80078be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078c2:	b15b      	cbz	r3, 80078dc <__smakebuf_r+0x70>
 80078c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078c8:	4630      	mov	r0, r6
 80078ca:	f000 f81d 	bl	8007908 <_isatty_r>
 80078ce:	b128      	cbz	r0, 80078dc <__smakebuf_r+0x70>
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	431d      	orrs	r5, r3
 80078e0:	81a5      	strh	r5, [r4, #12]
 80078e2:	e7cf      	b.n	8007884 <__smakebuf_r+0x18>

080078e4 <_fstat_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d07      	ldr	r5, [pc, #28]	@ (8007904 <_fstat_r+0x20>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	4611      	mov	r1, r2
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	f7f9 fa57 	bl	8000da4 <_fstat>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	d102      	bne.n	8007900 <_fstat_r+0x1c>
 80078fa:	682b      	ldr	r3, [r5, #0]
 80078fc:	b103      	cbz	r3, 8007900 <_fstat_r+0x1c>
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	bd38      	pop	{r3, r4, r5, pc}
 8007902:	bf00      	nop
 8007904:	20000b88 	.word	0x20000b88

08007908 <_isatty_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d06      	ldr	r5, [pc, #24]	@ (8007924 <_isatty_r+0x1c>)
 800790c:	2300      	movs	r3, #0
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	f7f9 fa56 	bl	8000dc4 <_isatty>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_isatty_r+0x1a>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	b103      	cbz	r3, 8007922 <_isatty_r+0x1a>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	20000b88 	.word	0x20000b88

08007928 <_sbrk_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d06      	ldr	r5, [pc, #24]	@ (8007944 <_sbrk_r+0x1c>)
 800792c:	2300      	movs	r3, #0
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	602b      	str	r3, [r5, #0]
 8007934:	f7f9 fa5e 	bl	8000df4 <_sbrk>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_sbrk_r+0x1a>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_sbrk_r+0x1a>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	20000b88 	.word	0x20000b88

08007948 <_init>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	bf00      	nop
 800794c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794e:	bc08      	pop	{r3}
 8007950:	469e      	mov	lr, r3
 8007952:	4770      	bx	lr

08007954 <_fini>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	bf00      	nop
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr
